
Discovery_USB_HOST_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007908  08007908  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007910  08007910  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  20000090  080079a8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  080079a8  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab0e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  0003abce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0003e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0003f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240e2  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118b5  00000000  00000000  000640f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8760  00000000  00000000  000759a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  0013e15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007764 	.word	0x08007764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007764 	.word	0x08007764

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 f9fe 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f822 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8b6 	bl	8000660 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004f4:	f006 fd16 	bl	8006f24 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_9600);
 80004f8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80004fc:	f000 f884 	bl	8000608 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4809      	ldr	r0, [pc, #36]	; (800052c <main+0x48>)
 8000508:	f000 fd32 	bl	8000f70 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 800050c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000510:	f000 fa5c 	bl	80009cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x48>)
 800051c:	f000 fd28 	bl	8000f70 <HAL_GPIO_WritePin>

  USBH_HID_KeybdInit(&hUsbHostFS);
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <main+0x4c>)
 8000522:	f004 fb75 	bl	8004c10 <USBH_HID_KeybdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000526:	f006 fd23 	bl	8006f70 <MX_USB_HOST_Process>
 800052a:	e7fc      	b.n	8000526 <main+0x42>
 800052c:	40020000 	.word	0x40020000
 8000530:	200008f8 	.word	0x200008f8

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 f818 	bl	8007578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	; 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f9e5 	bl	8002988 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f874 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc3e 	bl	8002e68 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f85d 	bl	80006b0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000630:	220c      	movs	r2, #12
 8000632:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000642:	f002 fe0d 	bl	8003260 <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800064c:	f000 f830 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c4 	.word	0x200000c4
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_UART_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12b      	bne.n	800078a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_UART_MspInit+0x88>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <HAL_UART_MspInit+0x88>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_UART_MspInit+0x88>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_UART_MspInit+0x88>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_UART_MspInit+0x88>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_UART_MspInit+0x88>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077a:	2307      	movs	r3, #7
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <HAL_UART_MspInit+0x8c>)
 8000786:	f000 fa57 	bl	8000c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40004400 	.word	0x40004400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8ca 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <OTG_FS_IRQHandler+0x10>)
 8000802:	f000 fe5d 	bl	80014c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000cd0 	.word	0x20000cd0

08000810 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x50>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x16>
		heap_end = &end;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <_sbrk+0x50>)
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <_sbrk+0x54>)
 8000824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <_sbrk+0x50>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <_sbrk+0x50>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	466a      	mov	r2, sp
 8000836:	4293      	cmp	r3, r2
 8000838:	d907      	bls.n	800084a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800083a:	f006 fe63 	bl	8007504 <__errno>
 800083e:	4603      	mov	r3, r0
 8000840:	220c      	movs	r2, #12
 8000842:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	e006      	b.n	8000858 <_sbrk+0x48>
	}

	heap_end += incr;
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_sbrk+0x50>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a03      	ldr	r2, [pc, #12]	; (8000860 <_sbrk+0x50>)
 8000854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000ac 	.word	0x200000ac
 8000864:	20000fa8 	.word	0x20000fa8

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <SystemInit+0x28>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <SystemInit+0x28>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SystemInit+0x28>)
 800087e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000882:	609a      	str	r2, [r3, #8]
#endif
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000898:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800089a:	e003      	b.n	80008a4 <LoopCopyDataInit>

0800089c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800089e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008a2:	3104      	adds	r1, #4

080008a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008ac:	d3f6      	bcc.n	800089c <CopyDataInit>
  ldr  r2, =_sbss
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008b0:	e002      	b.n	80008b8 <LoopFillZerobss>

080008b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008b4:	f842 3b04 	str.w	r3, [r2], #4

080008b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008bc:	d3f9      	bcc.n	80008b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008be:	f7ff ffd3 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c2:	f006 fe25 	bl	8007510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe0d 	bl	80004e4 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008d0:	08007918 	.word	0x08007918
  ldr  r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008d8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80008dc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80008e0:	20000fa4 	.word	0x20000fa4

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f94f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fed0 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f967 	bl	8000c1e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f92f 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000104 	.word	0x20000104

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000104 	.word	0x20000104

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <__NVIC_EnableIRQ+0x38>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db0a      	blt.n	8000ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <__NVIC_SetPriority+0x4c>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	0112      	lsls	r2, r2, #4
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000adc:	e00a      	b.n	8000af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4908      	ldr	r1, [pc, #32]	; (8000b04 <__NVIC_SetPriority+0x50>)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	3b04      	subs	r3, #4
 8000aec:	0112      	lsls	r2, r2, #4
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	440b      	add	r3, r1
 8000af2:	761a      	strb	r2, [r3, #24]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0307 	rsb	r3, r3, #7
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	bf28      	it	cs
 8000b26:	2304      	movcs	r3, #4
 8000b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d902      	bls.n	8000b38 <NVIC_EncodePriority+0x30>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3b03      	subs	r3, #3
 8000b36:	e000      	b.n	8000b3a <NVIC_EncodePriority+0x32>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43da      	mvns	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5a:	43d9      	mvns	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	4313      	orrs	r3, r2
         );
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff8e 	bl	8000ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff29 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff3e 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff8e 	bl	8000b08 <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5d 	bl	8000ab4 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff31 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	e16b      	b.n	8000f2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 815a 	bne.w	8000f26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d00b      	beq.n	8000c92 <HAL_GPIO_Init+0x5a>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d007      	beq.n	8000c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c86:	2b11      	cmp	r3, #17
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d130      	bne.n	8000cf4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	f003 0201 	and.w	r2, r3, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0xfc>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b12      	cmp	r3, #18
 8000d32:	d123      	bne.n	8000d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	69b9      	ldr	r1, [r7, #24]
 8000d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0203 	and.w	r2, r3, #3
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80b4 	beq.w	8000f26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <HAL_GPIO_Init+0x30c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dda:	4a5b      	ldr	r2, [pc, #364]	; (8000f48 <HAL_GPIO_Init+0x310>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	220f      	movs	r2, #15
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x314>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d02b      	beq.n	8000e5e <HAL_GPIO_Init+0x226>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a51      	ldr	r2, [pc, #324]	; (8000f50 <HAL_GPIO_Init+0x318>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d025      	beq.n	8000e5a <HAL_GPIO_Init+0x222>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a50      	ldr	r2, [pc, #320]	; (8000f54 <HAL_GPIO_Init+0x31c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d01f      	beq.n	8000e56 <HAL_GPIO_Init+0x21e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <HAL_GPIO_Init+0x320>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d019      	beq.n	8000e52 <HAL_GPIO_Init+0x21a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x324>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d013      	beq.n	8000e4e <HAL_GPIO_Init+0x216>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x328>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00d      	beq.n	8000e4a <HAL_GPIO_Init+0x212>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x32c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d007      	beq.n	8000e46 <HAL_GPIO_Init+0x20e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4b      	ldr	r2, [pc, #300]	; (8000f68 <HAL_GPIO_Init+0x330>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_GPIO_Init+0x20a>
 8000e3e:	2307      	movs	r3, #7
 8000e40:	e00e      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e42:	2308      	movs	r3, #8
 8000e44:	e00c      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e46:	2306      	movs	r3, #6
 8000e48:	e00a      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e008      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e52:	2303      	movs	r3, #3
 8000e54:	e004      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_GPIO_Init+0x228>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	f002 0203 	and.w	r2, r2, #3
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	4093      	lsls	r3, r2
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e70:	4935      	ldr	r1, [pc, #212]	; (8000f48 <HAL_GPIO_Init+0x310>)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea2:	4a32      	ldr	r2, [pc, #200]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ecc:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_GPIO_Init+0x334>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	f67f ae90 	bls.w	8000c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021c00 	.word	0x40021c00
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa4:	b08f      	sub	sp, #60	; 0x3c
 8000fa6:	af0a      	add	r7, sp, #40	; 0x28
 8000fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e054      	b.n	800105e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f006 f806 	bl	8006fe0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 ff18 	bl	8003e28 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	687e      	ldr	r6, [r7, #4]
 8001000:	466d      	mov	r5, sp
 8001002:	f106 0410 	add.w	r4, r6, #16
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001012:	e885 0003 	stmia.w	r5, {r0, r1}
 8001016:	1d33      	adds	r3, r6, #4
 8001018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f002 fe92 	bl	8003d44 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f002 ff0f 	bl	8003e4a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	687e      	ldr	r6, [r7, #4]
 8001034:	466d      	mov	r5, sp
 8001036:	f106 0410 	add.w	r4, r6, #16
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001046:	e885 0003 	stmia.w	r5, {r0, r1}
 800104a:	1d33      	adds	r3, r6, #4
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f003 f822 	bl	8004098 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001066 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b089      	sub	sp, #36	; 0x24
 800106a:	af04      	add	r7, sp, #16
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4603      	mov	r3, r0
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	460b      	mov	r3, r1
 800107a:	70bb      	strb	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_HCD_HC_Init+0x28>
 800108a:	2302      	movs	r3, #2
 800108c:	e07f      	b.n	800118e <HAL_HCD_HC_Init+0x128>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	333d      	adds	r3, #61	; 0x3d
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3338      	adds	r3, #56	; 0x38
 80010ba:	787a      	ldrb	r2, [r7, #1]
 80010bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3340      	adds	r3, #64	; 0x40
 80010ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3339      	adds	r3, #57	; 0x39
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	333f      	adds	r3, #63	; 0x3f
 80010f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010fc:	78fa      	ldrb	r2, [r7, #3]
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	333a      	adds	r3, #58	; 0x3a
 8001114:	4602      	mov	r2, r0
 8001116:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da0a      	bge.n	8001136 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001120:	78fa      	ldrb	r2, [r7, #3]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	333b      	adds	r3, #59	; 0x3b
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e009      	b.n	800114a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001136:	78fa      	ldrb	r2, [r7, #3]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	333b      	adds	r3, #59	; 0x3b
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800114a:	78fa      	ldrb	r2, [r7, #3]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	333c      	adds	r3, #60	; 0x3c
 800115a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800115e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	787c      	ldrb	r4, [r7, #1]
 8001166:	78ba      	ldrb	r2, [r7, #2]
 8001168:	78f9      	ldrb	r1, [r7, #3]
 800116a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4623      	mov	r3, r4
 800117c:	f003 f90e 	bl	800439c <USB_HC_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}

08001196 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_HCD_HC_Halt+0x1e>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e00f      	b.n	80011d4 <HAL_HCD_HC_Halt+0x3e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fb46 	bl	8004856 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70bb      	strb	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011f6:	78fa      	ldrb	r2, [r7, #3]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	333b      	adds	r3, #59	; 0x3b
 8001206:	78ba      	ldrb	r2, [r7, #2]
 8001208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	333f      	adds	r3, #63	; 0x3f
 800121a:	787a      	ldrb	r2, [r7, #1]
 800121c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800121e:	7c3b      	ldrb	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d114      	bne.n	800124e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3342      	adds	r3, #66	; 0x42
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	333d      	adds	r3, #61	; 0x3d
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e009      	b.n	8001262 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3342      	adds	r3, #66	; 0x42
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	2b03      	cmp	r3, #3
 8001266:	f200 80d6 	bhi.w	8001416 <HAL_HCD_HC_SubmitRequest+0x23a>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <HAL_HCD_HC_SubmitRequest+0x94>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	08001281 	.word	0x08001281
 8001274:	08001401 	.word	0x08001401
 8001278:	080012ed 	.word	0x080012ed
 800127c:	08001377 	.word	0x08001377
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001280:	7c3b      	ldrb	r3, [r7, #16]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f040 80c9 	bne.w	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80c5 	bne.w	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001290:	8b3b      	ldrh	r3, [r7, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3351      	adds	r3, #81	; 0x51
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3351      	adds	r3, #81	; 0x51
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10a      	bne.n	80012d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3342      	adds	r3, #66	; 0x42
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012d4:	e0a1      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3342      	adds	r3, #66	; 0x42
 80012e6:	2202      	movs	r2, #2
 80012e8:	701a      	strb	r2, [r3, #0]
      break;
 80012ea:	e096      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d120      	bne.n	8001334 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	3351      	adds	r3, #81	; 0x51
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10a      	bne.n	800131e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3342      	adds	r3, #66	; 0x42
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800131c:	e07e      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3342      	adds	r3, #66	; 0x42
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
      break;
 8001332:	e073      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3350      	adds	r3, #80	; 0x50
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10a      	bne.n	8001360 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	3342      	adds	r3, #66	; 0x42
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e05d      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3342      	adds	r3, #66	; 0x42
 8001370:	2202      	movs	r2, #2
 8001372:	701a      	strb	r2, [r3, #0]
      break;
 8001374:	e052      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001376:	78bb      	ldrb	r3, [r7, #2]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d120      	bne.n	80013be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3351      	adds	r3, #81	; 0x51
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10a      	bne.n	80013a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3342      	adds	r3, #66	; 0x42
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80013a6:	e039      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3342      	adds	r3, #66	; 0x42
 80013b8:	2202      	movs	r2, #2
 80013ba:	701a      	strb	r2, [r3, #0]
      break;
 80013bc:	e02e      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3350      	adds	r3, #80	; 0x50
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10a      	bne.n	80013ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3342      	adds	r3, #66	; 0x42
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
      break;
 80013e8:	e018      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3342      	adds	r3, #66	; 0x42
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
      break;
 80013fe:	e00d      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
      break;
 8001414:	e002      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800141a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3344      	adds	r3, #68	; 0x44
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	8b39      	ldrh	r1, [r7, #24]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4403      	add	r3, r0
 8001440:	3348      	adds	r3, #72	; 0x48
 8001442:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	335c      	adds	r3, #92	; 0x5c
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	334c      	adds	r3, #76	; 0x4c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3339      	adds	r3, #57	; 0x39
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	335d      	adds	r3, #93	; 0x5d
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3338      	adds	r3, #56	; 0x38
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	18d1      	adds	r1, r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f003 f87e 	bl	80045b0 <USB_HC_StartXfer>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop

080014c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fd9b 	bl	8004012 <USB_GetMode>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 80ef 	bne.w	80016c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fd7f 	bl	8003fec <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80e5 	beq.w	80016c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fd76 	bl	8003fec <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800150a:	d104      	bne.n	8001516 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fd66 	bl	8003fec <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800152a:	d104      	bne.n	8001536 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fd56 	bl	8003fec <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800154a:	d104      	bne.n	8001556 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fd46 	bl	8003fec <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d103      	bne.n	8001572 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fd38 	bl	8003fec <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001586:	d115      	bne.n	80015b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001590:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d108      	bne.n	80015b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f005 fd8c 	bl	80070c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fe2e 	bl	8004210 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fd17 	bl	8003fec <USB_ReadInterrupts>
 80015be:	4603      	mov	r3, r0
 80015c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d102      	bne.n	80015d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f001 f968 	bl	80028a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fd09 	bl	8003fec <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d106      	bne.n	80015f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f005 fd4f 	bl	8007088 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2208      	movs	r2, #8
 80015f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fcf8 	bl	8003fec <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001606:	d138      	bne.n	800167a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f911 	bl	8004834 <USB_HC_ReadInterrupt>
 8001612:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e025      	b.n	8001666 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d018      	beq.n	8001660 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001644:	d106      	bne.n	8001654 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8cf 	bl	80017f0 <HCD_HC_IN_IRQHandler>
 8001652:	e005      	b.n	8001660 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fcfd 	bl	800205a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3d4      	bcc.n	800161a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fcb4 	bl	8003fec <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b10      	cmp	r3, #16
 800168c:	d101      	bne.n	8001692 <HAL_HCD_IRQHandler+0x1d2>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_HCD_IRQHandler+0x1d4>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d014      	beq.n	80016c2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0210 	bic.w	r2, r2, #16
 80016a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 f84b 	bl	8002744 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0210 	orr.w	r2, r2, #16
 80016bc:	619a      	str	r2, [r3, #24]
 80016be:	e000      	b.n	80016c2 <HAL_HCD_IRQHandler+0x202>
      return;
 80016c0:	bf00      	nop
    }
  }
}
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_HCD_Start+0x16>
 80016da:	2302      	movs	r3, #2
 80016dc:	e013      	b.n	8001706 <HAL_HCD_Start+0x3e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fb8b 	bl	8003e06 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fdee 	bl	80042d8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_HCD_Stop+0x16>
 8001720:	2302      	movs	r3, #2
 8001722:	e00d      	b.n	8001740 <HAL_HCD_Stop+0x32>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f9cb 	bl	8004acc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fd95 	bl	8004284 <USB_ResetPort>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335c      	adds	r3, #92	; 0x5c
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	334c      	adds	r3, #76	; 0x4c
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fdd7 	bl	8004378 <USB_GetCurrentFrame>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fdb2 	bl	800434a <USB_GetHostSpeed>
 80017e6:	4603      	mov	r3, r0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d119      	bne.n	8001854 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	461a      	mov	r2, r3
 800182e:	2304      	movs	r3, #4
 8001830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	0151      	lsls	r1, r2, #5
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	440a      	add	r2, r1
 8001848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	60d3      	str	r3, [r2, #12]
 8001852:	e0ce      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4413      	add	r3, r2
 800185c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186a:	d12c      	bne.n	80018c6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001878:	461a      	mov	r2, r3
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	335d      	adds	r3, #93	; 0x5d
 8001890:	2207      	movs	r2, #7
 8001892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	0151      	lsls	r1, r2, #5
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	440a      	add	r2, r1
 80018aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 ffc9 	bl	8004856 <USB_HC_Halt>
 80018c4:	e095      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d109      	bne.n	80018f0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	015a      	lsls	r2, r3, #5
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e8:	461a      	mov	r2, r3
 80018ea:	2320      	movs	r3, #32
 80018ec:	6093      	str	r3, [r2, #8]
 80018ee:	e080      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b08      	cmp	r3, #8
 8001904:	d134      	bne.n	8001970 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	0151      	lsls	r1, r2, #5
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	440a      	add	r2, r1
 800191c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	335d      	adds	r3, #93	; 0x5d
 8001936:	2205      	movs	r2, #5
 8001938:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2310      	movs	r3, #16
 800194a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2308      	movs	r3, #8
 800195c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ff74 	bl	8004856 <USB_HC_Halt>
 800196e:	e040      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d134      	bne.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	0151      	lsls	r1, r2, #5
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	440a      	add	r2, r1
 800199e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ff4f 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c4:	461a      	mov	r2, r3
 80019c6:	2310      	movs	r3, #16
 80019c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	335d      	adds	r3, #93	; 0x5d
 80019da:	2208      	movs	r2, #8
 80019dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ea:	461a      	mov	r2, r3
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d122      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	0151      	lsls	r1, r2, #5
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	440a      	add	r2, r1
 8001a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ff0e 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	461a      	mov	r2, r3
 8001a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a4e:	e300      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 80fd 	bne.w	8001c62 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3348      	adds	r3, #72	; 0x48
 8001a80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a94:	1ad1      	subs	r1, r2, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4403      	add	r3, r0
 8001aa4:	334c      	adds	r3, #76	; 0x4c
 8001aa6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	335d      	adds	r3, #93	; 0x5d
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3358      	adds	r3, #88	; 0x58
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	333f      	adds	r3, #63	; 0x3f
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00a      	beq.n	8001b0e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	333f      	adds	r3, #63	; 0x3f
 8001b08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d121      	bne.n	8001b52 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	0151      	lsls	r1, r2, #5
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	440a      	add	r2, r1
 8001b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fe8c 	bl	8004856 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	6093      	str	r3, [r2, #8]
 8001b50:	e070      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	333f      	adds	r3, #63	; 0x3f
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d12a      	bne.n	8001bbe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b86:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	335c      	adds	r3, #92	; 0x5c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	b2d8      	uxtb	r0, r3
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335c      	adds	r3, #92	; 0x5c
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f005 fa90 	bl	80070dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bbc:	e03a      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333f      	adds	r3, #63	; 0x3f
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d12f      	bne.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	335c      	adds	r3, #92	; 0x5c
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3350      	adds	r3, #80	; 0x50
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3350      	adds	r3, #80	; 0x50
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	b2d8      	uxtb	r0, r3
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	335c      	adds	r3, #92	; 0x5c
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 fa54 	bl	80070dc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3350      	adds	r3, #80	; 0x50
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	701a      	strb	r2, [r3, #0]
}
 8001c60:	e1f7      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	f040 811a 	bne.w	8001eae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	0151      	lsls	r1, r2, #5
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	440a      	add	r2, r1
 8001c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	335d      	adds	r3, #93	; 0x5d
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10a      	bne.n	8001cc6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	335c      	adds	r3, #92	; 0x5c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e0d9      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	335d      	adds	r3, #93	; 0x5d
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10a      	bne.n	8001cf2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	335c      	adds	r3, #92	; 0x5c
 8001cec:	2205      	movs	r2, #5
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e0c3      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	335d      	adds	r3, #93	; 0x5d
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d00a      	beq.n	8001d1e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	335d      	adds	r3, #93	; 0x5d
 8001d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d156      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3358      	adds	r3, #88	; 0x58
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4403      	add	r3, r0
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3358      	adds	r3, #88	; 0x58
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d914      	bls.n	8001d84 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3358      	adds	r3, #88	; 0x58
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	335c      	adds	r3, #92	; 0x5c
 8001d7e:	2204      	movs	r2, #4
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e009      	b.n	8001d98 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335c      	adds	r3, #92	; 0x5c
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e056      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	335d      	adds	r3, #93	; 0x5d
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d123      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	335c      	adds	r3, #92	; 0x5c
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e027      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	335d      	adds	r3, #93	; 0x5d
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d11c      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3358      	adds	r3, #88	; 0x58
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4403      	add	r3, r0
 8001e62:	3358      	adds	r3, #88	; 0x58
 8001e64:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	335c      	adds	r3, #92	; 0x5c
 8001e76:	2204      	movs	r2, #4
 8001e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	461a      	mov	r2, r3
 8001e88:	2302      	movs	r3, #2
 8001e8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	b2d8      	uxtb	r0, r3
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335c      	adds	r3, #92	; 0x5c
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 f918 	bl	80070dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eac:	e0d1      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d13e      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	0151      	lsls	r1, r2, #5
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	440a      	add	r2, r1
 8001eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3358      	adds	r3, #88	; 0x58
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1c59      	adds	r1, r3, #1
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4403      	add	r3, r0
 8001f06:	3358      	adds	r3, #88	; 0x58
 8001f08:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335d      	adds	r3, #93	; 0x5d
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fc94 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	6093      	str	r3, [r2, #8]
}
 8001f40:	e087      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d17c      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	333f      	adds	r3, #63	; 0x3f
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d122      	bne.n	8001fb4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3358      	adds	r3, #88	; 0x58
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fc52 	bl	8004856 <USB_HC_Halt>
 8001fb2:	e045      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333f      	adds	r3, #63	; 0x3f
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333f      	adds	r3, #63	; 0x3f
 8001fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d12f      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3358      	adds	r3, #88	; 0x58
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d121      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	2203      	movs	r2, #3
 800200e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	0151      	lsls	r1, r2, #5
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	440a      	add	r2, r1
 8002026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fc0b 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	2310      	movs	r3, #16
 8002050:	6093      	str	r3, [r2, #8]
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d119      	bne.n	80020be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	2304      	movs	r3, #4
 800209a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	0151      	lsls	r1, r2, #5
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	440a      	add	r2, r1
 80020b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020bc:	e33e      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d141      	bne.n	8002158 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2320      	movs	r3, #32
 80020e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	333d      	adds	r3, #61	; 0x3d
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	f040 831f 	bne.w	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	333d      	adds	r3, #61	; 0x3d
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	335c      	adds	r3, #92	; 0x5c
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fb80 	bl	8004856 <USB_HC_Halt>
}
 8002156:	e2f1      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d13f      	bne.n	80021ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	2204      	movs	r2, #4
 8002180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	333d      	adds	r3, #61	; 0x3d
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fb3e 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	6093      	str	r3, [r2, #8]
}
 80021ec:	e2a6      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d122      	bne.n	800224c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fb10 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002248:	6093      	str	r3, [r2, #8]
}
 800224a:	e277      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d135      	bne.n	80022ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3358      	adds	r3, #88	; 0x58
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fad8 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2301      	movs	r3, #1
 80022b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	335d      	adds	r3, #93	; 0x5d
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
}
 80022cc:	e236      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d12b      	bne.n	800233c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fa98 	bl	8004856 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	335d      	adds	r3, #93	; 0x5d
 8002336:	2205      	movs	r2, #5
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	e1ff      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d155      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3358      	adds	r3, #88	; 0x58
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	335d      	adds	r3, #93	; 0x5d
 8002376:	2203      	movs	r2, #3
 8002378:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	333d      	adds	r3, #61	; 0x3d
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	333c      	adds	r3, #60	; 0x3c
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	333d      	adds	r3, #61	; 0x3d
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	0151      	lsls	r1, r2, #5
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	440a      	add	r2, r1
 80023d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fa36 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	461a      	mov	r2, r3
 80023f8:	2310      	movs	r3, #16
 80023fa:	6093      	str	r3, [r2, #8]
}
 80023fc:	e19e      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d12b      	bne.n	800246c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	0151      	lsls	r1, r2, #5
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	440a      	add	r2, r1
 800242a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f002 fa09 	bl	8004856 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	335d      	adds	r3, #93	; 0x5d
 8002454:	2206      	movs	r2, #6
 8002456:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	6093      	str	r3, [r2, #8]
}
 800246a:	e167      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d135      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 f9d1 	bl	8004856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2310      	movs	r3, #16
 80024c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	335d      	adds	r3, #93	; 0x5d
 80024ea:	2208      	movs	r2, #8
 80024ec:	701a      	strb	r2, [r3, #0]
}
 80024ee:	e125      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 811a 	bne.w	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f023 0302 	bic.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	335d      	adds	r3, #93	; 0x5d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d137      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	333f      	adds	r3, #63	; 0x3f
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d00b      	beq.n	8002580 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	333f      	adds	r3, #63	; 0x3f
 8002578:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800257a:	2b03      	cmp	r3, #3
 800257c:	f040 80c5 	bne.w	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	3351      	adds	r3, #81	; 0x51
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3351      	adds	r3, #81	; 0x51
 80025a8:	4602      	mov	r2, r0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e0ad      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	335d      	adds	r3, #93	; 0x5d
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d10a      	bne.n	80025da <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e097      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	335d      	adds	r3, #93	; 0x5d
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d10a      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e081      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	335d      	adds	r3, #93	; 0x5d
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10a      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	2205      	movs	r2, #5
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e06b      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335d      	adds	r3, #93	; 0x5d
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d00a      	beq.n	800265e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335d      	adds	r3, #93	; 0x5d
 8002658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800265a:	2b08      	cmp	r3, #8
 800265c:	d155      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3358      	adds	r3, #88	; 0x58
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4403      	add	r3, r0
 8002680:	3358      	adds	r3, #88	; 0x58
 8002682:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	3358      	adds	r3, #88	; 0x58
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d914      	bls.n	80026c4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3358      	adds	r3, #88	; 0x58
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	335c      	adds	r3, #92	; 0x5c
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e009      	b.n	80026d8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2302      	movs	r3, #2
 800271a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	b2d8      	uxtb	r0, r3
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	335c      	adds	r3, #92	; 0x5c
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4601      	mov	r1, r0
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f004 fcd0 	bl	80070dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	0c5b      	lsrs	r3, r3, #17
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002778:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d004      	beq.n	800278a <HCD_RXQLVL_IRQHandler+0x46>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b05      	cmp	r3, #5
 8002784:	f000 8082 	beq.w	800288c <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002788:	e083      	b.n	8002892 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d07f      	beq.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3344      	adds	r3, #68	; 0x44
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d074      	beq.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	3344      	adds	r3, #68	; 0x44
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	b292      	uxth	r2, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f001 fbea 	bl	8003f9a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	3344      	adds	r3, #68	; 0x44
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	18d1      	adds	r1, r2, r3
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4403      	add	r3, r0
 80027ea:	3344      	adds	r3, #68	; 0x44
 80027ec:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	334c      	adds	r3, #76	; 0x4c
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	18d1      	adds	r1, r2, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4403      	add	r3, r0
 8002812:	334c      	adds	r3, #76	; 0x4c
 8002814:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HCD_RXQLVL_IRQHandler+0x158>)
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d031      	beq.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002842:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800284a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	3350      	adds	r3, #80	; 0x50
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f083 0301 	eor.w	r3, r3, #1
 8002874:	b2d8      	uxtb	r0, r3
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	3350      	adds	r3, #80	; 0x50
 8002886:	4602      	mov	r2, r0
 8002888:	701a      	strb	r2, [r3, #0]
      break;
 800288a:	e001      	b.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8002890:	bf00      	nop
  }
}
 8002892:	bf00      	nop
 8002894:	3728      	adds	r7, #40	; 0x28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	1ff80000 	.word	0x1ff80000

080028a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d10b      	bne.n	80028f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d102      	bne.n	80028e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f004 fbde 	bl	80070a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f043 0302 	orr.w	r3, r3, #2
 80028ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d132      	bne.n	8002960 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d126      	bne.n	800295a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d113      	bne.n	800293c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800291a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291e:	d106      	bne.n	800292e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fc72 	bl	8004210 <USB_InitFSLSPClkSel>
 800292c:	e011      	b.n	8002952 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fc6b 	bl	8004210 <USB_InitFSLSPClkSel>
 800293a:	e00a      	b.n	8002952 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800294a:	461a      	mov	r2, r3
 800294c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002950:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f004 fbd0 	bl	80070f8 <HAL_HCD_PortEnabled_Callback>
 8002958:	e002      	b.n	8002960 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f004 fbda 	bl	8007114 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d103      	bne.n	8002972 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f043 0320 	orr.w	r3, r3, #32
 8002970:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e25b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d075      	beq.n	8002a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a6:	4ba3      	ldr	r3, [pc, #652]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d00c      	beq.n	80029cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4ba0      	ldr	r3, [pc, #640]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d112      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4b9d      	ldr	r3, [pc, #628]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ca:	d10b      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	4b99      	ldr	r3, [pc, #612]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d05b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x108>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d157      	bne.n	8002a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e236      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x74>
 80029ee:	4b91      	ldr	r3, [pc, #580]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a90      	ldr	r2, [pc, #576]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e01d      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x98>
 8002a06:	4b8b      	ldr	r3, [pc, #556]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a8a      	ldr	r2, [pc, #552]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b88      	ldr	r3, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a87      	ldr	r2, [pc, #540]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0xb0>
 8002a20:	4b84      	ldr	r3, [pc, #528]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a83      	ldr	r2, [pc, #524]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b81      	ldr	r3, [pc, #516]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a80      	ldr	r2, [pc, #512]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fd ffb8 	bl	80009b4 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7fd ffb4 	bl	80009b4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1fb      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0xc0>
 8002a66:	e014      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fd ffa4 	bl	80009b4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fd ffa0 	bl	80009b4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e1e7      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a82:	4b6c      	ldr	r3, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0xe8>
 8002a8e:	e000      	b.n	8002a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b62      	ldr	r3, [pc, #392]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b5f      	ldr	r3, [pc, #380]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1bb      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4952      	ldr	r1, [pc, #328]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_RCC_OscConfig+0x2b0>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fd ff59 	bl	80009b4 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b06:	f7fd ff55 	bl	80009b4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e19c      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4940      	ldr	r1, [pc, #256]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_OscConfig+0x2b0>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fd ff38 	bl	80009b4 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7fd ff34 	bl	80009b4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e17b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d030      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_RCC_OscConfig+0x2b4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7fd ff18 	bl	80009b4 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fd ff14 	bl	80009b4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e15b      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x200>
 8002ba6:	e015      	b.n	8002bd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_OscConfig+0x2b4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bae:	f7fd ff01 	bl	80009b4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7fd fefd 	bl	80009b4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e144      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a0 	beq.w	8002d22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <HAL_RCC_OscConfig+0x2b8>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7fd fec3 	bl	80009b4 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e011      	b.n	8002c56 <HAL_RCC_OscConfig+0x2ce>
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470000 	.word	0x42470000
 8002c3c:	42470e80 	.word	0x42470e80
 8002c40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fd feb6 	bl	80009b4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0fd      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b81      	ldr	r3, [pc, #516]	; (8002e5c <HAL_RCC_OscConfig+0x4d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x2f0>
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e01c      	b.n	8002cb2 <HAL_RCC_OscConfig+0x32a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x312>
 8002c80:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a73      	ldr	r2, [pc, #460]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x32a>
 8002c9a:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a70      	ldr	r2, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fd fe7b 	bl	80009b4 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fd fe77 	bl	80009b4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0bc      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x33a>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fd fe65 	bl	80009b4 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fd fe61 	bl	80009b4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0a6      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d04:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8092 	beq.w	8002e50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2c:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d05c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d141      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fd fe35 	bl	80009b4 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fd fe31 	bl	80009b4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e078      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d60:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	4933      	ldr	r1, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d96:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fd fe0a 	bl	80009b4 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd fe06 	bl	80009b4 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04d      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x41c>
 8002dc2:	e045      	b.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x4dc>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fd fdf3 	bl	80009b4 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fd fdef 	bl	80009b4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e036      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x44a>
 8002df0:	e02e      	b.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e029      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x4d8>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470060 	.word	0x42470060

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fd fd2c 	bl	80009b4 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fd fd28 	bl	80009b4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fc8c 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	080078f0 	.word	0x080078f0
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	2300      	movs	r3, #0
 8003046:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80bd 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e0b7      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800306a:	60bb      	str	r3, [r7, #8]
       break;
 800306c:	e0b7      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003070:	60bb      	str	r3, [r7, #8]
      break;
 8003072:	e0b4      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d04d      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b58      	ldr	r3, [pc, #352]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	461a      	mov	r2, r3
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	f240 10ff 	movw	r0, #511	; 0x1ff
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	ea02 0800 	and.w	r8, r2, r0
 80030a2:	ea03 0901 	and.w	r9, r3, r1
 80030a6:	4640      	mov	r0, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b8:	0142      	lsls	r2, r0, #5
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	ebb0 0008 	subs.w	r0, r0, r8
 80030c2:	eb61 0109 	sbc.w	r1, r1, r9
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030d4:	0182      	lsls	r2, r0, #6
 80030d6:	1a12      	subs	r2, r2, r0
 80030d8:	eb63 0301 	sbc.w	r3, r3, r1
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	00d9      	lsls	r1, r3, #3
 80030e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ea:	00d0      	lsls	r0, r2, #3
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	eb12 0208 	adds.w	r2, r2, r8
 80030f4:	eb43 0309 	adc.w	r3, r3, r9
 80030f8:	f04f 0000 	mov.w	r0, #0
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	0259      	lsls	r1, r3, #9
 8003102:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003106:	0250      	lsls	r0, r2, #9
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f7fd f868 	bl	80001ec <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e04a      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	461a      	mov	r2, r3
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	ea02 0400 	and.w	r4, r2, r0
 800313e:	ea03 0501 	and.w	r5, r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003154:	0142      	lsls	r2, r0, #5
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	1b00      	subs	r0, r0, r4
 800315c:	eb61 0105 	sbc.w	r1, r1, r5
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316e:	0182      	lsls	r2, r0, #6
 8003170:	1a12      	subs	r2, r2, r0
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003184:	00d0      	lsls	r0, r2, #3
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	1912      	adds	r2, r2, r4
 800318c:	eb45 0303 	adc.w	r3, r5, r3
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0299      	lsls	r1, r3, #10
 800319a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800319e:	0290      	lsls	r0, r2, #10
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd f81c 	bl	80001ec <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	60bb      	str	r3, [r7, #8]
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031da:	60bb      	str	r3, [r7, #8]
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	68bb      	ldr	r3, [r7, #8]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003214:	f7ff fff0 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	08007900 	.word	0x08007900

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800323c:	f7ff ffdc 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0b5b      	lsrs	r3, r3, #13
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	08007900 	.word	0x08007900

08003260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03f      	b.n	80032f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fa42 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f9b1 	bl	800360c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af02      	add	r7, sp, #8
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	f040 8083 	bne.w	8003422 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_UART_Transmit+0x2e>
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e07b      	b.n	8003424 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_UART_Transmit+0x40>
 8003336:	2302      	movs	r3, #2
 8003338:	e074      	b.n	8003424 <HAL_UART_Transmit+0x12a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2221      	movs	r2, #33	; 0x21
 800334c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003350:	f7fd fb30 	bl	80009b4 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800336a:	e042      	b.n	80033f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	d122      	bne.n	80033ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2200      	movs	r2, #0
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8f2 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e042      	b.n	8003424 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3302      	adds	r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	e017      	b.n	80033f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	e013      	b.n	80033f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8cf 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e01f      	b.n	8003424 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	60ba      	str	r2, [r7, #8]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1b7      	bne.n	800336c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8b6 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e006      	b.n	8003424 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	f040 8090 	bne.w	800356e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_Receive+0x2e>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e088      	b.n	8003570 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_UART_Receive+0x40>
 8003468:	2302      	movs	r3, #2
 800346a:	e081      	b.n	8003570 <HAL_UART_Receive+0x144>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2222      	movs	r2, #34	; 0x22
 800347e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003482:	f7fd fa97 	bl	80009b4 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800349c:	e05c      	b.n	8003558 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d12b      	bne.n	800350e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2120      	movs	r1, #32
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f859 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e04f      	b.n	8003570 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10c      	bne.n	80034f6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3302      	adds	r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	e030      	b.n	8003558 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b29a      	uxth	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	e024      	b.n	8003558 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2120      	movs	r1, #32
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f82d 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e023      	b.n	8003570 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	60ba      	str	r2, [r7, #8]
 800353c:	b2ca      	uxtb	r2, r1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e00a      	b.n	8003558 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d19d      	bne.n	800349e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e000      	b.n	8003570 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003588:	e02c      	b.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d028      	beq.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003598:	f7fd fa0c 	bl	80009b4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d21d      	bcs.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e00f      	b.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4013      	ands	r3, r2
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d0c3      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	b0bd      	sub	sp, #244	; 0xf4
 8003612:	af00      	add	r7, sp, #0
 8003614:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003628:	68d9      	ldr	r1, [r3, #12]
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	ea40 0301 	orr.w	r3, r0, r1
 8003634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	431a      	orrs	r2, r3
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003664:	f021 010c 	bic.w	r1, r1, #12
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003672:	430b      	orrs	r3, r1
 8003674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	6999      	ldr	r1, [r3, #24]
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	ea40 0301 	orr.w	r3, r0, r1
 8003692:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369e:	f040 81a5 	bne.w	80039ec <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4bcd      	ldr	r3, [pc, #820]	; (80039e0 <UART_SetConfig+0x3d4>)
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d006      	beq.n	80036bc <UART_SetConfig+0xb0>
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4bcb      	ldr	r3, [pc, #812]	; (80039e4 <UART_SetConfig+0x3d8>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f040 80cb 	bne.w	8003852 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7ff fdbc 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 80036c0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036c8:	461c      	mov	r4, r3
 80036ca:	f04f 0500 	mov.w	r5, #0
 80036ce:	4622      	mov	r2, r4
 80036d0:	462b      	mov	r3, r5
 80036d2:	1891      	adds	r1, r2, r2
 80036d4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80036d8:	415b      	adcs	r3, r3
 80036da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80036de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036e2:	1912      	adds	r2, r2, r4
 80036e4:	eb45 0303 	adc.w	r3, r5, r3
 80036e8:	f04f 0000 	mov.w	r0, #0
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	00d9      	lsls	r1, r3, #3
 80036f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f6:	00d0      	lsls	r0, r2, #3
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	1911      	adds	r1, r2, r4
 80036fe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003702:	416b      	adcs	r3, r5
 8003704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	1891      	adds	r1, r2, r2
 8003716:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800371a:	415b      	adcs	r3, r3
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003720:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003724:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003728:	f7fc fd60 	bl	80001ec <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4bad      	ldr	r3, [pc, #692]	; (80039e8 <UART_SetConfig+0x3dc>)
 8003732:	fba3 2302 	umull	r2, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	011e      	lsls	r6, r3, #4
 800373a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800373e:	461c      	mov	r4, r3
 8003740:	f04f 0500 	mov.w	r5, #0
 8003744:	4622      	mov	r2, r4
 8003746:	462b      	mov	r3, r5
 8003748:	1891      	adds	r1, r2, r2
 800374a:	67b9      	str	r1, [r7, #120]	; 0x78
 800374c:	415b      	adcs	r3, r3
 800374e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003750:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003754:	1912      	adds	r2, r2, r4
 8003756:	eb45 0303 	adc.w	r3, r5, r3
 800375a:	f04f 0000 	mov.w	r0, #0
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	00d9      	lsls	r1, r3, #3
 8003764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003768:	00d0      	lsls	r0, r2, #3
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	1911      	adds	r1, r2, r4
 8003770:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003774:	416b      	adcs	r3, r5
 8003776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	461a      	mov	r2, r3
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	1891      	adds	r1, r2, r2
 8003788:	6739      	str	r1, [r7, #112]	; 0x70
 800378a:	415b      	adcs	r3, r3
 800378c:	677b      	str	r3, [r7, #116]	; 0x74
 800378e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003792:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003796:	f7fc fd29 	bl	80001ec <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <UART_SetConfig+0x3dc>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a8d      	ldr	r2, [pc, #564]	; (80039e8 <UART_SetConfig+0x3dc>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c0:	441e      	add	r6, r3
 80037c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	1894      	adds	r4, r2, r2
 80037d2:	66bc      	str	r4, [r7, #104]	; 0x68
 80037d4:	415b      	adcs	r3, r3
 80037d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80037dc:	1812      	adds	r2, r2, r0
 80037de:	eb41 0303 	adc.w	r3, r1, r3
 80037e2:	f04f 0400 	mov.w	r4, #0
 80037e6:	f04f 0500 	mov.w	r5, #0
 80037ea:	00dd      	lsls	r5, r3, #3
 80037ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037f0:	00d4      	lsls	r4, r2, #3
 80037f2:	4622      	mov	r2, r4
 80037f4:	462b      	mov	r3, r5
 80037f6:	1814      	adds	r4, r2, r0
 80037f8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80037fc:	414b      	adcs	r3, r1
 80037fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	461a      	mov	r2, r3
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	1891      	adds	r1, r2, r2
 8003810:	6639      	str	r1, [r7, #96]	; 0x60
 8003812:	415b      	adcs	r3, r3
 8003814:	667b      	str	r3, [r7, #100]	; 0x64
 8003816:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800381a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800381e:	f7fc fce5 	bl	80001ec <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <UART_SetConfig+0x3dc>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <UART_SetConfig+0x3dc>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 0207 	and.w	r2, r3, #7
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4432      	add	r2, r6
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	e26d      	b.n	8003d2e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003852:	f7ff fcdd 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8003856:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800385a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800385e:	461c      	mov	r4, r3
 8003860:	f04f 0500 	mov.w	r5, #0
 8003864:	4622      	mov	r2, r4
 8003866:	462b      	mov	r3, r5
 8003868:	1891      	adds	r1, r2, r2
 800386a:	65b9      	str	r1, [r7, #88]	; 0x58
 800386c:	415b      	adcs	r3, r3
 800386e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003874:	1912      	adds	r2, r2, r4
 8003876:	eb45 0303 	adc.w	r3, r5, r3
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	00d9      	lsls	r1, r3, #3
 8003884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003888:	00d0      	lsls	r0, r2, #3
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	1911      	adds	r1, r2, r4
 8003890:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003894:	416b      	adcs	r3, r5
 8003896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	1891      	adds	r1, r2, r2
 80038a8:	6539      	str	r1, [r7, #80]	; 0x50
 80038aa:	415b      	adcs	r3, r3
 80038ac:	657b      	str	r3, [r7, #84]	; 0x54
 80038ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038b2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80038b6:	f7fc fc99 	bl	80001ec <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <UART_SetConfig+0x3dc>)
 80038c0:	fba3 2302 	umull	r2, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	011e      	lsls	r6, r3, #4
 80038c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038cc:	461c      	mov	r4, r3
 80038ce:	f04f 0500 	mov.w	r5, #0
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	1891      	adds	r1, r2, r2
 80038d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80038da:	415b      	adcs	r3, r3
 80038dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e2:	1912      	adds	r2, r2, r4
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	00d9      	lsls	r1, r3, #3
 80038f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038f6:	00d0      	lsls	r0, r2, #3
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	1911      	adds	r1, r2, r4
 80038fe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003902:	416b      	adcs	r3, r5
 8003904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	1891      	adds	r1, r2, r2
 8003916:	6439      	str	r1, [r7, #64]	; 0x40
 8003918:	415b      	adcs	r3, r3
 800391a:	647b      	str	r3, [r7, #68]	; 0x44
 800391c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003920:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003924:	f7fc fc62 	bl	80001ec <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <UART_SetConfig+0x3dc>)
 800392e:	fba3 1302 	umull	r1, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2164      	movs	r1, #100	; 0x64
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	3332      	adds	r3, #50	; 0x32
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <UART_SetConfig+0x3dc>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800394e:	441e      	add	r6, r3
 8003950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003954:	4618      	mov	r0, r3
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	1894      	adds	r4, r2, r2
 8003960:	63bc      	str	r4, [r7, #56]	; 0x38
 8003962:	415b      	adcs	r3, r3
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800396a:	1812      	adds	r2, r2, r0
 800396c:	eb41 0303 	adc.w	r3, r1, r3
 8003970:	f04f 0400 	mov.w	r4, #0
 8003974:	f04f 0500 	mov.w	r5, #0
 8003978:	00dd      	lsls	r5, r3, #3
 800397a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800397e:	00d4      	lsls	r4, r2, #3
 8003980:	4622      	mov	r2, r4
 8003982:	462b      	mov	r3, r5
 8003984:	1814      	adds	r4, r2, r0
 8003986:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800398a:	414b      	adcs	r3, r1
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	461a      	mov	r2, r3
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	1891      	adds	r1, r2, r2
 800399e:	6339      	str	r1, [r7, #48]	; 0x30
 80039a0:	415b      	adcs	r3, r3
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
 80039a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ac:	f7fc fc1e 	bl	80001ec <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <UART_SetConfig+0x3dc>)
 80039b6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2164      	movs	r1, #100	; 0x64
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	3332      	adds	r3, #50	; 0x32
 80039c8:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <UART_SetConfig+0x3dc>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	f003 0207 	and.w	r2, r3, #7
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4432      	add	r2, r6
 80039dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039de:	e1a6      	b.n	8003d2e <UART_SetConfig+0x722>
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4bd1      	ldr	r3, [pc, #836]	; (8003d38 <UART_SetConfig+0x72c>)
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d006      	beq.n	8003a06 <UART_SetConfig+0x3fa>
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4bcf      	ldr	r3, [pc, #828]	; (8003d3c <UART_SetConfig+0x730>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 80ca 	bne.w	8003b9a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a06:	f7ff fc17 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8003a0a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a12:	461c      	mov	r4, r3
 8003a14:	f04f 0500 	mov.w	r5, #0
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a20:	415b      	adcs	r3, r3
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a28:	1912      	adds	r2, r2, r4
 8003a2a:	eb45 0303 	adc.w	r3, r5, r3
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	00d9      	lsls	r1, r3, #3
 8003a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a3c:	00d0      	lsls	r0, r2, #3
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	eb12 0a04 	adds.w	sl, r2, r4
 8003a46:	eb43 0b05 	adc.w	fp, r3, r5
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a64:	0082      	lsls	r2, r0, #2
 8003a66:	4650      	mov	r0, sl
 8003a68:	4659      	mov	r1, fp
 8003a6a:	f7fc fbbf 	bl	80001ec <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4bb3      	ldr	r3, [pc, #716]	; (8003d40 <UART_SetConfig+0x734>)
 8003a74:	fba3 2302 	umull	r2, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	011e      	lsls	r6, r3, #4
 8003a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a80:	4618      	mov	r0, r3
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	1894      	adds	r4, r2, r2
 8003a8c:	623c      	str	r4, [r7, #32]
 8003a8e:	415b      	adcs	r3, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	1812      	adds	r2, r2, r0
 8003a98:	eb41 0303 	adc.w	r3, r1, r3
 8003a9c:	f04f 0400 	mov.w	r4, #0
 8003aa0:	f04f 0500 	mov.w	r5, #0
 8003aa4:	00dd      	lsls	r5, r3, #3
 8003aa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003aaa:	00d4      	lsls	r4, r2, #3
 8003aac:	4622      	mov	r2, r4
 8003aae:	462b      	mov	r3, r5
 8003ab0:	1814      	adds	r4, r2, r0
 8003ab2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003ab6:	414b      	adcs	r3, r1
 8003ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	008b      	lsls	r3, r1, #2
 8003ad2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ad6:	0082      	lsls	r2, r0, #2
 8003ad8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003adc:	f7fc fb86 	bl	80001ec <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b96      	ldr	r3, [pc, #600]	; (8003d40 <UART_SetConfig+0x734>)
 8003ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2164      	movs	r1, #100	; 0x64
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a91      	ldr	r2, [pc, #580]	; (8003d40 <UART_SetConfig+0x734>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	441e      	add	r6, r3
 8003b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	1894      	adds	r4, r2, r2
 8003b16:	61bc      	str	r4, [r7, #24]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	1812      	adds	r2, r2, r0
 8003b22:	eb41 0303 	adc.w	r3, r1, r3
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	f04f 0500 	mov.w	r5, #0
 8003b2e:	00dd      	lsls	r5, r3, #3
 8003b30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b34:	00d4      	lsls	r4, r2, #3
 8003b36:	4622      	mov	r2, r4
 8003b38:	462b      	mov	r3, r5
 8003b3a:	1814      	adds	r4, r2, r0
 8003b3c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003b40:	414b      	adcs	r3, r1
 8003b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	008b      	lsls	r3, r1, #2
 8003b5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b60:	0082      	lsls	r2, r0, #2
 8003b62:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003b66:	f7fc fb41 	bl	80001ec <__aeabi_uldivmod>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4b74      	ldr	r3, [pc, #464]	; (8003d40 <UART_SetConfig+0x734>)
 8003b70:	fba3 1302 	umull	r1, r3, r3, r2
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	2164      	movs	r1, #100	; 0x64
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	3332      	adds	r3, #50	; 0x32
 8003b82:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <UART_SetConfig+0x734>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4432      	add	r2, r6
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e0c9      	b.n	8003d2e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9a:	f7ff fb39 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8003b9e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ba6:	461c      	mov	r4, r3
 8003ba8:	f04f 0500 	mov.w	r5, #0
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bbc:	1912      	adds	r2, r2, r4
 8003bbe:	eb45 0303 	adc.w	r3, r5, r3
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	00d9      	lsls	r1, r3, #3
 8003bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd0:	00d0      	lsls	r0, r2, #3
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	eb12 0804 	adds.w	r8, r2, r4
 8003bda:	eb43 0905 	adc.w	r9, r3, r5
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bf8:	0082      	lsls	r2, r0, #2
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	f7fc faf5 	bl	80001ec <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <UART_SetConfig+0x734>)
 8003c08:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	011e      	lsls	r6, r3, #4
 8003c10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c14:	4618      	mov	r0, r3
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	1894      	adds	r4, r2, r2
 8003c20:	60bc      	str	r4, [r7, #8]
 8003c22:	415b      	adcs	r3, r3
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c2a:	1812      	adds	r2, r2, r0
 8003c2c:	eb41 0303 	adc.w	r3, r1, r3
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	f04f 0500 	mov.w	r5, #0
 8003c38:	00dd      	lsls	r5, r3, #3
 8003c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c3e:	00d4      	lsls	r4, r2, #3
 8003c40:	4622      	mov	r2, r4
 8003c42:	462b      	mov	r3, r5
 8003c44:	1814      	adds	r4, r2, r0
 8003c46:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c4a:	414b      	adcs	r3, r1
 8003c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	008b      	lsls	r3, r1, #2
 8003c66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c6a:	0082      	lsls	r2, r0, #2
 8003c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c70:	f7fc fabc 	bl	80001ec <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <UART_SetConfig+0x734>)
 8003c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2164      	movs	r1, #100	; 0x64
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <UART_SetConfig+0x734>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	441e      	add	r6, r3
 8003c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f04f 0100 	mov.w	r1, #0
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	1894      	adds	r4, r2, r2
 8003caa:	603c      	str	r4, [r7, #0]
 8003cac:	415b      	adcs	r3, r3
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cb4:	1812      	adds	r2, r2, r0
 8003cb6:	eb41 0303 	adc.w	r3, r1, r3
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	f04f 0500 	mov.w	r5, #0
 8003cc2:	00dd      	lsls	r5, r3, #3
 8003cc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cc8:	00d4      	lsls	r4, r2, #3
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	1814      	adds	r4, r2, r0
 8003cd0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf4:	0082      	lsls	r2, r0, #2
 8003cf6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003cfa:	f7fc fa77 	bl	80001ec <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <UART_SetConfig+0x734>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <UART_SetConfig+0x734>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4432      	add	r2, r6
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	e7ff      	b.n	8003d2e <UART_SetConfig+0x722>
 8003d2e:	bf00      	nop
 8003d30:	37f4      	adds	r7, #244	; 0xf4
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	51eb851f 	.word	0x51eb851f

08003d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d44:	b084      	sub	sp, #16
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	f107 001c 	add.w	r0, r7, #28
 8003d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d122      	bne.n	8003da2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f94a 	bl	8004030 <USB_CoreReset>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e01a      	b.n	8003dd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f93e 	bl	8004030 <USB_CoreReset>
 8003db4:	4603      	mov	r3, r0
 8003db6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dca:	e005      	b.n	8003dd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10b      	bne.n	8003df6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f043 0206 	orr.w	r2, r3, #6
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e02:	b004      	add	sp, #16
 8003e04:	4770      	bx	lr

08003e06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e00b      	b.n	8003e8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e001      	b.n	8003e8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e003      	b.n	8003e96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e8e:	2032      	movs	r0, #50	; 0x32
 8003e90:	f7fc fd9c 	bl	80009cc <HAL_Delay>

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <USB_FlushTxFifo+0x48>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e006      	b.n	8003eda <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d0f0      	beq.n	8003eba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	00030d40 	.word	0x00030d40

08003eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2210      	movs	r2, #16
 8003efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <USB_FlushRxFifo+0x40>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e006      	b.n	8003f1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d0f0      	beq.n	8003efe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	00030d40 	.word	0x00030d40

08003f30 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	460b      	mov	r3, r1
 8003f40:	71fb      	strb	r3, [r7, #7]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11a      	bne.n	8003f8c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	3303      	adds	r3, #3
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e00f      	b.n	8003f84 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	031a      	lsls	r2, r3, #12
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	461a      	mov	r2, r3
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3eb      	bcc.n	8003f64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3724      	adds	r7, #36	; 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b089      	sub	sp, #36	; 0x24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	3303      	adds	r3, #3
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	e00b      	b.n	8003fd6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d3ef      	bcc.n	8003fbe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003fde:	69fb      	ldr	r3, [r7, #28]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3724      	adds	r7, #36	; 0x24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4013      	ands	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0301 	and.w	r3, r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <USB_CoreReset+0x64>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e01b      	b.n	8004086 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	daf2      	bge.n	800403c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <USB_CoreReset+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d0f0      	beq.n	8004066 <USB_CoreReset+0x36>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	00030d40 	.word	0x00030d40

08004098 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004098:	b084      	sub	sp, #16
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	f107 001c 	add.w	r0, r7, #28
 80040a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10a      	bne.n	8004106 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e014      	b.n	8004130 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e009      	b.n	8004130 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004130:	2110      	movs	r1, #16
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff feb4 	bl	8003ea0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fed7 	bl	8003eec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e015      	b.n	8004170 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d3e5      	bcc.n	8004144 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004178:	2101      	movs	r1, #1
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8ac 	bl	80042d8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004180:	20c8      	movs	r0, #200	; 0xc8
 8004182:	f7fc fc23 	bl	80009cc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <USB_HostInit+0x164>)
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <USB_HostInit+0x168>)
 80041b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80041b6:	e009      	b.n	80041cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <USB_HostInit+0x16c>)
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <USB_HostInit+0x170>)
 80041c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <USB_HostInit+0x174>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f6:	b004      	add	sp, #16
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	01000200 	.word	0x01000200
 8004200:	00e00300 	.word	0x00e00300
 8004204:	00600080 	.word	0x00600080
 8004208:	004000e0 	.word	0x004000e0
 800420c:	a3200008 	.word	0xa3200008

08004210 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004258:	461a      	mov	r2, r3
 800425a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800425e:	6053      	str	r3, [r2, #4]
 8004260:	e009      	b.n	8004276 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d106      	bne.n	8004276 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426e:	461a      	mov	r2, r3
 8004270:	f241 7370 	movw	r3, #6000	; 0x1770
 8004274:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	f7fc fb89 	bl	80009cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80042c8:	200a      	movs	r0, #10
 80042ca:	f7fc fb7f 	bl	80009cc <HAL_Delay>

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <USB_DriveVbus+0x44>
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800431a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004326:	d109      	bne.n	800433c <USB_DriveVbus+0x64>
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800433a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	0c5b      	lsrs	r3, r3, #17
 8004368:	f003 0303 	and.w	r3, r3, #3
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	b29b      	uxth	r3, r3
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	70fb      	strb	r3, [r7, #3]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70bb      	strb	r3, [r7, #2]
 80043b2:	4613      	mov	r3, r2
 80043b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	461a      	mov	r2, r3
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295
 80043d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80043d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d87e      	bhi.n	80044d8 <USB_HC_Init+0x13c>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <USB_HC_Init+0x44>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	0800449b 	.word	0x0800449b
 80043e8:	080043f1 	.word	0x080043f1
 80043ec:	0800445d 	.word	0x0800445d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8004402:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004408:	2b00      	cmp	r3, #0
 800440a:	da10      	bge.n	800442e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	0151      	lsls	r1, r2, #5
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	440a      	add	r2, r1
 8004422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800442c:	e057      	b.n	80044de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d051      	beq.n	80044de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	440a      	add	r2, r1
 8004450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004454:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004458:	60d3      	str	r3, [r2, #12]
      break;
 800445a:	e040      	b.n	80044de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	461a      	mov	r2, r3
 800446a:	f240 639d 	movw	r3, #1693	; 0x69d
 800446e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da34      	bge.n	80044e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	440a      	add	r2, r1
 800448e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004498:	e023      	b.n	80044e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	461a      	mov	r2, r3
 80044a8:	f240 2325 	movw	r3, #549	; 0x225
 80044ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80044ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da17      	bge.n	80044e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80044d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80044d6:	e006      	b.n	80044e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	75fb      	strb	r3, [r7, #23]
      break;
 80044dc:	e004      	b.n	80044e8 <USB_HC_Init+0x14c>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <USB_HC_Init+0x14c>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <USB_HC_Init+0x14c>
      break;
 80044e6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	2101      	movs	r1, #1
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004502:	4313      	orrs	r3, r2
 8004504:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004512:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da03      	bge.n	8004522 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e001      	b.n	8004526 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d103      	bne.n	8004536 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800452e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e001      	b.n	800453a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800453a:	787b      	ldrb	r3, [r7, #1]
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004542:	78bb      	ldrb	r3, [r7, #2]
 8004544:	02db      	lsls	r3, r3, #11
 8004546:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800454a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800454c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004550:	049b      	lsls	r3, r3, #18
 8004552:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004556:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800455a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800455e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	440b      	add	r3, r1
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004576:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800457c:	2b03      	cmp	r3, #3
 800457e:	d10f      	bne.n	80045a0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	440a      	add	r2, r1
 8004596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800459e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop

080045b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08c      	sub	sp, #48	; 0x30
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80045c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d028      	beq.n	800462c <USB_HC_StartXfer+0x7c>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	791b      	ldrb	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d124      	bne.n	800462c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <USB_HC_StartXfer+0x50>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	795b      	ldrb	r3, [r3, #5]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	4619      	mov	r1, r3
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fa2c 	bl	8004a54 <USB_DoPing>
      return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e111      	b.n	8004824 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d112      	bne.n	800462c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	440a      	add	r2, r1
 800461c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004620:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004624:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2200      	movs	r2, #0
 800462a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d018      	beq.n	8004666 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	8912      	ldrh	r2, [r2, #8]
 800463c:	4413      	add	r3, r2
 800463e:	3b01      	subs	r3, #1
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	8912      	ldrh	r2, [r2, #8]
 8004644:	fbb3 f3f2 	udiv	r3, r3, r2
 8004648:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800464a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800464c:	8b7b      	ldrh	r3, [r7, #26]
 800464e:	429a      	cmp	r2, r3
 8004650:	d90b      	bls.n	800466a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004652:	8b7b      	ldrh	r3, [r7, #26]
 8004654:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	8912      	ldrh	r2, [r2, #8]
 800465c:	fb02 f203 	mul.w	r2, r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	611a      	str	r2, [r3, #16]
 8004664:	e001      	b.n	800466a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004666:	2301      	movs	r3, #1
 8004668:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	78db      	ldrb	r3, [r3, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	8912      	ldrh	r2, [r2, #8]
 8004678:	fb02 f203 	mul.w	r2, r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004688:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800468a:	04d9      	lsls	r1, r3, #19
 800468c:	4b67      	ldr	r3, [pc, #412]	; (800482c <USB_HC_StartXfer+0x27c>)
 800468e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004690:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	7a9b      	ldrb	r3, [r3, #10]
 8004696:	075b      	lsls	r3, r3, #29
 8004698:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	0148      	lsls	r0, r1, #5
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	4401      	add	r1, r0
 80046a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	68d9      	ldr	r1, [r3, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	460a      	mov	r2, r1
 80046c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	7e7b      	ldrb	r3, [r7, #25]
 800470e:	075b      	lsls	r3, r3, #29
 8004710:	69f9      	ldr	r1, [r7, #28]
 8004712:	0148      	lsls	r0, r1, #5
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	4401      	add	r1, r0
 8004718:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004730:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <USB_HC_StartXfer+0x280>)
 800473c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	78db      	ldrb	r3, [r3, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d006      	beq.n	8004754 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004746:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474e:	4a38      	ldr	r2, [pc, #224]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e005      	b.n	8004760 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800475c:	4a34      	ldr	r2, [pc, #208]	; (8004830 <USB_HC_StartXfer+0x280>)
 800475e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004760:	4b33      	ldr	r3, [pc, #204]	; (8004830 <USB_HC_StartXfer+0x280>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004768:	4a31      	ldr	r2, [pc, #196]	; (8004830 <USB_HC_StartXfer+0x280>)
 800476a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	461a      	mov	r2, r3
 800477a:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <USB_HC_StartXfer+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d14d      	bne.n	8004822 <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	78db      	ldrb	r3, [r3, #3]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d149      	bne.n	8004822 <USB_HC_StartXfer+0x272>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d045      	beq.n	8004822 <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	79db      	ldrb	r3, [r3, #7]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d830      	bhi.n	8004800 <USB_HC_StartXfer+0x250>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <USB_HC_StartXfer+0x1f4>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047b5 	.word	0x080047b5
 80047b0:	080047d9 	.word	0x080047d9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	3303      	adds	r3, #3
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80047be:	8afa      	ldrh	r2, [r7, #22]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d91c      	bls.n	8004804 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	619a      	str	r2, [r3, #24]
          }
          break;
 80047d6:	e015      	b.n	8004804 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	3303      	adds	r3, #3
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80047e2:	8afa      	ldrh	r2, [r7, #22]
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d90a      	bls.n	8004808 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	619a      	str	r2, [r3, #24]
          }
          break;
 80047fe:	e003      	b.n	8004808 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <USB_HC_StartXfer+0x25a>
          break;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <USB_HC_StartXfer+0x25a>
          break;
 8004808:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	68d9      	ldr	r1, [r3, #12]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	785a      	ldrb	r2, [r3, #1]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	b29b      	uxth	r3, r3
 8004818:	2000      	movs	r0, #0
 800481a:	9000      	str	r0, [sp, #0]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fb87 	bl	8003f30 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3728      	adds	r7, #40	; 0x28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	1ff80000 	.word	0x1ff80000
 8004830:	200000b0 	.word	0x200000b0

08004834 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	b29b      	uxth	r3, r3
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <USB_HC_Halt+0x3a>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d16c      	bne.n	800496a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d143      	bne.n	8004944 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	440a      	add	r2, r1
 8004912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800491a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3301      	adds	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004928:	d81d      	bhi.n	8004966 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004940:	d0ec      	beq.n	800491c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004942:	e080      	b.n	8004a46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	440a      	add	r2, r1
 800495a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004962:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004964:	e06f      	b.n	8004a46 <USB_HC_Halt+0x1f0>
          break;
 8004966:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004968:	e06d      	b.n	8004a46 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	440a      	add	r2, r1
 8004980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004988:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d143      	bne.n	8004a22 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049f8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3301      	adds	r3, #1
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a06:	d81d      	bhi.n	8004a44 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a1e:	d0ec      	beq.n	80049fa <USB_HC_Halt+0x1a4>
 8004a20:	e011      	b.n	8004a46 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e000      	b.n	8004a46 <USB_HC_Halt+0x1f0>
          break;
 8004a44:	bf00      	nop
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	04da      	lsls	r2, r3, #19
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <USB_DoPing+0x74>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	1ff80000 	.word	0x1ff80000

08004acc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff f9a3 	bl	8003e28 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ae2:	2110      	movs	r1, #16
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff f9db 	bl	8003ea0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff f9fe 	bl	8003eec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	e01f      	b.n	8004b36 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3301      	adds	r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d9dc      	bls.n	8004af6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e034      	b.n	8004bac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b88:	d80c      	bhi.n	8004ba4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ba0:	d0ec      	beq.n	8004b7c <USB_StopHost+0xb0>
 8004ba2:	e000      	b.n	8004ba6 <USB_StopHost+0xda>
        break;
 8004ba4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d9c7      	bls.n	8004b42 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff f91c 	bl	8003e06 <USB_EnableGlobalInt>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	709a      	strb	r2, [r3, #2]
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c2a:	789a      	ldrb	r2, [r3, #2]
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c2e:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8004c30:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	711a      	strb	r2, [r3, #4]
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c38:	791a      	ldrb	r2, [r3, #4]
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c3c:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	719a      	strb	r2, [r3, #6]
 8004c44:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c46:	799a      	ldrb	r2, [r3, #6]
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c4a:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	721a      	strb	r2, [r3, #8]
 8004c52:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c54:	7a1a      	ldrb	r2, [r3, #8]
 8004c56:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <USBH_HID_KeybdInit+0xa4>)
 8004c58:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e00c      	b.n	8004c7a <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8004c60:	4a15      	ldr	r2, [pc, #84]	; (8004cb8 <USBH_HID_KeybdInit+0xa8>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2100      	movs	r1, #0
 8004c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8004c6a:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <USBH_HID_KeybdInit+0xac>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2100      	movs	r1, #0
 8004c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d9ef      	bls.n	8004c60 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	8b1b      	ldrh	r3, [r3, #24]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d902      	bls.n	8004c8e <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <USBH_HID_KeybdInit+0xac>)
 8004c92:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f103 0008 	add.w	r0, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004ca0:	2250      	movs	r2, #80	; 0x50
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	f7ff ff98 	bl	8004bd8 <USBH_HID_FifoInit>

  return USBH_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000118 	.word	0x20000118
 8004cb8:	20000108 	.word	0x20000108
 8004cbc:	20000110 	.word	0x20000110

08004cc0 <USBH_PRT_InterfaceInit>:
  USBH_PRT_Process,
  USBH_PRT_SOFProcess,
  NULL,
};

static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af04      	add	r7, sp, #16
 8004cc6:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004cce:	2020      	movs	r0, #32
 8004cd0:	f002 fc42 	bl	8007558 <malloc>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f002 fc46 	bl	8007578 <memset>

	PRT_Handle->num = 0;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	709a      	strb	r2, [r3, #2]
	PRT_Handle->Budrate = Bud_9600;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004cf8:	61da      	str	r2, [r3, #28]
	PRT_Handle->poll = 10;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	220a      	movs	r2, #10
 8004cfe:	729a      	strb	r2, [r3, #10]
	PRT_Handle->vID = phost->device.DevDesc.idVendor;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 232e 	ldrh.w	r2, [r3, #814]	; 0x32e
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	831a      	strh	r2, [r3, #24]
	PRT_Handle->pID = phost->device.DevDesc.idProduct;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 2330 	ldrh.w	r2, [r3, #816]	; 0x330
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	835a      	strh	r2, [r3, #26]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d1a:	7919      	ldrb	r1, [r3, #4]
 8004d1c:	23ff      	movs	r3, #255	; 0xff
 8004d1e:	2201      	movs	r2, #1
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 febd 	bl	8005aa0 <USBH_FindInterface>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	4619      	mov	r1, r3
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	231a      	movs	r3, #26
 8004d38:	fb03 f301 	mul.w	r3, r3, r1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	231a      	movs	r3, #26
 8004d52:	fb03 f301 	mul.w	r3, r3, r1
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	4619      	mov	r1, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	231a      	movs	r3, #26
 8004d6c:	fb03 f301 	mul.w	r3, r3, r1
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	799b      	ldrb	r3, [r3, #6]
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f002 f86b 	bl	8006e5e <USBH_AllocPipe>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	785b      	ldrb	r3, [r3, #1]
 8004d94:	4619      	mov	r1, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	231a      	movs	r3, #26
 8004d9a:	fb03 f301 	mul.w	r3, r3, r1
 8004d9e:	4413      	add	r3, r2
 8004da0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	795b      	ldrb	r3, [r3, #5]
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f002 f854 	bl	8006e5e <USBH_AllocPipe>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004dc4:	791b      	ldrb	r3, [r3, #4]
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	d107      	bne.n	8004dda <USBH_PRT_InterfaceInit+0x11a>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 500);
 8004dca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004dce:	2210      	movs	r2, #16
 8004dd0:	4932      	ldr	r1, [pc, #200]	; (8004e9c <USBH_PRT_InterfaceInit+0x1dc>)
 8004dd2:	4833      	ldr	r0, [pc, #204]	; (8004ea0 <USBH_PRT_InterfaceInit+0x1e0>)
 8004dd4:	f7fe fa91 	bl	80032fa <HAL_UART_Transmit>
 8004dd8:	e006      	b.n	8004de8 <USBH_PRT_InterfaceInit+0x128>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 500);
 8004dda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004dde:	2214      	movs	r2, #20
 8004de0:	4930      	ldr	r1, [pc, #192]	; (8004ea4 <USBH_PRT_InterfaceInit+0x1e4>)
 8004de2:	482f      	ldr	r0, [pc, #188]	; (8004ea0 <USBH_PRT_InterfaceInit+0x1e0>)
 8004de4:	f7fe fa89 	bl	80032fa <HAL_UART_Transmit>
   }

	//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e04d      	b.n	8004e8a <USBH_PRT_InterfaceInit+0x1ca>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	4618      	mov	r0, r3
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	00d9      	lsls	r1, r3, #3
 8004dfc:	231a      	movs	r3, #26
 8004dfe:	fb03 f300 	mul.w	r3, r3, r0
 8004e02:	440b      	add	r3, r1
 8004e04:	4413      	add	r3, r2
 8004e06:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da1c      	bge.n	8004e4c <USBH_PRT_InterfaceInit+0x18c>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	7919      	ldrb	r1, [r3, #4]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	7998      	ldrb	r0, [r3, #6]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	8912      	ldrh	r2, [r2, #8]
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4623      	mov	r3, r4
 8004e34:	4602      	mov	r2, r0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 ffe2 	bl	8006e00 <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	791b      	ldrb	r3, [r3, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 faf3 	bl	8007430 <USBH_LL_SetToggle>
 8004e4a:	e01b      	b.n	8004e84 <USBH_PRT_InterfaceInit+0x1c4>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	78d9      	ldrb	r1, [r3, #3]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	7958      	ldrb	r0, [r3, #5]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	8912      	ldrh	r2, [r2, #8]
 8004e64:	9202      	str	r2, [sp, #8]
 8004e66:	2202      	movs	r2, #2
 8004e68:	9201      	str	r2, [sp, #4]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	4602      	mov	r2, r0
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 ffc5 	bl	8006e00 <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	78db      	ldrb	r3, [r3, #3]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f002 fad6 	bl	8007430 <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	ddae      	ble.n	8004dee <USBH_PRT_InterfaceInit+0x12e>

		  }
     }

return USBH_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08007780 	.word	0x08007780
 8004ea0:	200000c4 	.word	0x200000c4
 8004ea4:	08007794 	.word	0x08007794

08004ea8 <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 ffb8 	bl	8006e3e <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	791b      	ldrb	r3, [r3, #4]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f001 ffe3 	bl	8006ea0 <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	78db      	ldrb	r3, [r3, #3]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	78db      	ldrb	r3, [r3, #3]
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 ffa5 	bl	8006e3e <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 ffd0 	bl	8006ea0 <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fb24 	bl	8007568 <free>
	    phost->pActiveClass->pData = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
	  }

return USBH_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b0a8      	sub	sp, #160	; 0xa0
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	2296      	movs	r2, #150	; 0x96
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 fb17 	bl	8007578 <memset>


	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 8004f4a:	bf00      	nop
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	2296      	movs	r2, #150	; 0x96
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f960 	bl	800521a <USBH_PRT_Get_Device_Id>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f5      	bne.n	8004f4c <USBH_PRT_ClassRequest+0x18>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
 8004f60:	f107 0108 	add.w	r1, r7, #8
 8004f64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004f68:	2264      	movs	r2, #100	; 0x64
 8004f6a:	4807      	ldr	r0, [pc, #28]	; (8004f88 <USBH_PRT_ClassRequest+0x54>)
 8004f6c:	f7fe f9c5 	bl	80032fa <HAL_UART_Transmit>
	memset(buff,0,150);
 8004f70:	f107 0308 	add.w	r3, r7, #8
 8004f74:	2296      	movs	r2, #150	; 0x96
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f002 fafd 	bl	8007578 <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
//	memset(buff,0,150);

	return USBH_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	37a0      	adds	r7, #160	; 0xa0
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200000c4 	.word	0x200000c4

08004f8c <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9a:	3b24      	subs	r3, #36	; 0x24
 8004f9c:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004fa4:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8004fa8:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];

	 USBH_StatusTypeDef status = USBH_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004fb0:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8004fb4:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fba:	3b24      	subs	r3, #36	; 0x24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004fc8:	f102 0220 	add.w	r2, r2, #32
 8004fcc:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 8004fce:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8004fd2:	f103 031c 	add.w	r3, r3, #28
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f002 facc 	bl	8007578 <memset>

	 PRT_Handle->poll = 10;
 8004fe0:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004fe4:	f103 0320 	add.w	r3, r3, #32
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	220a      	movs	r2, #10
 8004fec:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state)
 8004fee:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004ff2:	f103 0320 	add.w	r3, r3, #32
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	f200 80df 	bhi.w	80051be <USBH_PRT_Process+0x232>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <USBH_PRT_Process+0x7c>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	08005019 	.word	0x08005019
 800500c:	08005029 	.word	0x08005029
 8005010:	0800505d 	.word	0x0800505d
 8005014:	08005131 	.word	0x08005131
	 {

			case PRT_INIT:
				PRT_Handle->state = PRT_SYNC;
 8005018:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800501c:	f103 0320 	add.w	r3, r3, #32
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
				break;
 8005026:	e0cd      	b.n	80051c4 <USBH_PRT_Process+0x238>

			 case PRT_SYNC:
				  /* Sync with start of Even Frame */
				if (phost->Timer & 1U)
 8005028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800502c:	3b24      	subs	r3, #36	; 0x24
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <USBH_PRT_Process+0xbe>
				 {
					PRT_Handle->state = PRT_GET_DATA;
 800503c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005040:	f103 0320 	add.w	r3, r3, #32
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2202      	movs	r2, #2
 8005048:	701a      	strb	r2, [r3, #0]
				 }
				 PRT_Handle->state = PRT_GET_DATA;
 800504a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800504e:	f103 0320 	add.w	r3, r3, #32
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2202      	movs	r2, #2
 8005056:	701a      	strb	r2, [r3, #0]
				 break;
 8005058:	e0b4      	b.n	80051c4 <USBH_PRT_Process+0x238>

			 case PRT_GET_DATA:
 800505a:	bf00      	nop
				  *
				  */

				 do
				 {
					 memset(buff,0,SIZE_BUFF);
 800505c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005060:	3b1c      	subs	r3, #28
 8005062:	f242 7210 	movw	r2, #10000	; 0x2710
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f002 fa85 	bl	8007578 <memset>
					 HAL_UART_Receive(&huart2, buff, SIZE_BUFF,3000);
 800506e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005072:	391c      	subs	r1, #28
 8005074:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005078:	f242 7210 	movw	r2, #10000	; 0x2710
 800507c:	4855      	ldr	r0, [pc, #340]	; (80051d4 <USBH_PRT_Process+0x248>)
 800507e:	f7fe f9d5 	bl	800342c <HAL_UART_Receive>

				 }while(CommandOperation(PRT_Handle,buff));
 8005082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005086:	3b1c      	subs	r3, #28
 8005088:	4619      	mov	r1, r3
 800508a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800508e:	f103 0320 	add.w	r3, r3, #32
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	f000 f9b6 	bl	8005404 <CommandOperation>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1dd      	bne.n	800505a <USBH_PRT_Process+0xce>
				  *	OR
				  *	make it as external interrupt but in that case  SendDataOnPrinter(phost,PRT_Handle, buff);
				  *	should not work.
				  *
				  */
				 if( printReport() )
 800509e:	f000 fa8f 	bl	80055c0 <printReport>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <USBH_PRT_Process+0x152>
				 {
					 uint8_t *POSreport;
					 POSreport = PRT_Report(buff);
 80050a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ac:	3b1c      	subs	r3, #28
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa8e 	bl	80055d0 <PRT_Report>
 80050b4:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050b8:	f103 031c 	add.w	r3, r3, #28
 80050bc:	6018      	str	r0, [r3, #0]
					 SendDataOnPrinter(phost,PRT_Handle, POSreport);
 80050be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050c2:	3b24      	subs	r3, #36	; 0x24
 80050c4:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80050c8:	f102 021c 	add.w	r2, r2, #28
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 80050d2:	f101 0120 	add.w	r1, r1, #32
 80050d6:	6809      	ldr	r1, [r1, #0]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f000 fb5d 	bl	8005798 <SendDataOnPrinter>
				 }


				 // Send Data on printer After choping into specified length.
				 SendDataOnPrinter(phost,PRT_Handle, buff);
 80050de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050e2:	3a1c      	subs	r2, #28
 80050e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e8:	3b24      	subs	r3, #36	; 0x24
 80050ea:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 80050ee:	f101 0120 	add.w	r1, r1, #32
 80050f2:	6809      	ldr	r1, [r1, #0]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	f000 fb4f 	bl	8005798 <SendDataOnPrinter>

				 PRT_Handle->state = PRT_POLL;
 80050fa:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050fe:	f103 0320 	add.w	r3, r3, #32
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2203      	movs	r2, #3
 8005106:	701a      	strb	r2, [r3, #0]
				 PRT_Handle->timer = phost->Timer;
 8005108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800510c:	3b24      	subs	r3, #36	; 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005114:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005118:	f103 0320 	add.w	r3, r3, #32
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60da      	str	r2, [r3, #12]
				 PRT_Handle->DataReady = 0U;
 8005120:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005124:	f103 0320 	add.w	r3, r3, #32
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2200      	movs	r2, #0
 800512c:	741a      	strb	r2, [r3, #16]
				 break;
 800512e:	e049      	b.n	80051c4 <USBH_PRT_Process+0x238>

			 case PRT_POLL:

				 if(USBH_LL_GetURBState(phost, PRT_Handle->InPipe) == USBH_URB_DONE)
 8005130:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005134:	f103 0320 	add.w	r3, r3, #32
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	791a      	ldrb	r2, [r3, #4]
 800513c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005140:	3b24      	subs	r3, #36	; 0x24
 8005142:	4611      	mov	r1, r2
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f002 f939 	bl	80073bc <USBH_LL_GetURBState>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d138      	bne.n	80051c2 <USBH_PRT_Process+0x236>
				 {

					 status = USBH_LL_GetURBState(phost, PRT_Handle->InPipe);
 8005150:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005154:	f103 0320 	add.w	r3, r3, #32
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	791a      	ldrb	r2, [r3, #4]
 800515c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005160:	3b24      	subs	r3, #36	; 0x24
 8005162:	4611      	mov	r1, r2
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	f002 f929 	bl	80073bc <USBH_LL_GetURBState>
 800516a:	4603      	mov	r3, r0
 800516c:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8005170:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8005174:	7013      	strb	r3, [r2, #0]
					 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->InPipe);
 8005176:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800517a:	f103 0320 	add.w	r3, r3, #32
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	791a      	ldrb	r2, [r3, #4]
 8005182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005186:	3b24      	subs	r3, #36	; 0x24
 8005188:	4611      	mov	r1, r2
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	f002 f884 	bl	8007298 <USBH_LL_GetLastXferSize>
 8005190:	4603      	mov	r3, r0
 8005192:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8005196:	f102 0226 	add.w	r2, r2, #38	; 0x26
 800519a:	8013      	strh	r3, [r2, #0]
					 PRT_Handle->state = PRT_GET_DATA;
 800519c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80051a0:	f103 0320 	add.w	r3, r3, #32
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2202      	movs	r2, #2
 80051a8:	701a      	strb	r2, [r3, #0]
					 USBH_Delay( PRT_Handle->poll);
 80051aa:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80051ae:	f103 0320 	add.w	r3, r3, #32
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	7a9b      	ldrb	r3, [r3, #10]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 f96d 	bl	8007496 <USBH_Delay>
				 }

				 break;
 80051bc:	e001      	b.n	80051c2 <USBH_PRT_Process+0x236>

			 default:
				 break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <USBH_PRT_Process+0x238>
				 break;
 80051c2:	bf00      	nop

	}



	return USBH_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	f507 571d 	add.w	r7, r7, #10048	; 0x2740
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200000c4 	.word	0x200000c4

080051d8 <USBH_PRT_SOFProcess>:

static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d10c      	bne.n	800520c <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	7a92      	ldrb	r2, [r2, #10]
 8005202:	4293      	cmp	r3, r2
 8005204:	d302      	bcc.n	800520c <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USBH_PRT_Get_Device_Id>:


static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	22a1      	movs	r2, #161	; 0xa1
 800522c:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	461a      	mov	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f001 fba4 	bl	800699a <USBH_CtlReq>
 8005252:	4603      	mov	r3, r0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <CheckCMD>:
/* @ checkCMD : Check command
 *
 */


int CheckCMD(const uint8_t *cmd){
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

	if( !strcmp(cmd,"VIDPID") )
 8005264:	4914      	ldr	r1, [pc, #80]	; (80052b8 <CheckCMD+0x5c>)
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fa ffae 	bl	80001c8 <strcmp>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <CheckCMD+0x1a>
	{
		return 1;
 8005272:	2301      	movs	r3, #1
 8005274:	e01b      	b.n	80052ae <CheckCMD+0x52>
	}else if(!strcmp(cmd,"BAUDRATE") )
 8005276:	4911      	ldr	r1, [pc, #68]	; (80052bc <CheckCMD+0x60>)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fa ffa5 	bl	80001c8 <strcmp>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <CheckCMD+0x2c>
	{
		return 2;
 8005284:	2302      	movs	r3, #2
 8005286:	e012      	b.n	80052ae <CheckCMD+0x52>
	}else if(!strcmp(cmd,"CHN_BAUDRATE"))
 8005288:	490d      	ldr	r1, [pc, #52]	; (80052c0 <CheckCMD+0x64>)
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fa ff9c 	bl	80001c8 <strcmp>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <CheckCMD+0x3e>
	{
		return 3;
 8005296:	2303      	movs	r3, #3
 8005298:	e009      	b.n	80052ae <CheckCMD+0x52>
	}
	if( !strcmp(cmd,"PRINTREPORT"))
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <CheckCMD+0x68>)
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fa ff93 	bl	80001c8 <strcmp>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <CheckCMD+0x50>
	{
		return 4;
 80052a8:	2304      	movs	r3, #4
 80052aa:	e000      	b.n	80052ae <CheckCMD+0x52>
	}

	return 0;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	080077ac 	.word	0x080077ac
 80052bc:	080077b4 	.word	0x080077b4
 80052c0:	080077c0 	.word	0x080077c0
 80052c4:	080077d0 	.word	0x080077d0

080052c8 <reverse>:
/* @ reverse : Reverse the String
 * @ temp : string address
 */


void reverse(uint8_t * temp){
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(temp)-1;
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fa ff83 	bl	80001dc <strlen>
 80052d6:	4603      	mov	r3, r0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 80052de:	2300      	movs	r3, #0
 80052e0:	73bb      	strb	r3, [r7, #14]
	uint8_t j=0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	737b      	strb	r3, [r7, #13]
	while(i < len){
 80052e6:	e017      	b.n	8005318 <reverse+0x50>
		j = temp[i];
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	737b      	strb	r3, [r7, #13]
		temp[i++] = temp[len];
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	441a      	add	r2, r3
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	73b9      	strb	r1, [r7, #14]
 80052fe:	4619      	mov	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	440b      	add	r3, r1
 8005304:	7812      	ldrb	r2, [r2, #0]
 8005306:	701a      	strb	r2, [r3, #0]
		temp[len--] = j;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	1e5a      	subs	r2, r3, #1
 800530c:	73fa      	strb	r2, [r7, #15]
 800530e:	461a      	mov	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	7b7a      	ldrb	r2, [r7, #13]
 8005316:	701a      	strb	r2, [r3, #0]
	while(i < len){
 8005318:	7bba      	ldrb	r2, [r7, #14]
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3e3      	bcc.n	80052e8 <reverse+0x20>

		//i++;//
		//len--;//
	}

}//end-reverse
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <I2A>:
/* @ I2A : Change Integer into ASCii
 * @ temp : Destination buffer of String
 * @ num : Integer
 */

void I2A(uint8_t *temp, uint32_t num){
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
	while(num){
 800533a:	e019      	b.n	8005370 <I2A+0x44>
		temp[i++] = num%10+48;
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4b11      	ldr	r3, [pc, #68]	; (8005384 <I2A+0x58>)
 8005340:	fba3 2301 	umull	r2, r3, r3, r1
 8005344:	08da      	lsrs	r2, r3, #3
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	1aca      	subs	r2, r1, r3
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	1c59      	adds	r1, r3, #1
 8005356:	73f9      	strb	r1, [r7, #15]
 8005358:	4619      	mov	r1, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	440b      	add	r3, r1
 800535e:	3230      	adds	r2, #48	; 0x30
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
		num /= 10;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <I2A+0x58>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	603b      	str	r3, [r7, #0]
	while(num){
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e2      	bne.n	800533c <I2A+0x10>
	}

	reverse(temp);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffa6 	bl	80052c8 <reverse>
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	cccccccd 	.word	0xcccccccd

08005388 <A2I>:
 * @ temp   : String buffer
 * @ return : converted Integer
 */

uint32_t A2I(uint8_t *temp)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

	uint32_t num = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

	for(int i=0; i < strlen(temp); i++)
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	e00f      	b.n	80053ba <A2I+0x32>
	{
		num = num*10 + (temp[i]-48);
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4619      	mov	r1, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4413      	add	r3, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	440b      	add	r3, r1
 80053b0:	3b30      	subs	r3, #48	; 0x30
 80053b2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < strlen(temp); i++)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fa ff0e 	bl	80001dc <strlen>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d8e8      	bhi.n	800539a <A2I+0x12>

	}

	return num;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <checkBudrate>:
 * @ temp : source buffer
 * @return : integer value or Baudrate
 */

uint32_t  checkBudrate(uint8_t *temp)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
	return A2I(temp);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ffd4 	bl	8005388 <A2I>
 80053e0:	4603      	mov	r3, r0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <ChangeBaudrate>:
/* @ ChangeBaudrate : It is used to change baudrate at run time.
 * @ Baudrate : This is desired baudrate
 */

static uint8_t ChangeBaudrate( uint32_t Baudrate )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]

	MX_USART2_UART_Init(Baudrate);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb f908 	bl	8000608 <MX_USART2_UART_Init>

	return 1;
 80053f8:	2301      	movs	r3, #1
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <CommandOperation>:
 * @ PRT_Handle : Printer Handler Structure
 * @ return : Use as per requirement
 */

int CommandOperation( PRT_HandleTypeDef *PRT_Handle , uint8_t *buff)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b094      	sub	sp, #80	; 0x50
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	//flag = 0 ; Command Not Found
	//flag = 1 ; Command  Found

	uint8_t temp[64],pktcnt,flag;
	uint16_t XferSize = strlen(buff);
 800540e:	6838      	ldr	r0, [r7, #0]
 8005410:	f7fa fee4 	bl	80001dc <strlen>
 8005414:	4603      	mov	r3, r0
 8005416:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	 pktcnt=flag=0;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005424:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	 memset(temp,0,64);
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	2240      	movs	r2, #64	; 0x40
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f002 f8a1 	bl	8007578 <memset>

	 if( (XferSize == 0))
 8005436:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <CommandOperation+0x3e>
		 return 1;
 800543e:	2301      	movs	r3, #1
 8005440:	e0b2      	b.n	80055a8 <CommandOperation+0x1a4>

	 if( (XferSize > 15) )
 8005442:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d901      	bls.n	800544e <CommandOperation+0x4a>
		 return 0;
 800544a:	2300      	movs	r3, #0
 800544c:	e0ac      	b.n	80055a8 <CommandOperation+0x1a4>

	 pktcnt = CheckCMD(buff);
 800544e:	6838      	ldr	r0, [r7, #0]
 8005450:	f7ff ff04 	bl	800525c <CheckCMD>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	 switch( pktcnt )
 800545a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800545e:	3b01      	subs	r3, #1
 8005460:	2b03      	cmp	r3, #3
 8005462:	f200 8094 	bhi.w	800558e <CommandOperation+0x18a>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <CommandOperation+0x68>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	0800547d 	.word	0x0800547d
 8005470:	080054fd 	.word	0x080054fd
 8005474:	08005531 	.word	0x08005531
 8005478:	08005589 	.word	0x08005589
		 {
		 case VIDPID:// Get Vid, Pid od device
			 I2A(temp,PRT_Handle->vID);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8b1b      	ldrh	r3, [r3, #24]
 8005480:	461a      	mov	r2, r3
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff ff4f 	bl	800532c <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	4618      	mov	r0, r3
 8005494:	f7fa fea2 	bl	80001dc <strlen>
 8005498:	4603      	mov	r3, r0
 800549a:	b29a      	uxth	r2, r3
 800549c:	f107 0108 	add.w	r1, r7, #8
 80054a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054a4:	4842      	ldr	r0, [pc, #264]	; (80055b0 <CommandOperation+0x1ac>)
 80054a6:	f7fd ff28 	bl	80032fa <HAL_UART_Transmit>
			 I2A(temp,PRT_Handle->pID);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8b5b      	ldrh	r3, [r3, #26]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f107 0308 	add.w	r3, r7, #8
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff38 	bl	800532c <I2A>
			 HAL_UART_Transmit(&huart2, ",", strlen(","),1000);
 80054bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054c0:	2201      	movs	r2, #1
 80054c2:	493c      	ldr	r1, [pc, #240]	; (80055b4 <CommandOperation+0x1b0>)
 80054c4:	483a      	ldr	r0, [pc, #232]	; (80055b0 <CommandOperation+0x1ac>)
 80054c6:	f7fd ff18 	bl	80032fa <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, &temp, strlen( temp),1000);
 80054ca:	f107 0308 	add.w	r3, r7, #8
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fa fe84 	bl	80001dc <strlen>
 80054d4:	4603      	mov	r3, r0
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f107 0108 	add.w	r1, r7, #8
 80054dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054e0:	4833      	ldr	r0, [pc, #204]	; (80055b0 <CommandOperation+0x1ac>)
 80054e2:	f7fd ff0a 	bl	80032fa <HAL_UART_Transmit>
			 memset(temp,0,64);
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f002 f842 	bl	8007578 <memset>
			 flag = 1; //flag = 1 ; Command Found
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 80054fa:	e053      	b.n	80055a4 <CommandOperation+0x1a0>

		 case BAUDRATE:// Get current baudrate default 9600
			 I2A(temp,PRT_Handle->Budrate);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	f107 0308 	add.w	r3, r7, #8
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff10 	bl	800532c <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 800550c:	f107 0308 	add.w	r3, r7, #8
 8005510:	4618      	mov	r0, r3
 8005512:	f7fa fe63 	bl	80001dc <strlen>
 8005516:	4603      	mov	r3, r0
 8005518:	b29a      	uxth	r2, r3
 800551a:	f107 0108 	add.w	r1, r7, #8
 800551e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005522:	4823      	ldr	r0, [pc, #140]	; (80055b0 <CommandOperation+0x1ac>)
 8005524:	f7fd fee9 	bl	80032fa <HAL_UART_Transmit>
		 	 flag = 1; //flag = 1 ; Command Found
 8005528:	2301      	movs	r3, #1
 800552a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 	 break;
 800552e:	e039      	b.n	80055a4 <CommandOperation+0x1a0>

		 case CHN_BAUDRATE:// Change baudrate

			 HAL_UART_Transmit(&huart2, "Waiting for modified baudrate\n", strlen( "Waiting for modified baudrate\n"),1000);
 8005530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005534:	221e      	movs	r2, #30
 8005536:	4920      	ldr	r1, [pc, #128]	; (80055b8 <CommandOperation+0x1b4>)
 8005538:	481d      	ldr	r0, [pc, #116]	; (80055b0 <CommandOperation+0x1ac>)
 800553a:	f7fd fede 	bl	80032fa <HAL_UART_Transmit>
			 do
			 {
				 memset(temp,0,64);
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f002 f816 	bl	8007578 <memset>
				 HAL_UART_Receive(&huart2, &temp, 64,1000);
 800554c:	f107 0108 	add.w	r1, r7, #8
 8005550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005554:	2240      	movs	r2, #64	; 0x40
 8005556:	4816      	ldr	r0, [pc, #88]	; (80055b0 <CommandOperation+0x1ac>)
 8005558:	f7fd ff68 	bl	800342c <HAL_UART_Receive>

			 }while(!strlen(temp));
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0eb      	beq.n	800553e <CommandOperation+0x13a>

			 PRT_Handle->Budrate = checkBudrate(temp);
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ff31 	bl	80053d2 <checkBudrate>
 8005570:	4602      	mov	r2, r0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	61da      	str	r2, [r3, #28]
			 flag = ChangeBaudrate(  PRT_Handle->Budrate );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff35 	bl	80053ea <ChangeBaudrate>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 8005586:	e00d      	b.n	80055a4 <CommandOperation+0x1a0>

		 case PRINTREPORT:
			 	 printReport();
 8005588:	f000 f81a 	bl	80055c0 <printReport>
			 	 break;
 800558c:	e00a      	b.n	80055a4 <CommandOperation+0x1a0>
		 default:
			 HAL_UART_Transmit(&huart2, "This is not know Command\n", strlen(  "This is not know Command\n"),1000);
 800558e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005592:	2219      	movs	r2, #25
 8005594:	4909      	ldr	r1, [pc, #36]	; (80055bc <CommandOperation+0x1b8>)
 8005596:	4806      	ldr	r0, [pc, #24]	; (80055b0 <CommandOperation+0x1ac>)
 8005598:	f7fd feaf 	bl	80032fa <HAL_UART_Transmit>
			 flag = 0; //flag = 0 ; Command Not Found
 800559c:	2300      	movs	r3, #0
 800559e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 80055a2:	bf00      	nop

		 }//end-Switch



	 return flag;
 80055a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3750      	adds	r7, #80	; 0x50
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	200000c4 	.word	0x200000c4
 80055b4:	080077dc 	.word	0x080077dc
 80055b8:	080077e0 	.word	0x080077e0
 80055bc:	08007800 	.word	0x08007800

080055c0 <printReport>:


uint8_t printReport(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	/*
	 * Use it as per requirement and Conditions.
	 */

	return 0;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <PRT_Report>:
 * @ pData :  Received RAW data from User
 * @ return : converted data address into post scripts
 */

uint8_t *PRT_Report(uint8_t *pData)
{
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]

	memset(dData,0,2000);
 80055d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80055dc:	2100      	movs	r1, #0
 80055de:	4865      	ldr	r0, [pc, #404]	; (8005774 <PRT_Report+0x1a4>)
 80055e0:	f001 ffca 	bl	8007578 <memset>

	  if(strlen(pData) > 15)
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fa fdf9 	bl	80001dc <strlen>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d97f      	bls.n	80056f0 <PRT_Report+0x120>
		  {
			  uint16_t startIdx =0;   // starting index of Buffer data
 80055f0:	2300      	movs	r3, #0
 80055f2:	827b      	strh	r3, [r7, #18]
			  uint16_t lastIdx =0;    // Last index of Buffer data
 80055f4:	2300      	movs	r3, #0
 80055f6:	823b      	strh	r3, [r7, #16]
			  uint8_t *startAddr; // starting address of Buffer data
			  uint8_t *lastAddr;  // Last address of Buffer data

			  strcat(dData, "/Courier findfont [ 12 0 0 12 0 0] makefont setfont \r\n");
 80055f8:	485e      	ldr	r0, [pc, #376]	; (8005774 <PRT_Report+0x1a4>)
 80055fa:	f7fa fdef 	bl	80001dc <strlen>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	4b5c      	ldr	r3, [pc, #368]	; (8005774 <PRT_Report+0x1a4>)
 8005604:	4413      	add	r3, r2
 8005606:	4a5c      	ldr	r2, [pc, #368]	; (8005778 <PRT_Report+0x1a8>)
 8005608:	4614      	mov	r4, r2
 800560a:	469c      	mov	ip, r3
 800560c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005610:	4665      	mov	r5, ip
 8005612:	4626      	mov	r6, r4
 8005614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005616:	6028      	str	r0, [r5, #0]
 8005618:	6069      	str	r1, [r5, #4]
 800561a:	60aa      	str	r2, [r5, #8]
 800561c:	60eb      	str	r3, [r5, #12]
 800561e:	3410      	adds	r4, #16
 8005620:	f10c 0c10 	add.w	ip, ip, #16
 8005624:	4574      	cmp	r4, lr
 8005626:	d1f3      	bne.n	8005610 <PRT_Report+0x40>
 8005628:	4663      	mov	r3, ip
 800562a:	4622      	mov	r2, r4
 800562c:	6810      	ldr	r0, [r2, #0]
 800562e:	6018      	str	r0, [r3, #0]
 8005630:	8891      	ldrh	r1, [r2, #4]
 8005632:	7992      	ldrb	r2, [r2, #6]
 8005634:	8099      	strh	r1, [r3, #4]
 8005636:	719a      	strb	r2, [r3, #6]
			  strcat(dData, "/showline { gsave show grestore 0 -12  rmoveto } def \r\n");
 8005638:	484e      	ldr	r0, [pc, #312]	; (8005774 <PRT_Report+0x1a4>)
 800563a:	f7fa fdcf 	bl	80001dc <strlen>
 800563e:	4603      	mov	r3, r0
 8005640:	461a      	mov	r2, r3
 8005642:	4b4c      	ldr	r3, [pc, #304]	; (8005774 <PRT_Report+0x1a4>)
 8005644:	4413      	add	r3, r2
 8005646:	4a4d      	ldr	r2, [pc, #308]	; (800577c <PRT_Report+0x1ac>)
 8005648:	4614      	mov	r4, r2
 800564a:	469c      	mov	ip, r3
 800564c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005650:	4665      	mov	r5, ip
 8005652:	4626      	mov	r6, r4
 8005654:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005656:	6028      	str	r0, [r5, #0]
 8005658:	6069      	str	r1, [r5, #4]
 800565a:	60aa      	str	r2, [r5, #8]
 800565c:	60eb      	str	r3, [r5, #12]
 800565e:	3410      	adds	r4, #16
 8005660:	f10c 0c10 	add.w	ip, ip, #16
 8005664:	4574      	cmp	r4, lr
 8005666:	d1f3      	bne.n	8005650 <PRT_Report+0x80>
 8005668:	4662      	mov	r2, ip
 800566a:	4623      	mov	r3, r4
 800566c:	cb03      	ldmia	r3!, {r0, r1}
 800566e:	6010      	str	r0, [r2, #0]
 8005670:	6051      	str	r1, [r2, #4]
			  strcat(dData, " 18   745  moveto \r\n");
 8005672:	4840      	ldr	r0, [pc, #256]	; (8005774 <PRT_Report+0x1a4>)
 8005674:	f7fa fdb2 	bl	80001dc <strlen>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	4b3d      	ldr	r3, [pc, #244]	; (8005774 <PRT_Report+0x1a4>)
 800567e:	4413      	add	r3, r2
 8005680:	4a3f      	ldr	r2, [pc, #252]	; (8005780 <PRT_Report+0x1b0>)
 8005682:	461d      	mov	r5, r3
 8005684:	4614      	mov	r4, r2
 8005686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005688:	6028      	str	r0, [r5, #0]
 800568a:	6069      	str	r1, [r5, #4]
 800568c:	60aa      	str	r2, [r5, #8]
 800568e:	60eb      	str	r3, [r5, #12]
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	6128      	str	r0, [r5, #16]
 8005694:	7923      	ldrb	r3, [r4, #4]
 8005696:	752b      	strb	r3, [r5, #20]

			  for(int idx = 0; idx < strlen(pData); )
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e021      	b.n	80056e2 <PRT_Report+0x112>
			  {
				  startIdx  =  idx;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	827b      	strh	r3, [r7, #18]
				  startAddr = (pData+startIdx);
 80056a2:	8a7b      	ldrh	r3, [r7, #18]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
				  lastAddr   = (uint8_t *)strstr(pData+startIdx, "\r\n" );
 80056aa:	8a7b      	ldrh	r3, [r7, #18]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	4934      	ldr	r1, [pc, #208]	; (8005784 <PRT_Report+0x1b4>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f002 f831 	bl	800771a <strstr>
 80056b8:	60b8      	str	r0, [r7, #8]

				  lastIdx = lastAddr - startAddr;
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	823b      	strh	r3, [r7, #16]

				  idx = idx  + lastIdx;
 80056c2:	8a3b      	ldrh	r3, [r7, #16]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4413      	add	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

				  fun2(pData, startIdx, lastIdx);
 80056ca:	8a3a      	ldrh	r2, [r7, #16]
 80056cc:	8a7b      	ldrh	r3, [r7, #18]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8cf 	bl	8005874 <fun2>

				  idx++;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	3301      	adds	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
				  idx++;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3301      	adds	r3, #1
 80056e0:	617b      	str	r3, [r7, #20]
			  for(int idx = 0; idx < strlen(pData); )
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fa fd7a 	bl	80001dc <strlen>
 80056e8:	4602      	mov	r2, r0
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d8d6      	bhi.n	800569e <PRT_Report+0xce>
			  }//end -for(idx)
		  }//end- if()

	  	  strcat(dData," showpage \r\n");
 80056f0:	4820      	ldr	r0, [pc, #128]	; (8005774 <PRT_Report+0x1a4>)
 80056f2:	f7fa fd73 	bl	80001dc <strlen>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <PRT_Report+0x1a4>)
 80056fc:	4413      	add	r3, r2
 80056fe:	4a22      	ldr	r2, [pc, #136]	; (8005788 <PRT_Report+0x1b8>)
 8005700:	461c      	mov	r4, r3
 8005702:	4613      	mov	r3, r2
 8005704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	6061      	str	r1, [r4, #4]
 800570a:	60a2      	str	r2, [r4, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	7323      	strb	r3, [r4, #12]
		  strcat(dData, "18   745  moveto \r\n");
 8005710:	4818      	ldr	r0, [pc, #96]	; (8005774 <PRT_Report+0x1a4>)
 8005712:	f7fa fd63 	bl	80001dc <strlen>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <PRT_Report+0x1a4>)
 800571c:	4413      	add	r3, r2
 800571e:	4a1b      	ldr	r2, [pc, #108]	; (800578c <PRT_Report+0x1bc>)
 8005720:	461d      	mov	r5, r3
 8005722:	4614      	mov	r4, r2
 8005724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005726:	6028      	str	r0, [r5, #0]
 8005728:	6069      	str	r1, [r5, #4]
 800572a:	60aa      	str	r2, [r5, #8]
 800572c:	60eb      	str	r3, [r5, #12]
 800572e:	6820      	ldr	r0, [r4, #0]
 8005730:	6128      	str	r0, [r5, #16]
		  strcat(dData, " showpage \r\n");
 8005732:	4810      	ldr	r0, [pc, #64]	; (8005774 <PRT_Report+0x1a4>)
 8005734:	f7fa fd52 	bl	80001dc <strlen>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <PRT_Report+0x1a4>)
 800573e:	4413      	add	r3, r2
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <PRT_Report+0x1c0>)
 8005742:	461c      	mov	r4, r3
 8005744:	4613      	mov	r3, r2
 8005746:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005748:	6020      	str	r0, [r4, #0]
 800574a:	6061      	str	r1, [r4, #4]
 800574c:	60a2      	str	r2, [r4, #8]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	81a3      	strh	r3, [r4, #12]

		  HAL_UART_Transmit(&huart2, dData, strlen(dData), 3000);
 8005752:	4808      	ldr	r0, [pc, #32]	; (8005774 <PRT_Report+0x1a4>)
 8005754:	f7fa fd42 	bl	80001dc <strlen>
 8005758:	4603      	mov	r3, r0
 800575a:	b29a      	uxth	r2, r3
 800575c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005760:	4904      	ldr	r1, [pc, #16]	; (8005774 <PRT_Report+0x1a4>)
 8005762:	480c      	ldr	r0, [pc, #48]	; (8005794 <PRT_Report+0x1c4>)
 8005764:	f7fd fdc9 	bl	80032fa <HAL_UART_Transmit>
return dData;
 8005768:	4b02      	ldr	r3, [pc, #8]	; (8005774 <PRT_Report+0x1a4>)

}//end-PRT_Report()
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005772:	bf00      	nop
 8005774:	20000128 	.word	0x20000128
 8005778:	0800781c 	.word	0x0800781c
 800577c:	08007854 	.word	0x08007854
 8005780:	0800788c 	.word	0x0800788c
 8005784:	080078a4 	.word	0x080078a4
 8005788:	080078a8 	.word	0x080078a8
 800578c:	080078b8 	.word	0x080078b8
 8005790:	080078cc 	.word	0x080078cc
 8005794:	200000c4 	.word	0x200000c4

08005798 <SendDataOnPrinter>:
 * @ buff :  received data
 */


uint8_t SendDataOnPrinter(USBH_HandleTypeDef *phost, PRT_HandleTypeDef *PRT_Handle, uint8_t *buff)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b09a      	sub	sp, #104	; 0x68
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
	uint8_t temp[64],pktcnt=0,status;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint16_t XferSize=0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	memset(temp,0,64);
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	2240      	movs	r2, #64	; 0x40
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fedd 	bl	8007578 <memset>
	XferSize = strlen(buff);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fa fd0c 	bl	80001dc <strlen>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 80057ca:	2300      	movs	r3, #0
 80057cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ce:	e03f      	b.n	8005850 <SendDataOnPrinter+0xb8>
	  {
			// Number of packets are important because the max packet size is decided and can not send more than that.
			// Here in this case is 64 bytes. It is already decided by device/configuration structures.
			 for(int j=0; j < PRT_Handle->length; j++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
 80057d4:	e00f      	b.n	80057f6 <SendDataOnPrinter+0x5e>
			 {
				 temp[j] = buff[i+j];
 80057d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057da:	4413      	add	r3, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	f107 0210 	add.w	r2, r7, #16
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	4413      	add	r3, r2
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]
			 for(int j=0; j < PRT_Handle->length; j++)
 80057f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f2:	3301      	adds	r3, #1
 80057f4:	657b      	str	r3, [r7, #84]	; 0x54
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	891b      	ldrh	r3, [r3, #8]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fe:	4293      	cmp	r3, r2
 8005800:	dbe9      	blt.n	80057d6 <SendDataOnPrinter+0x3e>
			 }//for(j)
			 PRT_Handle->buff = temp;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f107 0210 	add.w	r2, r7, #16
 8005808:	615a      	str	r2, [r3, #20]
			 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->InPipe, 0);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6959      	ldr	r1, [r3, #20]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	891a      	ldrh	r2, [r3, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	2000      	movs	r0, #0
 8005818:	9000      	str	r0, [sp, #0]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f001 facb 	bl	8006db6 <USBH_BulkSendData>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			 memset(temp,0,64);
 8005826:	f107 0310 	add.w	r3, r7, #16
 800582a:	2240      	movs	r2, #64	; 0x40
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fea2 	bl	8007578 <memset>
			 USBH_Delay(10);
 8005834:	200a      	movs	r0, #10
 8005836:	f001 fe2e 	bl	8007496 <USBH_Delay>
			 pktcnt++;
 800583a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800583e:	3301      	adds	r3, #1
 8005840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	891b      	ldrh	r3, [r3, #8]
 8005848:	461a      	mov	r2, r3
 800584a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800584c:	4413      	add	r3, r2
 800584e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005854:	b29a      	uxth	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	891b      	ldrh	r3, [r3, #8]
 800585a:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 800585e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	429a      	cmp	r2, r3
 8005866:	d9b3      	bls.n	80057d0 <SendDataOnPrinter+0x38>
	}

	 return status;
 8005868:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
}
 800586c:	4618      	mov	r0, r3
 800586e:	3760      	adds	r7, #96	; 0x60
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <fun2>:
 * @ lastIdx : last  index
 */


void fun2(uint8_t *pData, uint16_t startIdx, uint16_t lastIdx)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b0b7      	sub	sp, #220	; 0xdc
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
 8005880:	4613      	mov	r3, r2
 8005882:	803b      	strh	r3, [r7, #0]
	uint16_t idx=0;
 8005884:	2300      	movs	r3, #0
 8005886:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint8_t temp[200];
	memset(temp,0,200);
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	22c8      	movs	r2, #200	; 0xc8
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fe70 	bl	8007578 <memset>
	strcat(dData,"(");
 8005898:	4822      	ldr	r0, [pc, #136]	; (8005924 <fun2+0xb0>)
 800589a:	f7fa fc9f 	bl	80001dc <strlen>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b20      	ldr	r3, [pc, #128]	; (8005924 <fun2+0xb0>)
 80058a4:	4413      	add	r3, r2
 80058a6:	4920      	ldr	r1, [pc, #128]	; (8005928 <fun2+0xb4>)
 80058a8:	461a      	mov	r2, r3
 80058aa:	460b      	mov	r3, r1
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	8013      	strh	r3, [r2, #0]
	while( idx <  lastIdx )
 80058b0:	e010      	b.n	80058d4 <fun2+0x60>
	{
		temp[idx++] =  pData[startIdx++];
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	807a      	strh	r2, [r7, #2]
 80058b8:	461a      	mov	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	441a      	add	r2, r3
 80058be:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	f8a7 10d6 	strh.w	r1, [r7, #214]	; 0xd6
 80058c8:	7812      	ldrb	r2, [r2, #0]
 80058ca:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80058ce:	440b      	add	r3, r1
 80058d0:	f803 2ccc 	strb.w	r2, [r3, #-204]
	while( idx <  lastIdx )
 80058d4:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 80058d8:	883b      	ldrh	r3, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d3e9      	bcc.n	80058b2 <fun2+0x3e>
	}
	temp[idx] = '\0';
 80058de:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80058e2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80058e6:	4413      	add	r3, r2
 80058e8:	2200      	movs	r2, #0
 80058ea:	f803 2ccc 	strb.w	r2, [r3, #-204]
	strcat(dData,temp);
 80058ee:	f107 030c 	add.w	r3, r7, #12
 80058f2:	4619      	mov	r1, r3
 80058f4:	480b      	ldr	r0, [pc, #44]	; (8005924 <fun2+0xb0>)
 80058f6:	f001 ff01 	bl	80076fc <strcat>
	strcat(dData, ") showline \r\n");
 80058fa:	480a      	ldr	r0, [pc, #40]	; (8005924 <fun2+0xb0>)
 80058fc:	f7fa fc6e 	bl	80001dc <strlen>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <fun2+0xb0>)
 8005906:	4413      	add	r3, r2
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <fun2+0xb8>)
 800590a:	461c      	mov	r4, r3
 800590c:	4613      	mov	r3, r2
 800590e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005910:	6020      	str	r0, [r4, #0]
 8005912:	6061      	str	r1, [r4, #4]
 8005914:	60a2      	str	r2, [r4, #8]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	81a3      	strh	r3, [r4, #12]
}
 800591a:	bf00      	nop
 800591c:	37dc      	adds	r7, #220	; 0xdc
 800591e:	46bd      	mov	sp, r7
 8005920:	bd90      	pop	{r4, r7, pc}
 8005922:	bf00      	nop
 8005924:	20000128 	.word	0x20000128
 8005928:	080078dc 	.word	0x080078dc
 800592c:	080078e0 	.word	0x080078e0

08005930 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005944:	2302      	movs	r3, #2
 8005946:	e029      	b.n	800599c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	79fa      	ldrb	r2, [r7, #7]
 800594c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f81f 	bl	80059a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f001 fbcb 	bl	8007130 <USBH_LL_Init>

  return USBH_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e009      	b.n	80059ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	33e0      	adds	r3, #224	; 0xe0
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b0e      	cmp	r3, #14
 80059ce:	d9f2      	bls.n	80059b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e009      	b.n	80059ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f0:	d3f1      	bcc.n	80059d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2240      	movs	r2, #64	; 0x40
 8005a16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d016      	beq.n	8005a8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10e      	bne.n	8005a88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	33de      	adds	r3, #222	; 0xde
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e004      	b.n	8005a92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	73fb      	strb	r3, [r7, #15]
 8005a8c:	e001      	b.n	8005a92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	70fb      	strb	r3, [r7, #3]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70bb      	strb	r3, [r7, #2]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ac8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aca:	e025      	b.n	8005b18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	221a      	movs	r2, #26
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3302      	adds	r3, #2
 8005adc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	795b      	ldrb	r3, [r3, #5]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d002      	beq.n	8005aee <USBH_FindInterface+0x4e>
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	2bff      	cmp	r3, #255	; 0xff
 8005aec:	d111      	bne.n	8005b12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005af2:	78ba      	ldrb	r2, [r7, #2]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d002      	beq.n	8005afe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005af8:	78bb      	ldrb	r3, [r7, #2]
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d109      	bne.n	8005b12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005b02:	787a      	ldrb	r2, [r7, #1]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d002      	beq.n	8005b0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b08:	787b      	ldrb	r3, [r7, #1]
 8005b0a:	2bff      	cmp	r3, #255	; 0xff
 8005b0c:	d101      	bne.n	8005b12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	e006      	b.n	8005b20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	3301      	adds	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d9d6      	bls.n	8005acc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b1e:	23ff      	movs	r3, #255	; 0xff
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fb37 	bl	80071a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 fc51 	bl	80073e4 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b54:	2302      	movs	r3, #2
 8005b56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b0b      	cmp	r3, #11
 8005b76:	f200 81b3 	bhi.w	8005ee0 <USBH_Process+0x394>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <USBH_Process+0x34>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005bb1 	.word	0x08005bb1
 8005b84:	08005be3 	.word	0x08005be3
 8005b88:	08005c4b 	.word	0x08005c4b
 8005b8c:	08005e7b 	.word	0x08005e7b
 8005b90:	08005ee1 	.word	0x08005ee1
 8005b94:	08005cef 	.word	0x08005cef
 8005b98:	08005e21 	.word	0x08005e21
 8005b9c:	08005d25 	.word	0x08005d25
 8005ba0:	08005d45 	.word	0x08005d45
 8005ba4:	08005d65 	.word	0x08005d65
 8005ba8:	08005d93 	.word	0x08005d93
 8005bac:	08005e63 	.word	0x08005e63
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 8193 	beq.w	8005ee4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005bc4:	20c8      	movs	r0, #200	; 0xc8
 8005bc6:	f001 fc66 	bl	8007496 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 fb49 	bl	8007262 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005be0:	e180      	b.n	8005ee4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005bfa:	e182      	b.n	8005f02 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c06:	d914      	bls.n	8005c32 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c0e:	3301      	adds	r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d903      	bls.n	8005c2a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	220d      	movs	r2, #13
 8005c26:	701a      	strb	r2, [r3, #0]
      break;
 8005c28:	e16b      	b.n	8005f02 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
      break;
 8005c30:	e167      	b.n	8005f02 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c38:	f103 020a 	add.w	r2, r3, #10
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005c42:	200a      	movs	r0, #10
 8005c44:	f001 fc27 	bl	8007496 <USBH_Delay>
      break;
 8005c48:	e15b      	b.n	8005f02 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005c60:	2064      	movs	r0, #100	; 0x64
 8005c62:	f001 fc18 	bl	8007496 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fad4 	bl	8007214 <USBH_LL_GetSpeed>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2205      	movs	r2, #5
 8005c7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f8ed 	bl	8006e5e <USBH_AllocPipe>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005c8c:	2180      	movs	r1, #128	; 0x80
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f8e5 	bl	8006e5e <USBH_AllocPipe>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7919      	ldrb	r1, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	9201      	str	r2, [sp, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 f89e 	bl	8006e00 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7959      	ldrb	r1, [r3, #5]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	9202      	str	r2, [sp, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9201      	str	r2, [sp, #4]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 f88a 	bl	8006e00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005cec:	e109      	b.n	8005f02 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f90c 	bl	8005f0c <USBH_HandleEnum>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f040 80f3 	bne.w	8005ee8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d103      	bne.n	8005d1c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2208      	movs	r2, #8
 8005d18:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005d1a:	e0e5      	b.n	8005ee8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2207      	movs	r2, #7
 8005d20:	701a      	strb	r2, [r3, #0]
      break;
 8005d22:	e0e1      	b.n	8005ee8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80de 	beq.w	8005eec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005d42:	e0d3      	b.n	8005eec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fc20 	bl	8006594 <USBH_SetCfg>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 80ca 	bne.w	8005ef0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2209      	movs	r2, #9
 8005d60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d62:	e0c5      	b.n	8005ef0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d72:	2101      	movs	r1, #1
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fc30 	bl	80065da <USBH_SetFeature>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 80b9 	bne.w	8005ef4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	220a      	movs	r2, #10
 8005d86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d88:	e0b4      	b.n	8005ef4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	701a      	strb	r2, [r3, #0]
      break;
 8005d90:	e0b0      	b.n	8005ef4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80ad 	beq.w	8005ef8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
 8005daa:	e016      	b.n	8005dda <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005dac:	7bfa      	ldrb	r2, [r7, #15]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	32de      	adds	r2, #222	; 0xde
 8005db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db6:	791a      	ldrb	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d108      	bne.n	8005dd4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32de      	adds	r2, #222	; 0xde
 8005dc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005dd2:	e005      	b.n	8005de0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	73fb      	strb	r3, [r7, #15]
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0e5      	beq.n	8005dac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d016      	beq.n	8005e18 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2206      	movs	r2, #6
 8005e00:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e08:	2103      	movs	r1, #3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e0e:	e073      	b.n	8005ef8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	220d      	movs	r2, #13
 8005e14:	701a      	strb	r2, [r3, #0]
      break;
 8005e16:	e06f      	b.n	8005ef8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	220d      	movs	r2, #13
 8005e1c:	701a      	strb	r2, [r3, #0]
      break;
 8005e1e:	e06b      	b.n	8005ef8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d017      	beq.n	8005e5a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	4798      	blx	r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	220b      	movs	r2, #11
 8005e46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e48:	e058      	b.n	8005efc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005e4a:	7bbb      	ldrb	r3, [r7, #14]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d154      	bne.n	8005efc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	220d      	movs	r2, #13
 8005e56:	701a      	strb	r2, [r3, #0]
      break;
 8005e58:	e050      	b.n	8005efc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	220d      	movs	r2, #13
 8005e5e:	701a      	strb	r2, [r3, #0]
      break;
 8005e60:	e04c      	b.n	8005efc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d049      	beq.n	8005f00 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	4798      	blx	r3
     //   phost->gState = HOST_CLASS_REQUEST;

      }
      break;
 8005e78:	e042      	b.n	8005f00 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fd8e 	bl	80059a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005eb6:	2105      	movs	r1, #5
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fe2b 	bl	8005b2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ed6:	e014      	b.n	8005f02 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f965 	bl	80071a8 <USBH_LL_Start>
      break;
 8005ede:	e010      	b.n	8005f02 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005ee0:	bf00      	nop
 8005ee2:	e00e      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e00c      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005ee8:	bf00      	nop
 8005eea:	e00a      	b.n	8005f02 <USBH_Process+0x3b6>
    break;
 8005eec:	bf00      	nop
 8005eee:	e008      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e006      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005ef4:	bf00      	nop
 8005ef6:	e004      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005ef8:	bf00      	nop
 8005efa:	e002      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <USBH_Process+0x3b6>
      break;
 8005f00:	bf00      	nop
  }
  return USBH_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af04      	add	r7, sp, #16
 8005f12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f14:	2301      	movs	r3, #1
 8005f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	f200 81c1 	bhi.w	80062a8 <USBH_HandleEnum+0x39c>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <USBH_HandleEnum+0x20>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f4d 	.word	0x08005f4d
 8005f30:	0800600b 	.word	0x0800600b
 8005f34:	08006075 	.word	0x08006075
 8005f38:	08006103 	.word	0x08006103
 8005f3c:	0800616d 	.word	0x0800616d
 8005f40:	080061dd 	.word	0x080061dd
 8005f44:	08006223 	.word	0x08006223
 8005f48:	08006269 	.word	0x08006269
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005f4c:	2108      	movs	r1, #8
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa50 	bl	80063f4 <USBH_Get_DevDesc>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d130      	bne.n	8005fc0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7919      	ldrb	r1, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f82:	b292      	uxth	r2, r2
 8005f84:	9202      	str	r2, [sp, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2280      	movs	r2, #128	; 0x80
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 ff35 	bl	8006e00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7959      	ldrb	r1, [r3, #5]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005faa:	b292      	uxth	r2, r2
 8005fac:	9202      	str	r2, [sp, #8]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9201      	str	r2, [sp, #4]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 ff21 	bl	8006e00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005fbe:	e175      	b.n	80062ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	f040 8172 	bne.w	80062ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fce:	3301      	adds	r3, #1
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d903      	bls.n	8005fea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	220d      	movs	r2, #13
 8005fe6:	701a      	strb	r2, [r3, #0]
      break;
 8005fe8:	e160      	b.n	80062ac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	795b      	ldrb	r3, [r3, #5]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 ff55 	bl	8006ea0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 ff4f 	bl	8006ea0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
      break;
 8006008:	e150      	b.n	80062ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800600a:	2112      	movs	r1, #18
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9f1 	bl	80063f4 <USBH_Get_DevDesc>
 8006012:	4603      	mov	r3, r0
 8006014:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d103      	bne.n	8006024 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006022:	e145      	b.n	80062b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b03      	cmp	r3, #3
 8006028:	f040 8142 	bne.w	80062b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006032:	3301      	adds	r3, #1
 8006034:	b2da      	uxtb	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006042:	2b03      	cmp	r3, #3
 8006044:	d903      	bls.n	800604e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	220d      	movs	r2, #13
 800604a:	701a      	strb	r2, [r3, #0]
      break;
 800604c:	e130      	b.n	80062b0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	795b      	ldrb	r3, [r3, #5]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ff23 	bl	8006ea0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	791b      	ldrb	r3, [r3, #4]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 ff1d 	bl	8006ea0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
      break;
 8006072:	e11d      	b.n	80062b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006074:	2101      	movs	r1, #1
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa68 	bl	800654c <USBH_SetAddress>
 800607c:	4603      	mov	r3, r0
 800607e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d132      	bne.n	80060ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006086:	2002      	movs	r0, #2
 8006088:	f001 fa05 	bl	8007496 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2203      	movs	r2, #3
 8006098:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7919      	ldrb	r1, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80060ae:	b292      	uxth	r2, r2
 80060b0:	9202      	str	r2, [sp, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	9201      	str	r2, [sp, #4]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4603      	mov	r3, r0
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fe9f 	bl	8006e00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7959      	ldrb	r1, [r3, #5]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060d6:	b292      	uxth	r2, r2
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	9201      	str	r2, [sp, #4]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4603      	mov	r3, r0
 80060e2:	2200      	movs	r2, #0
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fe8b 	bl	8006e00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80060ea:	e0e3      	b.n	80062b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f040 80e0 	bne.w	80062b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	220d      	movs	r2, #13
 80060f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	705a      	strb	r2, [r3, #1]
      break;
 8006100:	e0d8      	b.n	80062b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006102:	2109      	movs	r1, #9
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f99d 	bl	8006444 <USBH_Get_CfgDesc>
 800610a:	4603      	mov	r3, r0
 800610c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2204      	movs	r2, #4
 8006118:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800611a:	e0cd      	b.n	80062b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b03      	cmp	r3, #3
 8006120:	f040 80ca 	bne.w	80062b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800612a:	3301      	adds	r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800613a:	2b03      	cmp	r3, #3
 800613c:	d903      	bls.n	8006146 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	220d      	movs	r2, #13
 8006142:	701a      	strb	r2, [r3, #0]
      break;
 8006144:	e0b8      	b.n	80062b8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	795b      	ldrb	r3, [r3, #5]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fea7 	bl	8006ea0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	791b      	ldrb	r3, [r3, #4]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fea1 	bl	8006ea0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e0a5      	b.n	80062b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f965 	bl	8006444 <USBH_Get_CfgDesc>
 800617a:	4603      	mov	r3, r0
 800617c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2205      	movs	r2, #5
 8006188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800618a:	e097      	b.n	80062bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	2b03      	cmp	r3, #3
 8006190:	f040 8094 	bne.w	80062bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800619a:	3301      	adds	r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d903      	bls.n	80061b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	220d      	movs	r2, #13
 80061b2:	701a      	strb	r2, [r3, #0]
      break;
 80061b4:	e082      	b.n	80062bc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	795b      	ldrb	r3, [r3, #5]
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fe6f 	bl	8006ea0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fe69 	bl	8006ea0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
      break;
 80061da:	e06f      	b.n	80062bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d019      	beq.n	800621a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80061f2:	23ff      	movs	r3, #255	; 0xff
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f949 	bl	800648c <USBH_Get_StringDesc>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2206      	movs	r2, #6
 8006208:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800620a:	e059      	b.n	80062c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d156      	bne.n	80062c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2206      	movs	r2, #6
 8006216:	705a      	strb	r2, [r3, #1]
      break;
 8006218:	e052      	b.n	80062c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2206      	movs	r2, #6
 800621e:	705a      	strb	r2, [r3, #1]
      break;
 8006220:	e04e      	b.n	80062c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006228:	2b00      	cmp	r3, #0
 800622a:	d019      	beq.n	8006260 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006238:	23ff      	movs	r3, #255	; 0xff
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f926 	bl	800648c <USBH_Get_StringDesc>
 8006240:	4603      	mov	r3, r0
 8006242:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2207      	movs	r2, #7
 800624e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006250:	e038      	b.n	80062c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d135      	bne.n	80062c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2207      	movs	r2, #7
 800625c:	705a      	strb	r2, [r3, #1]
      break;
 800625e:	e031      	b.n	80062c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2207      	movs	r2, #7
 8006264:	705a      	strb	r2, [r3, #1]
      break;
 8006266:	e02d      	b.n	80062c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800626e:	2b00      	cmp	r3, #0
 8006270:	d017      	beq.n	80062a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800627e:	23ff      	movs	r3, #255	; 0xff
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f903 	bl	800648c <USBH_Get_StringDesc>
 8006286:	4603      	mov	r3, r0
 8006288:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006294:	e018      	b.n	80062c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d115      	bne.n	80062c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
      break;
 80062a0:	e012      	b.n	80062c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
      break;
 80062a6:	e00f      	b.n	80062c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80062a8:	bf00      	nop
 80062aa:	e00e      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062ac:	bf00      	nop
 80062ae:	e00c      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062b0:	bf00      	nop
 80062b2:	e00a      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062b4:	bf00      	nop
 80062b6:	e008      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062b8:	bf00      	nop
 80062ba:	e006      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062bc:	bf00      	nop
 80062be:	e004      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062c0:	bf00      	nop
 80062c2:	e002      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <USBH_HandleEnum+0x3be>
      break;
 80062c8:	bf00      	nop
  }
  return Status;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f804 	bl	8006316 <USBH_HandleSof>
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b0b      	cmp	r3, #11
 8006326:	d10a      	bne.n	800633e <USBH_HandleSof+0x28>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
  }
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006356:	bf00      	nop
}
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006372:	bf00      	nop
}
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 ff06 	bl	80071de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	791b      	ldrb	r3, [r3, #4]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fd61 	bl	8006ea0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	795b      	ldrb	r3, [r3, #5]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fd5b 	bl	8006ea0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	b29b      	uxth	r3, r3
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006412:	2100      	movs	r1, #0
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f864 	bl	80064e2 <USBH_GetDescriptor>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f203 3026 	addw	r0, r3, #806	; 0x326
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006430:	78fa      	ldrb	r2, [r7, #3]
 8006432:	b292      	uxth	r2, r2
 8006434:	4619      	mov	r1, r3
 8006436:	f000 f8f4 	bl	8006622 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af02      	add	r7, sp, #8
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	331c      	adds	r3, #28
 8006454:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f83d 	bl	80064e2 <USBH_GetDescriptor>
 8006468:	4603      	mov	r3, r0
 800646a:	72fb      	strb	r3, [r7, #11]
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006478:	887a      	ldrh	r2, [r7, #2]
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f940 	bl	8006702 <USBH_ParseCfgDesc>
  }

  return status;
 8006482:	7afb      	ldrb	r3, [r7, #11]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	461a      	mov	r2, r3
 8006498:	460b      	mov	r3, r1
 800649a:	72fb      	strb	r3, [r7, #11]
 800649c:	4613      	mov	r3, r2
 800649e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064a8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	460b      	mov	r3, r1
 80064b6:	2100      	movs	r1, #0
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f812 	bl	80064e2 <USBH_GetDescriptor>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d107      	bne.n	80064d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80064ce:	893a      	ldrh	r2, [r7, #8]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fa13 	bl	80068fe <USBH_ParseStringDesc>
  }

  return status;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	72fb      	strb	r3, [r7, #11]
 80064f0:	4613      	mov	r3, r2
 80064f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	789b      	ldrb	r3, [r3, #2]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11c      	bne.n	8006536 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006502:	b2da      	uxtb	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2206      	movs	r2, #6
 800650c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	893a      	ldrh	r2, [r7, #8]
 8006512:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006514:	893b      	ldrh	r3, [r7, #8]
 8006516:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800651a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800651e:	d104      	bne.n	800652a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f240 4209 	movw	r2, #1033	; 0x409
 8006526:	829a      	strh	r2, [r3, #20]
 8006528:	e002      	b.n	8006530 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8b3a      	ldrh	r2, [r7, #24]
 8006534:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006536:	8b3b      	ldrh	r3, [r7, #24]
 8006538:	461a      	mov	r2, r3
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fa2c 	bl	800699a <USBH_CtlReq>
 8006542:	4603      	mov	r3, r0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	789b      	ldrb	r3, [r3, #2]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10f      	bne.n	8006580 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2205      	movs	r2, #5
 800656a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006580:	2200      	movs	r2, #0
 8006582:	2100      	movs	r1, #0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fa08 	bl	800699a <USBH_CtlReq>
 800658a:	4603      	mov	r3, r0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	789b      	ldrb	r3, [r3, #2]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10e      	bne.n	80065c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2209      	movs	r2, #9
 80065b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	887a      	ldrh	r2, [r7, #2]
 80065b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80065c6:	2200      	movs	r2, #0
 80065c8:	2100      	movs	r1, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9e5 	bl	800699a <USBH_CtlReq>
 80065d0:	4603      	mov	r3, r0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	460b      	mov	r3, r1
 80065e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	789b      	ldrb	r3, [r3, #2]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d10f      	bne.n	800660e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2203      	movs	r2, #3
 80065f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800660e:	2200      	movs	r2, #0
 8006610:	2100      	movs	r1, #0
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9c1 	bl	800699a <USBH_CtlReq>
 8006618:	4603      	mov	r3, r0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	781a      	ldrb	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	785a      	ldrb	r2, [r3, #1]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3302      	adds	r3, #2
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b29a      	uxth	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3303      	adds	r3, #3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	b29b      	uxth	r3, r3
 8006654:	4313      	orrs	r3, r2
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	791a      	ldrb	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	795a      	ldrb	r2, [r3, #5]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	799a      	ldrb	r2, [r3, #6]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	79da      	ldrb	r2, [r3, #7]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	2b08      	cmp	r3, #8
 8006680:	d939      	bls.n	80066f6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	3308      	adds	r3, #8
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b29a      	uxth	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	3309      	adds	r3, #9
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	b29b      	uxth	r3, r3
 8006696:	4313      	orrs	r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	330a      	adds	r3, #10
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	330b      	adds	r3, #11
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	021b      	lsls	r3, r3, #8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	330c      	adds	r3, #12
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	330d      	adds	r3, #13
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	7b9a      	ldrb	r2, [r3, #14]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	7bda      	ldrb	r2, [r3, #15]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7c1a      	ldrb	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	7c5a      	ldrb	r2, [r3, #17]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	745a      	strb	r2, [r3, #17]
  }
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b08a      	sub	sp, #40	; 0x28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	781a      	ldrb	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	785a      	ldrb	r2, [r3, #1]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	3302      	adds	r3, #2
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b29a      	uxth	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	3303      	adds	r3, #3
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	791a      	ldrb	r2, [r3, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	795a      	ldrb	r2, [r3, #5]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	799a      	ldrb	r2, [r3, #6]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	79da      	ldrb	r2, [r3, #7]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	7a1a      	ldrb	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	2b09      	cmp	r3, #9
 800677c:	d95f      	bls.n	800683e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800677e:	2309      	movs	r3, #9
 8006780:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006786:	e051      	b.n	800682c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006788:	f107 0316 	add.w	r3, r7, #22
 800678c:	4619      	mov	r1, r3
 800678e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006790:	f000 f8e8 	bl	8006964 <USBH_GetNextDesc>
 8006794:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2b04      	cmp	r3, #4
 800679c:	d146      	bne.n	800682c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800679e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a2:	221a      	movs	r2, #26
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	3308      	adds	r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	3302      	adds	r3, #2
 80067b0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80067b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067b4:	69f8      	ldr	r0, [r7, #28]
 80067b6:	f000 f846 	bl	8006846 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067c4:	e022      	b.n	800680c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80067c6:	f107 0316 	add.w	r3, r7, #22
 80067ca:	4619      	mov	r1, r3
 80067cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ce:	f000 f8c9 	bl	8006964 <USBH_GetNextDesc>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b05      	cmp	r3, #5
 80067da:	d117      	bne.n	800680c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80067dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80067e4:	3201      	adds	r2, #1
 80067e6:	00d2      	lsls	r2, r2, #3
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	3308      	adds	r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	3304      	adds	r3, #4
 80067f8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80067fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067fc:	69b8      	ldr	r0, [r7, #24]
 80067fe:	f000 f851 	bl	80068a4 <USBH_ParseEPDesc>
            ep_ix++;
 8006802:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006806:	3301      	adds	r3, #1
 8006808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	791b      	ldrb	r3, [r3, #4]
 8006810:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006814:	429a      	cmp	r2, r3
 8006816:	d204      	bcs.n	8006822 <USBH_ParseCfgDesc+0x120>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	885a      	ldrh	r2, [r3, #2]
 800681c:	8afb      	ldrh	r3, [r7, #22]
 800681e:	429a      	cmp	r2, r3
 8006820:	d8d1      	bhi.n	80067c6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006826:	3301      	adds	r3, #1
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800682c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006830:	2b01      	cmp	r3, #1
 8006832:	d804      	bhi.n	800683e <USBH_ParseCfgDesc+0x13c>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	885a      	ldrh	r2, [r3, #2]
 8006838:	8afb      	ldrh	r3, [r7, #22]
 800683a:	429a      	cmp	r2, r3
 800683c:	d8a4      	bhi.n	8006788 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800683e:	bf00      	nop
 8006840:	3728      	adds	r7, #40	; 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785a      	ldrb	r2, [r3, #1]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	789a      	ldrb	r2, [r3, #2]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	78da      	ldrb	r2, [r3, #3]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	791a      	ldrb	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	795a      	ldrb	r2, [r3, #5]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	799a      	ldrb	r2, [r3, #6]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	79da      	ldrb	r2, [r3, #7]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	7a1a      	ldrb	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	721a      	strb	r2, [r3, #8]
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	785a      	ldrb	r2, [r3, #1]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	789a      	ldrb	r2, [r3, #2]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	78da      	ldrb	r2, [r3, #3]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	3304      	adds	r3, #4
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	3305      	adds	r3, #5
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	799a      	ldrb	r2, [r3, #6]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	719a      	strb	r2, [r3, #6]
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80068fe:	b480      	push	{r7}
 8006900:	b087      	sub	sp, #28
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d120      	bne.n	8006958 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	1e9a      	subs	r2, r3, #2
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	4293      	cmp	r3, r2
 8006920:	bf28      	it	cs
 8006922:	4613      	movcs	r3, r2
 8006924:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3302      	adds	r3, #2
 800692a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800692c:	2300      	movs	r3, #0
 800692e:	82fb      	strh	r3, [r7, #22]
 8006930:	e00b      	b.n	800694a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006932:	8afb      	ldrh	r3, [r7, #22]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3301      	adds	r3, #1
 8006942:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006944:	8afb      	ldrh	r3, [r7, #22]
 8006946:	3302      	adds	r3, #2
 8006948:	82fb      	strh	r3, [r7, #22]
 800694a:	8afa      	ldrh	r2, [r7, #22]
 800694c:	8abb      	ldrh	r3, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d3ef      	bcc.n	8006932 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
  }
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	4413      	add	r3, r2
 800697a:	b29a      	uxth	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	4613      	mov	r3, r2
 80069a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	789b      	ldrb	r3, [r3, #2]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d002      	beq.n	80069ba <USBH_CtlReq+0x20>
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d00f      	beq.n	80069d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80069b8:	e027      	b.n	8006a0a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2202      	movs	r2, #2
 80069d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80069d2:	2301      	movs	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]
      break;
 80069d6:	e018      	b.n	8006a0a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f81b 	bl	8006a14 <USBH_HandleControl>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <USBH_CtlReq+0x54>
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d106      	bne.n	80069fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	761a      	strb	r2, [r3, #24]
      break;
 80069fa:	e005      	b.n	8006a08 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d102      	bne.n	8006a08 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	709a      	strb	r2, [r3, #2]
      break;
 8006a08:	bf00      	nop
  }
  return status;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7e1b      	ldrb	r3, [r3, #24]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	2b0a      	cmp	r3, #10
 8006a2c:	f200 8156 	bhi.w	8006cdc <USBH_HandleControl+0x2c8>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <USBH_HandleControl+0x24>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7f 	.word	0x08006a7f
 8006a40:	08006ae9 	.word	0x08006ae9
 8006a44:	08006b0f 	.word	0x08006b0f
 8006a48:	08006b47 	.word	0x08006b47
 8006a4c:	08006b71 	.word	0x08006b71
 8006a50:	08006bc3 	.word	0x08006bc3
 8006a54:	08006be5 	.word	0x08006be5
 8006a58:	08006c21 	.word	0x08006c21
 8006a5c:	08006c47 	.word	0x08006c47
 8006a60:	08006c85 	.word	0x08006c85
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f103 0110 	add.w	r1, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	795b      	ldrb	r3, [r3, #5]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f943 	bl	8006cfc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	761a      	strb	r2, [r3, #24]
      break;
 8006a7c:	e139      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	795b      	ldrb	r3, [r3, #5]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc99 	bl	80073bc <USBH_LL_GetURBState>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d11e      	bne.n	8006ad2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	7c1b      	ldrb	r3, [r3, #16]
 8006a98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	8adb      	ldrh	r3, [r3, #22]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006aa6:	7b7b      	ldrb	r3, [r7, #13]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d103      	bne.n	8006ab4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ab2:	e115      	b.n	8006ce0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2205      	movs	r2, #5
 8006ab8:	761a      	strb	r2, [r3, #24]
      break;
 8006aba:	e111      	b.n	8006ce0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006abc:	7b7b      	ldrb	r3, [r7, #13]
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d103      	bne.n	8006aca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2209      	movs	r2, #9
 8006ac6:	761a      	strb	r2, [r3, #24]
      break;
 8006ac8:	e10a      	b.n	8006ce0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2207      	movs	r2, #7
 8006ace:	761a      	strb	r2, [r3, #24]
      break;
 8006ad0:	e106      	b.n	8006ce0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <USBH_HandleControl+0xcc>
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	f040 8100 	bne.w	8006ce0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	220b      	movs	r2, #11
 8006ae4:	761a      	strb	r2, [r3, #24]
      break;
 8006ae6:	e0fb      	b.n	8006ce0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6899      	ldr	r1, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	899a      	ldrh	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f93a 	bl	8006d7a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	761a      	strb	r2, [r3, #24]
      break;
 8006b0c:	e0f1      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc51 	bl	80073bc <USBH_LL_GetURBState>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d102      	bne.n	8006b2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2209      	movs	r2, #9
 8006b28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	d102      	bne.n	8006b36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006b30:	2303      	movs	r3, #3
 8006b32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b34:	e0d6      	b.n	8006ce4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	f040 80d3 	bne.w	8006ce4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	220b      	movs	r2, #11
 8006b42:	761a      	strb	r2, [r3, #24]
      break;
 8006b44:	e0ce      	b.n	8006ce4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6899      	ldr	r1, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	899a      	ldrh	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	795b      	ldrb	r3, [r3, #5]
 8006b52:	2001      	movs	r0, #1
 8006b54:	9000      	str	r0, [sp, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8ea 	bl	8006d30 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	761a      	strb	r2, [r3, #24]
      break;
 8006b6e:	e0c0      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	795b      	ldrb	r3, [r3, #5]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fc20 	bl	80073bc <USBH_LL_GetURBState>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d103      	bne.n	8006b8e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2207      	movs	r2, #7
 8006b8a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b8c:	e0ac      	b.n	8006ce8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d105      	bne.n	8006ba0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	220c      	movs	r2, #12
 8006b98:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9e:	e0a3      	b.n	8006ce8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d103      	bne.n	8006bae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2205      	movs	r2, #5
 8006baa:	761a      	strb	r2, [r3, #24]
      break;
 8006bac:	e09c      	b.n	8006ce8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	f040 8099 	bne.w	8006ce8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220b      	movs	r2, #11
 8006bba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	e092      	b.n	8006ce8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	791b      	ldrb	r3, [r3, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8d5 	bl	8006d7a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2208      	movs	r2, #8
 8006be0:	761a      	strb	r2, [r3, #24]

      break;
 8006be2:	e086      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	791b      	ldrb	r3, [r3, #4]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fbe6 	bl	80073bc <USBH_LL_GetURBState>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d105      	bne.n	8006c06 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	220d      	movs	r2, #13
 8006bfe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c04:	e072      	b.n	8006cec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d103      	bne.n	8006c14 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	220b      	movs	r2, #11
 8006c10:	761a      	strb	r2, [r3, #24]
      break;
 8006c12:	e06b      	b.n	8006cec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d168      	bne.n	8006cec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1e:	e065      	b.n	8006cec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	795b      	ldrb	r3, [r3, #5]
 8006c24:	2201      	movs	r2, #1
 8006c26:	9200      	str	r2, [sp, #0]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f87f 	bl	8006d30 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	220a      	movs	r2, #10
 8006c42:	761a      	strb	r2, [r3, #24]
      break;
 8006c44:	e055      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fbb5 	bl	80073bc <USBH_LL_GetURBState>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	220d      	movs	r2, #13
 8006c64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c66:	e043      	b.n	8006cf0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d103      	bne.n	8006c76 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2209      	movs	r2, #9
 8006c72:	761a      	strb	r2, [r3, #24]
      break;
 8006c74:	e03c      	b.n	8006cf0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d139      	bne.n	8006cf0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	220b      	movs	r2, #11
 8006c80:	761a      	strb	r2, [r3, #24]
      break;
 8006c82:	e035      	b.n	8006cf0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7e5b      	ldrb	r3, [r3, #25]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	765a      	strb	r2, [r3, #25]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7e5b      	ldrb	r3, [r3, #25]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d806      	bhi.n	8006ca6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006ca4:	e025      	b.n	8006cf2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cac:	2106      	movs	r1, #6
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	795b      	ldrb	r3, [r3, #5]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8ee 	bl	8006ea0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	791b      	ldrb	r3, [r3, #4]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8e8 	bl	8006ea0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cda:	e00a      	b.n	8006cf2 <USBH_HandleControl+0x2de>

    default:
      break;
 8006cdc:	bf00      	nop
 8006cde:	e008      	b.n	8006cf2 <USBH_HandleControl+0x2de>
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e006      	b.n	8006cf2 <USBH_HandleControl+0x2de>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e004      	b.n	8006cf2 <USBH_HandleControl+0x2de>
      break;
 8006ce8:	bf00      	nop
 8006cea:	e002      	b.n	8006cf2 <USBH_HandleControl+0x2de>
      break;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <USBH_HandleControl+0x2de>
      break;
 8006cf0:	bf00      	nop
  }

  return status;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af04      	add	r7, sp, #16
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d0a:	79f9      	ldrb	r1, [r7, #7]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	2308      	movs	r3, #8
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2200      	movs	r2, #0
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fb1a 	bl	800735a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af04      	add	r7, sp, #16
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	460b      	mov	r3, r1
 8006d40:	80fb      	strh	r3, [r7, #6]
 8006d42:	4613      	mov	r3, r2
 8006d44:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d54:	7979      	ldrb	r1, [r7, #5]
 8006d56:	7e3b      	ldrb	r3, [r7, #24]
 8006d58:	9303      	str	r3, [sp, #12]
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	9302      	str	r3, [sp, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	2301      	movs	r3, #1
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	2300      	movs	r3, #0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 faf5 	bl	800735a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b088      	sub	sp, #32
 8006d7e:	af04      	add	r7, sp, #16
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	4611      	mov	r1, r2
 8006d86:	461a      	mov	r2, r3
 8006d88:	460b      	mov	r3, r1
 8006d8a:	80fb      	strh	r3, [r7, #6]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d90:	7979      	ldrb	r1, [r7, #5]
 8006d92:	2300      	movs	r3, #0
 8006d94:	9303      	str	r3, [sp, #12]
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	9302      	str	r3, [sp, #8]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	2301      	movs	r3, #1
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	2201      	movs	r2, #1
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fad7 	bl	800735a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006dac:	2300      	movs	r3, #0

}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b088      	sub	sp, #32
 8006dba:	af04      	add	r7, sp, #16
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	80fb      	strh	r3, [r7, #6]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	763b      	strb	r3, [r7, #24]
  }

 // do_ping = 1U;

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006dda:	7979      	ldrb	r1, [r7, #5]
 8006ddc:	7e3b      	ldrb	r3, [r7, #24]
 8006dde:	9303      	str	r3, [sp, #12]
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	9302      	str	r3, [sp, #8]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	2301      	movs	r3, #1
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	2302      	movs	r3, #2
 8006dee:	2200      	movs	r2, #0
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fab2 	bl	800735a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af04      	add	r7, sp, #16
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	4608      	mov	r0, r1
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	70fb      	strb	r3, [r7, #3]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70bb      	strb	r3, [r7, #2]
 8006e16:	4613      	mov	r3, r2
 8006e18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006e1a:	7878      	ldrb	r0, [r7, #1]
 8006e1c:	78ba      	ldrb	r2, [r7, #2]
 8006e1e:	78f9      	ldrb	r1, [r7, #3]
 8006e20:	8b3b      	ldrh	r3, [r7, #24]
 8006e22:	9302      	str	r3, [sp, #8]
 8006e24:	7d3b      	ldrb	r3, [r7, #20]
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	7c3b      	ldrb	r3, [r7, #16]
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa45 	bl	80072be <USBH_LL_OpenPipe>

  return USBH_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa64 	bl	800731c <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f836 	bl	8006edc <USBH_GetFreePipe>
 8006e70:	4603      	mov	r3, r0
 8006e72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00a      	beq.n	8006e94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	33e0      	adds	r3, #224	; 0xe0
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006e94:	89fb      	ldrh	r3, [r7, #14]
 8006e96:	b2db      	uxtb	r3, r3
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b0a      	cmp	r3, #10
 8006eb0:	d80d      	bhi.n	8006ece <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	33e0      	adds	r3, #224	; 0xe0
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	33e0      	adds	r3, #224	; 0xe0
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
 8006eec:	e00f      	b.n	8006f0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	33e0      	adds	r3, #224	; 0xe0
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	e007      	b.n	8006f18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	73fb      	strb	r3, [r7, #15]
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b0a      	cmp	r3, #10
 8006f12:	d9ec      	bls.n	8006eee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	490e      	ldr	r1, [pc, #56]	; (8006f64 <MX_USB_HOST_Init+0x40>)
 8006f2c:	480e      	ldr	r0, [pc, #56]	; (8006f68 <MX_USB_HOST_Init+0x44>)
 8006f2e:	f7fe fcff 	bl	8005930 <USBH_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006f38:	f7f9 fbba 	bl	80006b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 8006f3c:	490b      	ldr	r1, [pc, #44]	; (8006f6c <MX_USB_HOST_Init+0x48>)
 8006f3e:	480a      	ldr	r0, [pc, #40]	; (8006f68 <MX_USB_HOST_Init+0x44>)
 8006f40:	f7fe fd84 	bl	8005a4c <USBH_RegisterClass>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006f4a:	f7f9 fbb1 	bl	80006b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f4e:	4806      	ldr	r0, [pc, #24]	; (8006f68 <MX_USB_HOST_Init+0x44>)
 8006f50:	f7fe fdec 	bl	8005b2c <USBH_Start>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f5a:	f7f9 fba9 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	08006f85 	.word	0x08006f85
 8006f68:	200008f8 	.word	0x200008f8
 8006f6c:	2000000c 	.word	0x2000000c

08006f70 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f74:	4802      	ldr	r0, [pc, #8]	; (8006f80 <MX_USB_HOST_Process+0x10>)
 8006f76:	f7fe fde9 	bl	8005b4c <USBH_Process>
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200008f8 	.word	0x200008f8

08006f84 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f90:	78fb      	ldrb	r3, [r7, #3]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d819      	bhi.n	8006fcc <USBH_UserProcess+0x48>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBH_UserProcess+0x1c>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fc5 	.word	0x08006fc5
 8006fb0:	08006fb5 	.word	0x08006fb5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <USBH_UserProcess+0x58>)
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	701a      	strb	r2, [r3, #0]
  break;
 8006fba:	e008      	b.n	8006fce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <USBH_UserProcess+0x58>)
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
  break;
 8006fc2:	e004      	b.n	8006fce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <USBH_UserProcess+0x58>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
  break;
 8006fca:	e000      	b.n	8006fce <USBH_UserProcess+0x4a>

  default:
  break;
 8006fcc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	200000b4 	.word	0x200000b4

08006fe0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08a      	sub	sp, #40	; 0x28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	60da      	str	r2, [r3, #12]
 8006ff6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007000:	d13a      	bne.n	8007078 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	4b1e      	ldr	r3, [pc, #120]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6313      	str	r3, [r2, #48]	; 0x30
 8007012:	4b1b      	ldr	r3, [pc, #108]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800701e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007024:	2302      	movs	r3, #2
 8007026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800702c:	2303      	movs	r3, #3
 800702e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007030:	230a      	movs	r3, #10
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	4619      	mov	r1, r3
 800703a:	4812      	ldr	r0, [pc, #72]	; (8007084 <HAL_HCD_MspInit+0xa4>)
 800703c:	f7f9 fdfc 	bl	8000c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	4a0e      	ldr	r2, [pc, #56]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	6353      	str	r3, [r2, #52]	; 0x34
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007054:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 8007056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800705a:	6453      	str	r3, [r2, #68]	; 0x44
 800705c:	4b08      	ldr	r3, [pc, #32]	; (8007080 <HAL_HCD_MspInit+0xa0>)
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007068:	2200      	movs	r2, #0
 800706a:	2100      	movs	r1, #0
 800706c:	2043      	movs	r0, #67	; 0x43
 800706e:	f7f9 fdac 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007072:	2043      	movs	r0, #67	; 0x43
 8007074:	f7f9 fdc5 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007078:	bf00      	nop
 800707a:	3728      	adds	r7, #40	; 0x28
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	40020000 	.word	0x40020000

08007088 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff f92b 	bl	80062f2 <USBH_LL_IncTimer>
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff f963 	bl	800637e <USBH_LL_Connect>
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff f96c 	bl	80063ac <USBH_LL_Disconnect>
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	4613      	mov	r3, r2
 80070ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff f91d 	bl	8006346 <USBH_LL_PortEnabled>
} 
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff f91d 	bl	8006362 <USBH_LL_PortDisabled>
} 
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800713e:	2b01      	cmp	r3, #1
 8007140:	d12a      	bne.n	8007198 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007142:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <USBH_LL_Init+0x74>)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <USBH_LL_Init+0x74>)
 800714e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007152:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <USBH_LL_Init+0x74>)
 8007154:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007158:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <USBH_LL_Init+0x74>)
 800715c:	2208      	movs	r2, #8
 800715e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007160:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <USBH_LL_Init+0x74>)
 8007162:	2201      	movs	r2, #1
 8007164:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <USBH_LL_Init+0x74>)
 8007168:	2200      	movs	r2, #0
 800716a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <USBH_LL_Init+0x74>)
 800716e:	2202      	movs	r2, #2
 8007170:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <USBH_LL_Init+0x74>)
 8007174:	2201      	movs	r2, #1
 8007176:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007178:	480a      	ldr	r0, [pc, #40]	; (80071a4 <USBH_LL_Init+0x74>)
 800717a:	f7f9 ff12 	bl	8000fa2 <HAL_HCD_Init>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007184:	f7f9 fa94 	bl	80006b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007188:	4806      	ldr	r0, [pc, #24]	; (80071a4 <USBH_LL_Init+0x74>)
 800718a:	f7fa fb15 	bl	80017b8 <HAL_HCD_GetCurrentFrame>
 800718e:	4603      	mov	r3, r0
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f89e 	bl	80062d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000cd0 	.word	0x20000cd0

080071a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fa fa82 	bl	80016c8 <HAL_HCD_Start>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f96e 	bl	80074ac <USBH_Get_USB_Status>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fa fa8a 	bl	800170e <HAL_HCD_Stop>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f953 	bl	80074ac <USBH_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800720a:	7bbb      	ldrb	r3, [r7, #14]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007226:	4618      	mov	r0, r3
 8007228:	f7fa fad4 	bl	80017d4 <HAL_HCD_GetCurrentSpeed>
 800722c:	4603      	mov	r3, r0
 800722e:	2b02      	cmp	r3, #2
 8007230:	d00c      	beq.n	800724c <USBH_LL_GetSpeed+0x38>
 8007232:	2b02      	cmp	r3, #2
 8007234:	d80d      	bhi.n	8007252 <USBH_LL_GetSpeed+0x3e>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <USBH_LL_GetSpeed+0x2c>
 800723a:	2b01      	cmp	r3, #1
 800723c:	d003      	beq.n	8007246 <USBH_LL_GetSpeed+0x32>
 800723e:	e008      	b.n	8007252 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	e008      	b.n	8007258 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
    break;
 800724a:	e005      	b.n	8007258 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800724c:	2302      	movs	r3, #2
 800724e:	73fb      	strb	r3, [r7, #15]
    break;
 8007250:	e002      	b.n	8007258 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
    break;
 8007256:	bf00      	nop
  }
  return  speed;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007278:	4618      	mov	r0, r3
 800727a:	f7fa fa65 	bl	8001748 <HAL_HCD_ResetPort>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f911 	bl	80074ac <USBH_Get_USB_Status>
 800728a:	4603      	mov	r3, r0
 800728c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800728e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fa fa6d 	bl	800178e <HAL_HCD_HC_GetXferCount>
 80072b4:	4603      	mov	r3, r0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072be:	b590      	push	{r4, r7, lr}
 80072c0:	b089      	sub	sp, #36	; 0x24
 80072c2:	af04      	add	r7, sp, #16
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	4608      	mov	r0, r1
 80072c8:	4611      	mov	r1, r2
 80072ca:	461a      	mov	r2, r3
 80072cc:	4603      	mov	r3, r0
 80072ce:	70fb      	strb	r3, [r7, #3]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70bb      	strb	r3, [r7, #2]
 80072d4:	4613      	mov	r3, r2
 80072d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80072e6:	787c      	ldrb	r4, [r7, #1]
 80072e8:	78ba      	ldrb	r2, [r7, #2]
 80072ea:	78f9      	ldrb	r1, [r7, #3]
 80072ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4623      	mov	r3, r4
 80072fe:	f7f9 feb2 	bl	8001066 <HAL_HCD_HC_Init>
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f8cf 	bl	80074ac <USBH_Get_USB_Status>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007312:	7bbb      	ldrb	r3, [r7, #14]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	bd90      	pop	{r4, r7, pc}

0800731c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f7f9 ff2b 	bl	8001196 <HAL_HCD_HC_Halt>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8b0 	bl	80074ac <USBH_Get_USB_Status>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007350:	7bbb      	ldrb	r3, [r7, #14]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800735a:	b590      	push	{r4, r7, lr}
 800735c:	b089      	sub	sp, #36	; 0x24
 800735e:	af04      	add	r7, sp, #16
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	461a      	mov	r2, r3
 8007368:	4603      	mov	r3, r0
 800736a:	70fb      	strb	r3, [r7, #3]
 800736c:	460b      	mov	r3, r1
 800736e:	70bb      	strb	r3, [r7, #2]
 8007370:	4613      	mov	r3, r2
 8007372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007382:	787c      	ldrb	r4, [r7, #1]
 8007384:	78ba      	ldrb	r2, [r7, #2]
 8007386:	78f9      	ldrb	r1, [r7, #3]
 8007388:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4623      	mov	r3, r4
 800739e:	f7f9 ff1d 	bl	80011dc <HAL_HCD_HC_SubmitRequest>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f87f 	bl	80074ac <USBH_Get_USB_Status>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd90      	pop	{r4, r7, pc}

080073bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	4611      	mov	r1, r2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fa f9c6 	bl	8001764 <HAL_HCD_HC_GetURBState>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_FS)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10f      	bne.n	800741a <USBH_LL_DriverVBUS+0x36>
  {
    if (state == 0)
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <USBH_LL_DriverVBUS+0x2a>
    {
      /* Drive high Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8007400:	2200      	movs	r2, #0
 8007402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007406:	4809      	ldr	r0, [pc, #36]	; (800742c <USBH_LL_DriverVBUS+0x48>)
 8007408:	f7f9 fdb2 	bl	8000f70 <HAL_GPIO_WritePin>
 800740c:	e005      	b.n	800741a <USBH_LL_DriverVBUS+0x36>
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800740e:	2200      	movs	r2, #0
 8007410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007414:	4805      	ldr	r0, [pc, #20]	; (800742c <USBH_LL_DriverVBUS+0x48>)
 8007416:	f7f9 fdab 	bl	8000f70 <HAL_GPIO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800741a:	20c8      	movs	r0, #200	; 0xc8
 800741c:	f7f9 fad6 	bl	80009cc <HAL_Delay>
  return USBH_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40020000 	.word	0x40020000

08007430 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
 800743c:	4613      	mov	r3, r2
 800743e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007446:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	333b      	adds	r3, #59	; 0x3b
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	68f9      	ldr	r1, [r7, #12]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	440b      	add	r3, r1
 800746c:	3350      	adds	r3, #80	; 0x50
 800746e:	78ba      	ldrb	r2, [r7, #2]
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	e009      	b.n	8007488 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	4613      	mov	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	440b      	add	r3, r1
 8007482:	3351      	adds	r3, #81	; 0x51
 8007484:	78ba      	ldrb	r2, [r7, #2]
 8007486:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7f9 fa94 	bl	80009cc <HAL_Delay>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d817      	bhi.n	80074f0 <USBH_Get_USB_Status+0x44>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <USBH_Get_USB_Status+0x1c>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	080074df 	.word	0x080074df
 80074d0:	080074e5 	.word	0x080074e5
 80074d4:	080074eb 	.word	0x080074eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
    break;
 80074dc:	e00b      	b.n	80074f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	73fb      	strb	r3, [r7, #15]
    break;
 80074e2:	e008      	b.n	80074f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80074e4:	2301      	movs	r3, #1
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	e005      	b.n	80074f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80074ea:	2302      	movs	r3, #2
 80074ec:	73fb      	strb	r3, [r7, #15]
    break;
 80074ee:	e002      	b.n	80074f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	73fb      	strb	r3, [r7, #15]
    break;
 80074f4:	bf00      	nop
  }
  return usb_status;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <__errno>:
 8007504:	4b01      	ldr	r3, [pc, #4]	; (800750c <__errno+0x8>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	2000002c 	.word	0x2000002c

08007510 <__libc_init_array>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4d0d      	ldr	r5, [pc, #52]	; (8007548 <__libc_init_array+0x38>)
 8007514:	4c0d      	ldr	r4, [pc, #52]	; (800754c <__libc_init_array+0x3c>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	2600      	movs	r6, #0
 800751c:	42a6      	cmp	r6, r4
 800751e:	d109      	bne.n	8007534 <__libc_init_array+0x24>
 8007520:	4d0b      	ldr	r5, [pc, #44]	; (8007550 <__libc_init_array+0x40>)
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <__libc_init_array+0x44>)
 8007524:	f000 f91e 	bl	8007764 <_init>
 8007528:	1b64      	subs	r4, r4, r5
 800752a:	10a4      	asrs	r4, r4, #2
 800752c:	2600      	movs	r6, #0
 800752e:	42a6      	cmp	r6, r4
 8007530:	d105      	bne.n	800753e <__libc_init_array+0x2e>
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	f855 3b04 	ldr.w	r3, [r5], #4
 8007538:	4798      	blx	r3
 800753a:	3601      	adds	r6, #1
 800753c:	e7ee      	b.n	800751c <__libc_init_array+0xc>
 800753e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007542:	4798      	blx	r3
 8007544:	3601      	adds	r6, #1
 8007546:	e7f2      	b.n	800752e <__libc_init_array+0x1e>
 8007548:	08007910 	.word	0x08007910
 800754c:	08007910 	.word	0x08007910
 8007550:	08007910 	.word	0x08007910
 8007554:	08007914 	.word	0x08007914

08007558 <malloc>:
 8007558:	4b02      	ldr	r3, [pc, #8]	; (8007564 <malloc+0xc>)
 800755a:	4601      	mov	r1, r0
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f000 b863 	b.w	8007628 <_malloc_r>
 8007562:	bf00      	nop
 8007564:	2000002c 	.word	0x2000002c

08007568 <free>:
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <free+0xc>)
 800756a:	4601      	mov	r1, r0
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f000 b80b 	b.w	8007588 <_free_r>
 8007572:	bf00      	nop
 8007574:	2000002c 	.word	0x2000002c

08007578 <memset>:
 8007578:	4402      	add	r2, r0
 800757a:	4603      	mov	r3, r0
 800757c:	4293      	cmp	r3, r2
 800757e:	d100      	bne.n	8007582 <memset+0xa>
 8007580:	4770      	bx	lr
 8007582:	f803 1b01 	strb.w	r1, [r3], #1
 8007586:	e7f9      	b.n	800757c <memset+0x4>

08007588 <_free_r>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	2900      	cmp	r1, #0
 800758c:	d048      	beq.n	8007620 <_free_r+0x98>
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f1a1 0404 	sub.w	r4, r1, #4
 800759a:	bfb8      	it	lt
 800759c:	18e4      	addlt	r4, r4, r3
 800759e:	f000 f8d3 	bl	8007748 <__malloc_lock>
 80075a2:	4a20      	ldr	r2, [pc, #128]	; (8007624 <_free_r+0x9c>)
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	4615      	mov	r5, r2
 80075aa:	b933      	cbnz	r3, 80075ba <_free_r+0x32>
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	6014      	str	r4, [r2, #0]
 80075b0:	b003      	add	sp, #12
 80075b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b6:	f000 b8cd 	b.w	8007754 <__malloc_unlock>
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	d90b      	bls.n	80075d6 <_free_r+0x4e>
 80075be:	6821      	ldr	r1, [r4, #0]
 80075c0:	1862      	adds	r2, r4, r1
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bf04      	itt	eq
 80075c6:	681a      	ldreq	r2, [r3, #0]
 80075c8:	685b      	ldreq	r3, [r3, #4]
 80075ca:	6063      	str	r3, [r4, #4]
 80075cc:	bf04      	itt	eq
 80075ce:	1852      	addeq	r2, r2, r1
 80075d0:	6022      	streq	r2, [r4, #0]
 80075d2:	602c      	str	r4, [r5, #0]
 80075d4:	e7ec      	b.n	80075b0 <_free_r+0x28>
 80075d6:	461a      	mov	r2, r3
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b10b      	cbz	r3, 80075e0 <_free_r+0x58>
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d9fa      	bls.n	80075d6 <_free_r+0x4e>
 80075e0:	6811      	ldr	r1, [r2, #0]
 80075e2:	1855      	adds	r5, r2, r1
 80075e4:	42a5      	cmp	r5, r4
 80075e6:	d10b      	bne.n	8007600 <_free_r+0x78>
 80075e8:	6824      	ldr	r4, [r4, #0]
 80075ea:	4421      	add	r1, r4
 80075ec:	1854      	adds	r4, r2, r1
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	6011      	str	r1, [r2, #0]
 80075f2:	d1dd      	bne.n	80075b0 <_free_r+0x28>
 80075f4:	681c      	ldr	r4, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	6053      	str	r3, [r2, #4]
 80075fa:	4421      	add	r1, r4
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	e7d7      	b.n	80075b0 <_free_r+0x28>
 8007600:	d902      	bls.n	8007608 <_free_r+0x80>
 8007602:	230c      	movs	r3, #12
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	e7d3      	b.n	80075b0 <_free_r+0x28>
 8007608:	6825      	ldr	r5, [r4, #0]
 800760a:	1961      	adds	r1, r4, r5
 800760c:	428b      	cmp	r3, r1
 800760e:	bf04      	itt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	bf04      	itt	eq
 8007618:	1949      	addeq	r1, r1, r5
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	6054      	str	r4, [r2, #4]
 800761e:	e7c7      	b.n	80075b0 <_free_r+0x28>
 8007620:	b003      	add	sp, #12
 8007622:	bd30      	pop	{r4, r5, pc}
 8007624:	200000b8 	.word	0x200000b8

08007628 <_malloc_r>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	1ccd      	adds	r5, r1, #3
 800762c:	f025 0503 	bic.w	r5, r5, #3
 8007630:	3508      	adds	r5, #8
 8007632:	2d0c      	cmp	r5, #12
 8007634:	bf38      	it	cc
 8007636:	250c      	movcc	r5, #12
 8007638:	2d00      	cmp	r5, #0
 800763a:	4606      	mov	r6, r0
 800763c:	db01      	blt.n	8007642 <_malloc_r+0x1a>
 800763e:	42a9      	cmp	r1, r5
 8007640:	d903      	bls.n	800764a <_malloc_r+0x22>
 8007642:	230c      	movs	r3, #12
 8007644:	6033      	str	r3, [r6, #0]
 8007646:	2000      	movs	r0, #0
 8007648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800764a:	f000 f87d 	bl	8007748 <__malloc_lock>
 800764e:	4921      	ldr	r1, [pc, #132]	; (80076d4 <_malloc_r+0xac>)
 8007650:	680a      	ldr	r2, [r1, #0]
 8007652:	4614      	mov	r4, r2
 8007654:	b99c      	cbnz	r4, 800767e <_malloc_r+0x56>
 8007656:	4f20      	ldr	r7, [pc, #128]	; (80076d8 <_malloc_r+0xb0>)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	b923      	cbnz	r3, 8007666 <_malloc_r+0x3e>
 800765c:	4621      	mov	r1, r4
 800765e:	4630      	mov	r0, r6
 8007660:	f000 f83c 	bl	80076dc <_sbrk_r>
 8007664:	6038      	str	r0, [r7, #0]
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f837 	bl	80076dc <_sbrk_r>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	d123      	bne.n	80076ba <_malloc_r+0x92>
 8007672:	230c      	movs	r3, #12
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	4630      	mov	r0, r6
 8007678:	f000 f86c 	bl	8007754 <__malloc_unlock>
 800767c:	e7e3      	b.n	8007646 <_malloc_r+0x1e>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	1b5b      	subs	r3, r3, r5
 8007682:	d417      	bmi.n	80076b4 <_malloc_r+0x8c>
 8007684:	2b0b      	cmp	r3, #11
 8007686:	d903      	bls.n	8007690 <_malloc_r+0x68>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	441c      	add	r4, r3
 800768c:	6025      	str	r5, [r4, #0]
 800768e:	e004      	b.n	800769a <_malloc_r+0x72>
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	42a2      	cmp	r2, r4
 8007694:	bf0c      	ite	eq
 8007696:	600b      	streq	r3, [r1, #0]
 8007698:	6053      	strne	r3, [r2, #4]
 800769a:	4630      	mov	r0, r6
 800769c:	f000 f85a 	bl	8007754 <__malloc_unlock>
 80076a0:	f104 000b 	add.w	r0, r4, #11
 80076a4:	1d23      	adds	r3, r4, #4
 80076a6:	f020 0007 	bic.w	r0, r0, #7
 80076aa:	1ac2      	subs	r2, r0, r3
 80076ac:	d0cc      	beq.n	8007648 <_malloc_r+0x20>
 80076ae:	1a1b      	subs	r3, r3, r0
 80076b0:	50a3      	str	r3, [r4, r2]
 80076b2:	e7c9      	b.n	8007648 <_malloc_r+0x20>
 80076b4:	4622      	mov	r2, r4
 80076b6:	6864      	ldr	r4, [r4, #4]
 80076b8:	e7cc      	b.n	8007654 <_malloc_r+0x2c>
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d0e3      	beq.n	800768c <_malloc_r+0x64>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f000 f808 	bl	80076dc <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d1dd      	bne.n	800768c <_malloc_r+0x64>
 80076d0:	e7cf      	b.n	8007672 <_malloc_r+0x4a>
 80076d2:	bf00      	nop
 80076d4:	200000b8 	.word	0x200000b8
 80076d8:	200000bc 	.word	0x200000bc

080076dc <_sbrk_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d06      	ldr	r5, [pc, #24]	; (80076f8 <_sbrk_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	f7f9 f892 	bl	8000810 <_sbrk>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_sbrk_r+0x1a>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_sbrk_r+0x1a>
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	20000f94 	.word	0x20000f94

080076fc <strcat>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	4602      	mov	r2, r0
 8007700:	7814      	ldrb	r4, [r2, #0]
 8007702:	4613      	mov	r3, r2
 8007704:	3201      	adds	r2, #1
 8007706:	2c00      	cmp	r4, #0
 8007708:	d1fa      	bne.n	8007700 <strcat+0x4>
 800770a:	3b01      	subs	r3, #1
 800770c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007710:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007714:	2a00      	cmp	r2, #0
 8007716:	d1f9      	bne.n	800770c <strcat+0x10>
 8007718:	bd10      	pop	{r4, pc}

0800771a <strstr>:
 800771a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800771c:	780c      	ldrb	r4, [r1, #0]
 800771e:	b164      	cbz	r4, 800773a <strstr+0x20>
 8007720:	4603      	mov	r3, r0
 8007722:	781a      	ldrb	r2, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	1c5e      	adds	r6, r3, #1
 8007728:	b90a      	cbnz	r2, 800772e <strstr+0x14>
 800772a:	4610      	mov	r0, r2
 800772c:	e005      	b.n	800773a <strstr+0x20>
 800772e:	4294      	cmp	r4, r2
 8007730:	d108      	bne.n	8007744 <strstr+0x2a>
 8007732:	460d      	mov	r5, r1
 8007734:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007738:	b902      	cbnz	r2, 800773c <strstr+0x22>
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007740:	4297      	cmp	r7, r2
 8007742:	d0f7      	beq.n	8007734 <strstr+0x1a>
 8007744:	4633      	mov	r3, r6
 8007746:	e7ec      	b.n	8007722 <strstr+0x8>

08007748 <__malloc_lock>:
 8007748:	4801      	ldr	r0, [pc, #4]	; (8007750 <__malloc_lock+0x8>)
 800774a:	f000 b809 	b.w	8007760 <__retarget_lock_acquire_recursive>
 800774e:	bf00      	nop
 8007750:	20000f9c 	.word	0x20000f9c

08007754 <__malloc_unlock>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__malloc_unlock+0x8>)
 8007756:	f000 b804 	b.w	8007762 <__retarget_lock_release_recursive>
 800775a:	bf00      	nop
 800775c:	20000f9c 	.word	0x20000f9c

08007760 <__retarget_lock_acquire_recursive>:
 8007760:	4770      	bx	lr

08007762 <__retarget_lock_release_recursive>:
 8007762:	4770      	bx	lr

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
