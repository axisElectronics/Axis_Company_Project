
Discovery_USB_HOST_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc8  08007fc8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  20000090  08008060  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  08008060  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4b5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4c  00000000  00000000  0003c575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000403c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b4  00000000  00000000  00041e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a9f  00000000  00000000  000664b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8acf  00000000  00000000  00078f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a30  00000000  00000000  00141a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007de8 	.word	0x08007de8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007de8 	.word	0x08007de8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
  * @brief  The application entry point.
  * @retval int
  */
#define SIZE_BUFF 5000
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	 uint8_t buff[SIZE_BUFF];
	 int max;
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa0d 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f81f 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8b3 	bl	8000660 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004fa:	f007 f855 	bl	80075a8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_9600);
 80004fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000502:	f000 f881 	bl	8000608 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x48>)
 800050e:	f000 fd63 	bl	8000fd8 <HAL_GPIO_WritePin>
//  HAL_Delay(5000);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x48>)
 800051a:	f000 fd5d 	bl	8000fd8 <HAL_GPIO_WritePin>

  USBH_HID_KeybdInit(&hUsbHostFS);
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x4c>)
 8000520:	f004 fe40 	bl	80051a4 <USBH_HID_KeybdInit>
//  }

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000524:	f007 f866 	bl	80075f4 <MX_USB_HOST_Process>
 8000528:	e7fc      	b.n	8000524 <main+0x40>
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000
 8000530:	200008f8 	.word	0x200008f8

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 fb5a 	bl	8007bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	; 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fa19 	bl	80029f0 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f874 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc72 	bl	8002ed0 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f85d 	bl	80006b0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000630:	220c      	movs	r2, #12
 8000632:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000642:	f002 fe41 	bl	80032c8 <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800064c:	f000 f830 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c4 	.word	0x200000c4
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <HAL_UART_MspInit+0x94>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d133      	bne.n	800079a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <HAL_UART_MspInit+0x98>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077a:	2307      	movs	r3, #7
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_UART_MspInit+0x9c>)
 8000786:	f000 fa8b 	bl	8000ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	2026      	movs	r0, #38	; 0x26
 8000790:	f000 fa2d 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000794:	2026      	movs	r0, #38	; 0x26
 8000796:	f000 fa46 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f8d4 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <OTG_FS_IRQHandler+0x10>)
 8000812:	f000 fe89 	bl	8001528 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000cd0 	.word	0x20000cd0

08000820 <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */
extern UART_HandleTypeDef huart2;

void USART2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

HAL_UART_IRQHandler(&huart2);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USART2_IRQHandler+0x10>)
 8000826:	f002 ff31 	bl	800368c <HAL_UART_IRQHandler>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000c4 	.word	0x200000c4

08000834 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <_sbrk+0x50>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x16>
		heap_end = &end;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <_sbrk+0x50>)
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <_sbrk+0x54>)
 8000848:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <_sbrk+0x50>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <_sbrk+0x50>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	466a      	mov	r2, sp
 800085a:	4293      	cmp	r3, r2
 800085c:	d907      	bls.n	800086e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800085e:	f007 f993 	bl	8007b88 <__errno>
 8000862:	4603      	mov	r3, r0
 8000864:	220c      	movs	r2, #12
 8000866:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	e006      	b.n	800087c <_sbrk+0x48>
	}

	heap_end += incr;
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <_sbrk+0x50>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a03      	ldr	r2, [pc, #12]	; (8000884 <_sbrk+0x50>)
 8000878:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200000ac 	.word	0x200000ac
 8000888:	20000fa8 	.word	0x20000fa8

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <SystemInit+0x28>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <SystemInit+0x28>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SystemInit+0x28>)
 80008a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008a6:	609a      	str	r2, [r3, #8]
#endif
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr  r2, =_sbss
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008e2:	f7ff ffd3 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f007 f955 	bl	8007b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ea:	f7ff fdfb 	bl	80004e4 <main>
  bx  lr    
 80008ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f4:	08007fd0 	.word	0x08007fd0
  ldr  r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008fc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000900:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000904:	20000fa4 	.word	0x20000fa4

08000908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <HAL_Init+0x40>)
 8000916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_Init+0x40>)
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x40>)
 800092e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f94f 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff febe 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023c00 	.word	0x40023c00

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f967 	bl	8000c42 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f92f 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000104 	.word	0x20000104

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000104 	.word	0x20000104

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffde 	bl	80009d8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <__NVIC_EnableIRQ+0x38>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff29 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff3e 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff31 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d004      	beq.n	8000c78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e00c      	b.n	8000c92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e16b      	b.n	8000f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 815a 	bne.w	8000f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00b      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cee:	2b11      	cmp	r3, #17
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0xfc>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80b4 	beq.w	8000f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5f      	ldr	r2, [pc, #380]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a5b      	ldr	r2, [pc, #364]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a50      	ldr	r2, [pc, #320]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <HAL_GPIO_Init+0x32c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eaa:	2308      	movs	r3, #8
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0a:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_GPIO_Init+0x334>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae90 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40021800 	.word	0x40021800
 8000fd0:	40021c00 	.word	0x40021c00
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800100a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100c:	b08f      	sub	sp, #60	; 0x3c
 800100e:	af0a      	add	r7, sp, #40	; 0x28
 8001010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e054      	b.n	80010c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f006 fb14 	bl	8007664 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f9ae 	bl	80043bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687e      	ldr	r6, [r7, #4]
 8001068:	466d      	mov	r5, sp
 800106a:	f106 0410 	add.w	r4, r6, #16
 800106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800107a:	e885 0003 	stmia.w	r5, {r0, r1}
 800107e:	1d33      	adds	r3, r6, #4
 8001080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f003 f928 	bl	80042d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f003 f9a5 	bl	80043de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	687e      	ldr	r6, [r7, #4]
 800109c:	466d      	mov	r5, sp
 800109e:	f106 0410 	add.w	r4, r6, #16
 80010a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80010b2:	1d33      	adds	r3, r6, #4
 80010b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b6:	6838      	ldr	r0, [r7, #0]
 80010b8:	f003 fab8 	bl	800462c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b089      	sub	sp, #36	; 0x24
 80010d2:	af04      	add	r7, sp, #16
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	4603      	mov	r3, r0
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70bb      	strb	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_HCD_HC_Init+0x28>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e07f      	b.n	80011f6 <HAL_HCD_HC_Init+0x128>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80010fe:	78fa      	ldrb	r2, [r7, #3]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	333d      	adds	r3, #61	; 0x3d
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3338      	adds	r3, #56	; 0x38
 8001122:	787a      	ldrb	r2, [r7, #1]
 8001124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001126:	78fa      	ldrb	r2, [r7, #3]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3340      	adds	r3, #64	; 0x40
 8001136:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001138:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800113a:	78fa      	ldrb	r2, [r7, #3]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	440b      	add	r3, r1
 8001148:	3339      	adds	r3, #57	; 0x39
 800114a:	78fa      	ldrb	r2, [r7, #3]
 800114c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	333f      	adds	r3, #63	; 0x3f
 800115e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	78bb      	ldrb	r3, [r7, #2]
 8001168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	333a      	adds	r3, #58	; 0x3a
 800117c:	4602      	mov	r2, r0
 800117e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da0a      	bge.n	800119e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001188:	78fa      	ldrb	r2, [r7, #3]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	440b      	add	r3, r1
 8001196:	333b      	adds	r3, #59	; 0x3b
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e009      	b.n	80011b2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	440b      	add	r3, r1
 80011ac:	333b      	adds	r3, #59	; 0x3b
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	333c      	adds	r3, #60	; 0x3c
 80011c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	787c      	ldrb	r4, [r7, #1]
 80011ce:	78ba      	ldrb	r2, [r7, #2]
 80011d0:	78f9      	ldrb	r1, [r7, #3]
 80011d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4623      	mov	r3, r4
 80011e4:	f003 fba4 	bl	8004930 <USB_HC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_HCD_HC_Halt+0x1e>
 8001218:	2302      	movs	r3, #2
 800121a:	e00f      	b.n	800123c <HAL_HCD_HC_Halt+0x3e>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	78fa      	ldrb	r2, [r7, #3]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fddc 	bl	8004dea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4603      	mov	r3, r0
 8001254:	70fb      	strb	r3, [r7, #3]
 8001256:	460b      	mov	r3, r1
 8001258:	70bb      	strb	r3, [r7, #2]
 800125a:	4613      	mov	r3, r2
 800125c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	333b      	adds	r3, #59	; 0x3b
 800126e:	78ba      	ldrb	r2, [r7, #2]
 8001270:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	440b      	add	r3, r1
 8001280:	333f      	adds	r3, #63	; 0x3f
 8001282:	787a      	ldrb	r2, [r7, #1]
 8001284:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001286:	7c3b      	ldrb	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d114      	bne.n	80012b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3342      	adds	r3, #66	; 0x42
 800129c:	2203      	movs	r2, #3
 800129e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	333d      	adds	r3, #61	; 0x3d
 80012b0:	7f3a      	ldrb	r2, [r7, #28]
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e009      	b.n	80012ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3342      	adds	r3, #66	; 0x42
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	f200 80d6 	bhi.w	800147e <HAL_HCD_HC_SubmitRequest+0x23a>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	08001469 	.word	0x08001469
 80012e0:	08001355 	.word	0x08001355
 80012e4:	080013df 	.word	0x080013df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80012e8:	7c3b      	ldrb	r3, [r7, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	f040 80c9 	bne.w	8001482 <HAL_HCD_HC_SubmitRequest+0x23e>
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 80c5 	bne.w	8001482 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80012f8:	8b3b      	ldrh	r3, [r7, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	3351      	adds	r3, #81	; 0x51
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	3351      	adds	r3, #81	; 0x51
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10a      	bne.n	800133e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001328:	78fa      	ldrb	r2, [r7, #3]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3342      	adds	r3, #66	; 0x42
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800133c:	e0a1      	b.n	8001482 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	3342      	adds	r3, #66	; 0x42
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
      break;
 8001352:	e096      	b.n	8001482 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001354:	78bb      	ldrb	r3, [r7, #2]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d120      	bne.n	800139c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3351      	adds	r3, #81	; 0x51
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001370:	78fa      	ldrb	r2, [r7, #3]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3342      	adds	r3, #66	; 0x42
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001384:	e07e      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	3342      	adds	r3, #66	; 0x42
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
      break;
 800139a:	e073      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3350      	adds	r3, #80	; 0x50
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10a      	bne.n	80013c8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3342      	adds	r3, #66	; 0x42
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
      break;
 80013c6:	e05d      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3342      	adds	r3, #66	; 0x42
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
      break;
 80013dc:	e052      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80013de:	78bb      	ldrb	r3, [r7, #2]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d120      	bne.n	8001426 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013e4:	78fa      	ldrb	r2, [r7, #3]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3351      	adds	r3, #81	; 0x51
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10a      	bne.n	8001410 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	440b      	add	r3, r1
 8001408:	3342      	adds	r3, #66	; 0x42
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800140e:	e039      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	3342      	adds	r3, #66	; 0x42
 8001420:	2202      	movs	r2, #2
 8001422:	701a      	strb	r2, [r3, #0]
      break;
 8001424:	e02e      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	3350      	adds	r3, #80	; 0x50
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10a      	bne.n	8001452 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	3342      	adds	r3, #66	; 0x42
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
      break;
 8001450:	e018      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3342      	adds	r3, #66	; 0x42
 8001462:	2202      	movs	r2, #2
 8001464:	701a      	strb	r2, [r3, #0]
      break;
 8001466:	e00d      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	3342      	adds	r3, #66	; 0x42
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
      break;
 800147c:	e002      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800147e:	bf00      	nop
 8001480:	e000      	b.n	8001484 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001482:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	3344      	adds	r3, #68	; 0x44
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	8b39      	ldrh	r1, [r7, #24]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4403      	add	r3, r0
 80014a8:	3348      	adds	r3, #72	; 0x48
 80014aa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014ac:	78fa      	ldrb	r2, [r7, #3]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	335c      	adds	r3, #92	; 0x5c
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	334c      	adds	r3, #76	; 0x4c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d4:	78fa      	ldrb	r2, [r7, #3]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	3339      	adds	r3, #57	; 0x39
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	335d      	adds	r3, #93	; 0x5d
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	3338      	adds	r3, #56	; 0x38
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	18d1      	adds	r1, r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	f003 fb14 	bl	8004b44 <USB_HC_StartXfer>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f831 	bl	80045a6 <USB_GetMode>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	f040 80ef 	bne.w	800172a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f815 	bl	8004580 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80e5 	beq.w	8001728 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f80c 	bl	8004580 <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001572:	d104      	bne.n	800157e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800157c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fffc 	bl	8004580 <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001592:	d104      	bne.n	800159e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800159c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 ffec 	bl	8004580 <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015b2:	d104      	bne.n	80015be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 ffdc 	bl	8004580 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d103      	bne.n	80015da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ffce 	bl	8004580 <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ee:	d115      	bne.n	800161c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f006 f89a 	bl	8007744 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f8c4 	bl	80047a4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f002 ffad 	bl	8004580 <USB_ReadInterrupts>
 8001626:	4603      	mov	r3, r0
 8001628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001630:	d102      	bne.n	8001638 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 f968 	bl	8002908 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 ff9f 	bl	8004580 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b08      	cmp	r3, #8
 800164a:	d106      	bne.n	800165a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f006 f85d 	bl	800770c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2208      	movs	r2, #8
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ff8e 	bl	8004580 <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800166e:	d138      	bne.n	80016e2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fba7 	bl	8004dc8 <USB_HC_ReadInterrupt>
 800167a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e025      	b.n	80016ce <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d018      	beq.n	80016c8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ac:	d106      	bne.n	80016bc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8cf 	bl	8001858 <HCD_HC_IN_IRQHandler>
 80016ba:	e005      	b.n	80016c8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fcfd 	bl	80020c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3d4      	bcc.n	8001682 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff4a 	bl	8004580 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d101      	bne.n	80016fa <HAL_HCD_IRQHandler+0x1d2>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_HCD_IRQHandler+0x1d4>
 80016fa:	2300      	movs	r3, #0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d014      	beq.n	800172a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0210 	bic.w	r2, r2, #16
 800170e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f001 f84b 	bl	80027ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	699a      	ldr	r2, [r3, #24]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	e000      	b.n	800172a <HAL_HCD_IRQHandler+0x202>
      return;
 8001728:	bf00      	nop
    }
  }
}
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_HCD_Start+0x16>
 8001742:	2302      	movs	r3, #2
 8001744:	e013      	b.n	800176e <HAL_HCD_Start+0x3e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fe21 	bl	800439a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f884 	bl	800486c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_HCD_Stop+0x16>
 8001788:	2302      	movs	r3, #2
 800178a:	e00d      	b.n	80017a8 <HAL_HCD_Stop+0x32>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fc61 	bl	8005060 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 f82b 	bl	8004818 <USB_ResetPort>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	335c      	adds	r3, #92	; 0x5c
 80017e8:	781b      	ldrb	r3, [r3, #0]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	334c      	adds	r3, #76	; 0x4c
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f86d 	bl	800490c <USB_GetCurrentFrame>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f848 	bl	80048de <USB_GetHostSpeed>
 800184e:	4603      	mov	r3, r0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4413      	add	r3, r2
 800187a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b04      	cmp	r3, #4
 8001886:	d119      	bne.n	80018bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001894:	461a      	mov	r2, r3
 8001896:	2304      	movs	r3, #4
 8001898:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	0151      	lsls	r1, r2, #5
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	440a      	add	r2, r1
 80018b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	60d3      	str	r3, [r2, #12]
 80018ba:	e0ce      	b.n	8001a5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d2:	d12c      	bne.n	800192e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	461a      	mov	r2, r3
 80018e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	335d      	adds	r3, #93	; 0x5d
 80018f8:	2207      	movs	r2, #7
 80018fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	0151      	lsls	r1, r2, #5
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	440a      	add	r2, r1
 8001912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fa5f 	bl	8004dea <USB_HC_Halt>
 800192c:	e095      	b.n	8001a5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b20      	cmp	r3, #32
 8001942:	d109      	bne.n	8001958 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	461a      	mov	r2, r3
 8001952:	2320      	movs	r3, #32
 8001954:	6093      	str	r3, [r2, #8]
 8001956:	e080      	b.n	8001a5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d134      	bne.n	80019d8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	0151      	lsls	r1, r2, #5
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	440a      	add	r2, r1
 8001984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	335d      	adds	r3, #93	; 0x5d
 800199e:	2205      	movs	r2, #5
 80019a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ae:	461a      	mov	r2, r3
 80019b0:	2310      	movs	r3, #16
 80019b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c0:	461a      	mov	r2, r3
 80019c2:	2308      	movs	r3, #8
 80019c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fa0a 	bl	8004dea <USB_HC_Halt>
 80019d6:	e040      	b.n	8001a5a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	d134      	bne.n	8001a5a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	0151      	lsls	r1, r2, #5
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	440a      	add	r2, r1
 8001a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f9e5 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2310      	movs	r3, #16
 8001a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	335d      	adds	r3, #93	; 0x5d
 8001a42:	2208      	movs	r2, #8
 8001a44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	015a      	lsls	r2, r3, #5
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a52:	461a      	mov	r2, r3
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d122      	bne.n	8001ab8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	0151      	lsls	r1, r2, #5
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	440a      	add	r2, r1
 8001a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 f9a4 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ab6:	e300      	b.n	80020ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	f040 80fd 	bne.w	8001cca <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3348      	adds	r3, #72	; 0x48
 8001ae8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0159      	lsls	r1, r3, #5
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	440b      	add	r3, r1
 8001af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001afc:	1ad1      	subs	r1, r2, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4403      	add	r3, r0
 8001b0c:	334c      	adds	r3, #76	; 0x4c
 8001b0e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	335d      	adds	r3, #93	; 0x5d
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3358      	adds	r3, #88	; 0x58
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	461a      	mov	r2, r3
 8001b46:	2301      	movs	r3, #1
 8001b48:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	333f      	adds	r3, #63	; 0x3f
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	333f      	adds	r3, #63	; 0x3f
 8001b70:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d121      	bne.n	8001bba <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	0151      	lsls	r1, r2, #5
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	440a      	add	r2, r1
 8001b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f922 	bl	8004dea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	6093      	str	r3, [r2, #8]
 8001bb8:	e070      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	333f      	adds	r3, #63	; 0x3f
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d12a      	bne.n	8001c26 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	0151      	lsls	r1, r2, #5
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	440a      	add	r2, r1
 8001be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	335c      	adds	r3, #92	; 0x5c
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	b2d8      	uxtb	r0, r3
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	335c      	adds	r3, #92	; 0x5c
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f005 fd9e 	bl	8007760 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c24:	e03a      	b.n	8001c9c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	333f      	adds	r3, #63	; 0x3f
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d12f      	bne.n	8001c9c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	335c      	adds	r3, #92	; 0x5c
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3350      	adds	r3, #80	; 0x50
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f083 0301 	eor.w	r3, r3, #1
 8001c66:	b2d8      	uxtb	r0, r3
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	3350      	adds	r3, #80	; 0x50
 8001c78:	4602      	mov	r2, r0
 8001c7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	b2d8      	uxtb	r0, r3
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	335c      	adds	r3, #92	; 0x5c
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4601      	mov	r1, r0
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f005 fd62 	bl	8007760 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	3350      	adds	r3, #80	; 0x50
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2d8      	uxtb	r0, r3
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3350      	adds	r3, #80	; 0x50
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	e1f7      	b.n	80020ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	f040 811a 	bne.w	8001f16 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cfc:	f023 0302 	bic.w	r3, r3, #2
 8001d00:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	335d      	adds	r3, #93	; 0x5d
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10a      	bne.n	8001d2e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	335c      	adds	r3, #92	; 0x5c
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	e0d9      	b.n	8001ee2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	335d      	adds	r3, #93	; 0x5d
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d10a      	bne.n	8001d5a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	335c      	adds	r3, #92	; 0x5c
 8001d54:	2205      	movs	r2, #5
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e0c3      	b.n	8001ee2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	335d      	adds	r3, #93	; 0x5d
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	d00a      	beq.n	8001d86 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335d      	adds	r3, #93	; 0x5d
 8001d80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d156      	bne.n	8001e34 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3358      	adds	r3, #88	; 0x58
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c59      	adds	r1, r3, #1
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4403      	add	r3, r0
 8001da8:	3358      	adds	r3, #88	; 0x58
 8001daa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	3358      	adds	r3, #88	; 0x58
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d914      	bls.n	8001dec <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3358      	adds	r3, #88	; 0x58
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	335c      	adds	r3, #92	; 0x5c
 8001de6:	2204      	movs	r2, #4
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e009      	b.n	8001e00 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	335c      	adds	r3, #92	; 0x5c
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e056      	b.n	8001ee2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	335d      	adds	r3, #93	; 0x5d
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d123      	bne.n	8001e92 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	335c      	adds	r3, #92	; 0x5c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e74:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e7c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e027      	b.n	8001ee2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	335d      	adds	r3, #93	; 0x5d
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b07      	cmp	r3, #7
 8001ea6:	d11c      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3358      	adds	r3, #88	; 0x58
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4403      	add	r3, r0
 8001eca:	3358      	adds	r3, #88	; 0x58
 8001ecc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	335c      	adds	r3, #92	; 0x5c
 8001ede:	2204      	movs	r2, #4
 8001ee0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	b2d8      	uxtb	r0, r3
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	335c      	adds	r3, #92	; 0x5c
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f005 fc26 	bl	8007760 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f14:	e0d1      	b.n	80020ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d13e      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	0151      	lsls	r1, r2, #5
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	440a      	add	r2, r1
 8001f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	3358      	adds	r3, #88	; 0x58
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3358      	adds	r3, #88	; 0x58
 8001f70:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	335d      	adds	r3, #93	; 0x5d
 8001f82:	2206      	movs	r2, #6
 8001f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 ff2a 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	6093      	str	r3, [r2, #8]
}
 8001fa8:	e087      	b.n	80020ba <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d17c      	bne.n	80020ba <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	333f      	adds	r3, #63	; 0x3f
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d122      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3358      	adds	r3, #88	; 0x58
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	0151      	lsls	r1, r2, #5
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	440a      	add	r2, r1
 8002000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fee8 	bl	8004dea <USB_HC_Halt>
 800201a:	e045      	b.n	80020a8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	333f      	adds	r3, #63	; 0x3f
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	440b      	add	r3, r1
 8002040:	333f      	adds	r3, #63	; 0x3f
 8002042:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002044:	2b02      	cmp	r3, #2
 8002046:	d12f      	bne.n	80020a8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3358      	adds	r3, #88	; 0x58
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d121      	bne.n	80020a8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	335d      	adds	r3, #93	; 0x5d
 8002074:	2203      	movs	r2, #3
 8002076:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	0151      	lsls	r1, r2, #5
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	440a      	add	r2, r1
 800208e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fea1 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	461a      	mov	r2, r3
 80020b6:	2310      	movs	r3, #16
 80020b8:	6093      	str	r3, [r2, #8]
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d119      	bne.n	8002126 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2304      	movs	r3, #4
 8002102:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	0151      	lsls	r1, r2, #5
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	440a      	add	r2, r1
 800211a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002124:	e33e      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b20      	cmp	r3, #32
 800213a:	d141      	bne.n	80021c0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2320      	movs	r3, #32
 800214c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	333d      	adds	r3, #61	; 0x3d
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	f040 831f 	bne.w	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	333d      	adds	r3, #61	; 0x3d
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2202      	movs	r2, #2
 800218c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	0151      	lsls	r1, r2, #5
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	440a      	add	r2, r1
 80021a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fe16 	bl	8004dea <USB_HC_Halt>
}
 80021be:	e2f1      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d13f      	bne.n	8002256 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	335d      	adds	r3, #93	; 0x5d
 80021e6:	2204      	movs	r2, #4
 80021e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	333d      	adds	r3, #61	; 0x3d
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3358      	adds	r3, #88	; 0x58
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fdd4 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2340      	movs	r3, #64	; 0x40
 8002252:	6093      	str	r3, [r2, #8]
}
 8002254:	e2a6      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d122      	bne.n	80022b4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	0151      	lsls	r1, r2, #5
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	440a      	add	r2, r1
 8002284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fda6 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	6093      	str	r3, [r2, #8]
}
 80022b2:	e277      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d135      	bne.n	8002336 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3358      	adds	r3, #88	; 0x58
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	0151      	lsls	r1, r2, #5
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	440a      	add	r2, r1
 80022f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fd6e 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	461a      	mov	r2, r3
 800231c:	2301      	movs	r3, #1
 800231e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	335d      	adds	r3, #93	; 0x5d
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
}
 8002334:	e236      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d12b      	bne.n	80023a4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2308      	movs	r3, #8
 800235c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	440a      	add	r2, r1
 8002374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f002 fd2e 	bl	8004dea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	335d      	adds	r3, #93	; 0x5d
 800239e:	2205      	movs	r2, #5
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	e1ff      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d155      	bne.n	8002466 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3358      	adds	r3, #88	; 0x58
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	335d      	adds	r3, #93	; 0x5d
 80023de:	2203      	movs	r2, #3
 80023e0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	333d      	adds	r3, #61	; 0x3d
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	333c      	adds	r3, #60	; 0x3c
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	333d      	adds	r3, #61	; 0x3d
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f002 fccc 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2310      	movs	r3, #16
 8002462:	6093      	str	r3, [r2, #8]
}
 8002464:	e19e      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d12b      	bne.n	80024d4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	0151      	lsls	r1, r2, #5
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	440a      	add	r2, r1
 8002492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fc9f 	bl	8004dea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	335d      	adds	r3, #93	; 0x5d
 80024bc:	2206      	movs	r2, #6
 80024be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	6093      	str	r3, [r2, #8]
}
 80024d2:	e167      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d135      	bne.n	8002558 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	0151      	lsls	r1, r2, #5
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	440a      	add	r2, r1
 8002502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fc67 	bl	8004dea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	2310      	movs	r3, #16
 800252c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	461a      	mov	r2, r3
 800253c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002540:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	335d      	adds	r3, #93	; 0x5d
 8002552:	2208      	movs	r2, #8
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	e125      	b.n	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	f040 811a 	bne.w	80027a4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	0151      	lsls	r1, r2, #5
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	440a      	add	r2, r1
 8002586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258a:	f023 0302 	bic.w	r3, r3, #2
 800258e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	335d      	adds	r3, #93	; 0x5d
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d137      	bne.n	8002616 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	335c      	adds	r3, #92	; 0x5c
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	440b      	add	r3, r1
 80025c8:	333f      	adds	r3, #63	; 0x3f
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d00b      	beq.n	80025e8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	333f      	adds	r3, #63	; 0x3f
 80025e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f040 80c5 	bne.w	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	3351      	adds	r3, #81	; 0x51
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f083 0301 	eor.w	r3, r3, #1
 80025fe:	b2d8      	uxtb	r0, r3
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3351      	adds	r3, #81	; 0x51
 8002610:	4602      	mov	r2, r0
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e0ad      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	335d      	adds	r3, #93	; 0x5d
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d10a      	bne.n	8002642 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e097      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	335d      	adds	r3, #93	; 0x5d
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d10a      	bne.n	800266e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	335c      	adds	r3, #92	; 0x5c
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e081      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	335d      	adds	r3, #93	; 0x5d
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10a      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	2205      	movs	r2, #5
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e06b      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	335d      	adds	r3, #93	; 0x5d
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d00a      	beq.n	80026c6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	335d      	adds	r3, #93	; 0x5d
 80026c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d155      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	3358      	adds	r3, #88	; 0x58
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1c59      	adds	r1, r3, #1
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4403      	add	r3, r0
 80026e8:	3358      	adds	r3, #88	; 0x58
 80026ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3358      	adds	r3, #88	; 0x58
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d914      	bls.n	800272c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3358      	adds	r3, #88	; 0x58
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	2204      	movs	r2, #4
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e009      	b.n	8002740 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	335c      	adds	r3, #92	; 0x5c
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002756:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2302      	movs	r3, #2
 8002782:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b2d8      	uxtb	r0, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	4601      	mov	r1, r0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f004 ffde 	bl	8007760 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	0c5b      	lsrs	r3, r3, #17
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d004      	beq.n	80027f2 <HCD_RXQLVL_IRQHandler+0x46>
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	f000 8082 	beq.w	80028f4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027f0:	e083      	b.n	80028fa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d07f      	beq.n	80028f8 <HCD_RXQLVL_IRQHandler+0x14c>
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3344      	adds	r3, #68	; 0x44
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d074      	beq.n	80028f8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3344      	adds	r3, #68	; 0x44
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	b292      	uxth	r2, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f001 fe80 	bl	800452e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	3344      	adds	r3, #68	; 0x44
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	18d1      	adds	r1, r2, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4403      	add	r3, r0
 8002852:	3344      	adds	r3, #68	; 0x44
 8002854:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	334c      	adds	r3, #76	; 0x4c
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	18d1      	adds	r1, r2, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4403      	add	r3, r0
 800287a:	334c      	adds	r3, #76	; 0x4c
 800287c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HCD_RXQLVL_IRQHandler+0x158>)
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d031      	beq.n	80028f8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3350      	adds	r3, #80	; 0x50
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2d8      	uxtb	r0, r3
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3350      	adds	r3, #80	; 0x50
 80028ee:	4602      	mov	r2, r0
 80028f0:	701a      	strb	r2, [r3, #0]
      break;
 80028f2:	e001      	b.n	80028f8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80028f8:	bf00      	nop
  }
}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	1ff80000 	.word	0x1ff80000

08002908 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002934:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b02      	cmp	r3, #2
 800293e:	d10b      	bne.n	8002958 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f004 feec 	bl	8007728 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d132      	bne.n	80029c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d126      	bne.n	80029c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d113      	bne.n	80029a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002986:	d106      	bne.n	8002996 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2102      	movs	r1, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 ff08 	bl	80047a4 <USB_InitFSLSPClkSel>
 8002994:	e011      	b.n	80029ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f001 ff01 	bl	80047a4 <USB_InitFSLSPClkSel>
 80029a2:	e00a      	b.n	80029ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d106      	bne.n	80029ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b2:	461a      	mov	r2, r3
 80029b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f004 fede 	bl	800777c <HAL_HCD_PortEnabled_Callback>
 80029c0:	e002      	b.n	80029c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f004 fee8 	bl	8007798 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d103      	bne.n	80029da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e25b      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4ba0      	ldr	r3, [pc, #640]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b9d      	ldr	r3, [pc, #628]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b99      	ldr	r3, [pc, #612]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e236      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4b91      	ldr	r3, [pc, #580]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a83      	ldr	r2, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b81      	ldr	r3, [pc, #516]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd ff96 	bl	80009d8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7fd ff92 	bl	80009d8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1fb      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fd ff82 	bl	80009d8 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7fd ff7e 	bl	80009d8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1e7      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b5c      	ldr	r3, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1bb      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b56      	ldr	r3, [pc, #344]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4952      	ldr	r1, [pc, #328]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fd ff37 	bl	80009d8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fd ff33 	bl	80009d8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e19c      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4940      	ldr	r1, [pc, #256]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_OscConfig+0x2b0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fd ff16 	bl	80009d8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fd ff12 	bl	80009d8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e17b      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fd fef6 	bl	80009d8 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fd fef2 	bl	80009d8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e15b      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e015      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x2b4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fd fedf 	bl	80009d8 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fd fedb 	bl	80009d8 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e144      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a0 	beq.w	8002d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fd fea1 	bl	80009d8 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e011      	b.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
 8002ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fd fe94 	bl	80009d8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0fd      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b81      	ldr	r3, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x4d4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a7c      	ldr	r2, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002ce8:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a76      	ldr	r2, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	4b74      	ldr	r3, [pc, #464]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a73      	ldr	r2, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x32a>
 8002d02:	4b71      	ldr	r3, [pc, #452]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a70      	ldr	r2, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0e:	4b6e      	ldr	r3, [pc, #440]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a6d      	ldr	r2, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fd fe59 	bl	80009d8 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fe55 	bl	80009d8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0bc      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x33a>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fe43 	bl	80009d8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fd fe3f 	bl	80009d8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0a6      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8092 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d05c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d141      	bne.n	8002e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fd fe13 	bl	80009d8 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fd fe0f 	bl	80009d8 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e078      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	4933      	ldr	r1, [pc, #204]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfe:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fd fde8 	bl	80009d8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fd fde4 	bl	80009d8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e04d      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x41c>
 8002e2a:	e045      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4dc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fdd1 	bl	80009d8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fd fdcd 	bl	80009d8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e036      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002e58:	e02e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e029      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_RCC_OscConfig+0x4d8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d115      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470060 	.word	0x42470060

08002ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0cc      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d90c      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0b8      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f24:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f48:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	494d      	ldr	r1, [pc, #308]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d044      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d119      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e067      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b37      	ldr	r3, [pc, #220]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4934      	ldr	r1, [pc, #208]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fd fd0a 	bl	80009d8 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fd fd06 	bl	80009d8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04f      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20c      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e032      	b.n	800307e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4916      	ldr	r1, [pc, #88]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	490e      	ldr	r1, [pc, #56]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003056:	f000 f821 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	490a      	ldr	r1, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fc6a 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800
 8003090:	08007fa8 	.word	0x08007fa8
 8003094:	20000000 	.word	0x20000000
 8003098:	20000004 	.word	0x20000004

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	2300      	movs	r3, #0
 80030ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b4:	4b67      	ldr	r3, [pc, #412]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d00d      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x40>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	f200 80bd 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ce:	e0b7      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d2:	60bb      	str	r3, [r7, #8]
       break;
 80030d4:	e0b7      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d6:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030d8:	60bb      	str	r3, [r7, #8]
      break;
 80030da:	e0b4      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030dc:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e6:	4b5b      	ldr	r3, [pc, #364]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04d      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f2:	4b58      	ldr	r3, [pc, #352]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	461a      	mov	r2, r3
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	ea02 0800 	and.w	r8, r2, r0
 800310a:	ea03 0901 	and.w	r9, r3, r1
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	014b      	lsls	r3, r1, #5
 800311c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003120:	0142      	lsls	r2, r0, #5
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	ebb0 0008 	subs.w	r0, r0, r8
 800312a:	eb61 0109 	sbc.w	r1, r1, r9
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800313c:	0182      	lsls	r2, r0, #6
 800313e:	1a12      	subs	r2, r2, r0
 8003140:	eb63 0301 	sbc.w	r3, r3, r1
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	00d9      	lsls	r1, r3, #3
 800314e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003152:	00d0      	lsls	r0, r2, #3
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	eb12 0208 	adds.w	r2, r2, r8
 800315c:	eb43 0309 	adc.w	r3, r3, r9
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0259      	lsls	r1, r3, #9
 800316a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800316e:	0250      	lsls	r0, r2, #9
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd f834 	bl	80001ec <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e04a      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	ea02 0400 	and.w	r4, r2, r0
 80031a6:	ea03 0501 	and.w	r5, r3, r1
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	014b      	lsls	r3, r1, #5
 80031b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031bc:	0142      	lsls	r2, r0, #5
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	1b00      	subs	r0, r0, r4
 80031c4:	eb61 0105 	sbc.w	r1, r1, r5
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	018b      	lsls	r3, r1, #6
 80031d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031d6:	0182      	lsls	r2, r0, #6
 80031d8:	1a12      	subs	r2, r2, r0
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	00d9      	lsls	r1, r3, #3
 80031e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ec:	00d0      	lsls	r0, r2, #3
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	1912      	adds	r2, r2, r4
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	0299      	lsls	r1, r3, #10
 8003202:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003206:	0290      	lsls	r0, r2, #10
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f7fc ffe8 	bl	80001ec <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60bb      	str	r3, [r7, #8]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003242:	60bb      	str	r3, [r7, #8]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	68bb      	ldr	r3, [r7, #8]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200

08003260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCC_GetHCLKFreq+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff0 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0a9b      	lsrs	r3, r3, #10
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08007fb8 	.word	0x08007fb8

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffdc 	bl	8003260 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0b5b      	lsrs	r3, r3, #13
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08007fb8 	.word	0x08007fb8

080032c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e03f      	b.n	800335a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fa0e 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2224      	movs	r2, #36	; 0x24
 80032f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fc47 	bl	8003ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b088      	sub	sp, #32
 8003366:	af02      	add	r7, sp, #8
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 8083 	bne.w	800348a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_UART_Transmit+0x2e>
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e07b      	b.n	800348c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Transmit+0x40>
 800339e:	2302      	movs	r3, #2
 80033a0:	e074      	b.n	800348c <HAL_UART_Transmit+0x12a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2221      	movs	r2, #33	; 0x21
 80033b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033b8:	f7fd fb0e 	bl	80009d8 <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033d2:	e042      	b.n	800345a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	d122      	bne.n	8003432 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa66 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e042      	b.n	800348c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003418:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d103      	bne.n	800342a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3302      	adds	r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e017      	b.n	800345a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3301      	adds	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e013      	b.n	800345a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fa43 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e01f      	b.n	800348c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1b7      	bne.n	80033d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2200      	movs	r2, #0
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa2a 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e006      	b.n	800348c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	f040 8090 	bne.w	80035d6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_UART_Receive+0x2e>
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e088      	b.n	80035d8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UART_Receive+0x40>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e081      	b.n	80035d8 <HAL_UART_Receive+0x144>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2222      	movs	r2, #34	; 0x22
 80034e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ea:	f7fd fa75 	bl	80009d8 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	88fa      	ldrh	r2, [r7, #6]
 80034f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	88fa      	ldrh	r2, [r7, #6]
 80034fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003504:	e05c      	b.n	80035c0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d12b      	bne.n	8003576 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2120      	movs	r1, #32
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f9cd 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e04f      	b.n	80035d8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10c      	bne.n	800355e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	b29a      	uxth	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3302      	adds	r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e030      	b.n	80035c0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b29b      	uxth	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b29a      	uxth	r2, r3
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	3301      	adds	r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	e024      	b.n	80035c0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2120      	movs	r1, #32
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f9a1 	bl	80038c8 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e023      	b.n	80035d8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	60ba      	str	r2, [r7, #8]
 80035a4:	b2ca      	uxtb	r2, r1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1c59      	adds	r1, r3, #1
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19d      	bne.n	8003506 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d140      	bne.n	800367c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_Receive_IT+0x26>
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e039      	b.n	800367e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_UART_Receive_IT+0x38>
 8003614:	2302      	movs	r3, #2
 8003616:	e032      	b.n	800367e <HAL_UART_Receive_IT+0x9e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2222      	movs	r2, #34	; 0x22
 800363c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003656:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0220 	orr.w	r2, r2, #32
 8003676:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10d      	bne.n	80036de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_UART_IRQHandler+0x52>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9e0 	bl	8003a9c <UART_Receive_IT>
      return;
 80036dc:	e0d0      	b.n	8003880 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b0 	beq.w	8003846 <HAL_UART_IRQHandler+0x1ba>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_UART_IRQHandler+0x70>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80a5 	beq.w	8003846 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_UART_IRQHandler+0x90>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_UART_IRQHandler+0xb0>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	f043 0202 	orr.w	r2, r3, #2
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_UART_IRQHandler+0xd0>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	f043 0204 	orr.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00f      	beq.n	8003786 <HAL_UART_IRQHandler+0xfa>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_UART_IRQHandler+0xee>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	f043 0208 	orr.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d077      	beq.n	800387e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_UART_IRQHandler+0x11c>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f97a 	bl	8003a9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_UART_IRQHandler+0x144>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d031      	beq.n	8003834 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8c3 	bl	800395c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d123      	bne.n	800382c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <HAL_UART_IRQHandler+0x1fc>)
 8003802:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fa26 	bl	8000c5a <HAL_DMA_Abort_IT>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800381e:	4610      	mov	r0, r2
 8003820:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	e00e      	b.n	8003842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f845 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382a:	e00a      	b.n	8003842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f841 	bl	80038b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003832:	e006      	b.n	8003842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f83d 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003840:	e01d      	b.n	800387e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003842:	bf00      	nop
    return;
 8003844:	e01b      	b.n	800387e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x1d6>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8b0 	bl	80039c0 <UART_Transmit_IT>
    return;
 8003860:	e00e      	b.n	8003880 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_UART_IRQHandler+0x1f4>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8f8 	bl	8003a6c <UART_EndTransmit_IT>
    return;
 800387c:	e000      	b.n	8003880 <HAL_UART_IRQHandler+0x1f4>
    return;
 800387e:	bf00      	nop
  }
}
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	08003999 	.word	0x08003999

0800388c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	e02c      	b.n	8003934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d028      	beq.n	8003934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038e8:	f7fd f876 	bl	80009d8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d21d      	bcs.n	8003934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e00f      	b.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	429a      	cmp	r2, r3
 8003950:	d0c3      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003972:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff ff7e 	bl	80038b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b21      	cmp	r3, #33	; 0x21
 80039d2:	d144      	bne.n	8003a5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d11a      	bne.n	8003a14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]
 8003a06:	e00e      	b.n	8003a26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]
 8003a12:	e008      	b.n	8003a26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6211      	str	r1, [r2, #32]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4619      	mov	r1, r3
 8003a34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fefd 	bl	800388c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b22      	cmp	r3, #34	; 0x22
 8003aae:	d171      	bne.n	8003b94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d123      	bne.n	8003b02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	1c9a      	adds	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e029      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
 8003b00:	e01b      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6858      	ldr	r0, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6291      	str	r1, [r2, #40]	; 0x28
 8003b1a:	b2c2      	uxtb	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e00c      	b.n	8003b3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	1c58      	adds	r0, r3, #1
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	6288      	str	r0, [r1, #40]	; 0x28
 8003b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4619      	mov	r1, r3
 8003b48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d120      	bne.n	8003b90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0220 	bic.w	r2, r2, #32
 8003b5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fe8a 	bl	80038a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e002      	b.n	8003b96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0bd      	sub	sp, #244	; 0xf4
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	ea40 0301 	orr.w	r3, r0, r1
 8003bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf8:	f021 010c 	bic.w	r1, r1, #12
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003c06:	430b      	orrs	r3, r1
 8003c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1a:	6999      	ldr	r1, [r3, #24]
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	ea40 0301 	orr.w	r3, r0, r1
 8003c26:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c32:	f040 81a5 	bne.w	8003f80 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4bcd      	ldr	r3, [pc, #820]	; (8003f74 <UART_SetConfig+0x3d4>)
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d006      	beq.n	8003c50 <UART_SetConfig+0xb0>
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4bcb      	ldr	r3, [pc, #812]	; (8003f78 <UART_SetConfig+0x3d8>)
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f040 80cb 	bne.w	8003de6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c50:	f7ff fb26 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8003c54:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	f04f 0500 	mov.w	r5, #0
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	1891      	adds	r1, r2, r2
 8003c68:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c76:	1912      	adds	r2, r2, r4
 8003c78:	eb45 0303 	adc.w	r3, r5, r3
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	00d9      	lsls	r1, r3, #3
 8003c86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c8a:	00d0      	lsls	r0, r2, #3
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	1911      	adds	r1, r2, r4
 8003c92:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003c96:	416b      	adcs	r3, r5
 8003c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003cb8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003cbc:	f7fc fa96 	bl	80001ec <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	011e      	lsls	r6, r3, #4
 8003cce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cd2:	461c      	mov	r4, r3
 8003cd4:	f04f 0500 	mov.w	r5, #0
 8003cd8:	4622      	mov	r2, r4
 8003cda:	462b      	mov	r3, r5
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	67b9      	str	r1, [r7, #120]	; 0x78
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ce4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003ce8:	1912      	adds	r2, r2, r4
 8003cea:	eb45 0303 	adc.w	r3, r5, r3
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	00d9      	lsls	r1, r3, #3
 8003cf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cfc:	00d0      	lsls	r0, r2, #3
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	1911      	adds	r1, r2, r4
 8003d04:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003d08:	416b      	adcs	r3, r5
 8003d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	1891      	adds	r1, r2, r2
 8003d1c:	6739      	str	r1, [r7, #112]	; 0x70
 8003d1e:	415b      	adcs	r3, r3
 8003d20:	677b      	str	r3, [r7, #116]	; 0x74
 8003d22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d26:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003d2a:	f7fc fa5f 	bl	80001ec <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	; 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	3332      	adds	r3, #50	; 0x32
 8003d46:	4a8d      	ldr	r2, [pc, #564]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d54:	441e      	add	r6, r3
 8003d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	1894      	adds	r4, r2, r2
 8003d66:	66bc      	str	r4, [r7, #104]	; 0x68
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003d70:	1812      	adds	r2, r2, r0
 8003d72:	eb41 0303 	adc.w	r3, r1, r3
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	f04f 0500 	mov.w	r5, #0
 8003d7e:	00dd      	lsls	r5, r3, #3
 8003d80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d84:	00d4      	lsls	r4, r2, #3
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	1814      	adds	r4, r2, r0
 8003d8c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003d90:	414b      	adcs	r3, r1
 8003d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	6639      	str	r1, [r7, #96]	; 0x60
 8003da6:	415b      	adcs	r3, r3
 8003da8:	667b      	str	r3, [r7, #100]	; 0x64
 8003daa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003db2:	f7fc fa1b 	bl	80001ec <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 0207 	and.w	r2, r3, #7
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4432      	add	r2, r6
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	e26d      	b.n	80042c2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de6:	f7ff fa47 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8003dea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003df2:	461c      	mov	r4, r3
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e00:	415b      	adcs	r3, r3
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e08:	1912      	adds	r2, r2, r4
 8003e0a:	eb45 0303 	adc.w	r3, r5, r3
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	00d9      	lsls	r1, r3, #3
 8003e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e1c:	00d0      	lsls	r0, r2, #3
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	1911      	adds	r1, r2, r4
 8003e24:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003e28:	416b      	adcs	r3, r5
 8003e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	461a      	mov	r2, r3
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	6539      	str	r1, [r7, #80]	; 0x50
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	657b      	str	r3, [r7, #84]	; 0x54
 8003e42:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e46:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003e4a:	f7fc f9cf 	bl	80001ec <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4b4a      	ldr	r3, [pc, #296]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003e54:	fba3 2302 	umull	r2, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	011e      	lsls	r6, r3, #4
 8003e5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e60:	461c      	mov	r4, r3
 8003e62:	f04f 0500 	mov.w	r5, #0
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e76:	1912      	adds	r2, r2, r4
 8003e78:	eb45 0303 	adc.w	r3, r5, r3
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	00d9      	lsls	r1, r3, #3
 8003e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8a:	00d0      	lsls	r0, r2, #3
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	1911      	adds	r1, r2, r4
 8003e92:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003e96:	416b      	adcs	r3, r5
 8003e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	6439      	str	r1, [r7, #64]	; 0x40
 8003eac:	415b      	adcs	r3, r3
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eb4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003eb8:	f7fc f998 	bl	80001ec <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2164      	movs	r1, #100	; 0x64
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ee2:	441e      	add	r6, r3
 8003ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	1894      	adds	r4, r2, r2
 8003ef4:	63bc      	str	r4, [r7, #56]	; 0x38
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003efe:	1812      	adds	r2, r2, r0
 8003f00:	eb41 0303 	adc.w	r3, r1, r3
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	f04f 0500 	mov.w	r5, #0
 8003f0c:	00dd      	lsls	r5, r3, #3
 8003f0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f12:	00d4      	lsls	r4, r2, #3
 8003f14:	4622      	mov	r2, r4
 8003f16:	462b      	mov	r3, r5
 8003f18:	1814      	adds	r4, r2, r0
 8003f1a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003f1e:	414b      	adcs	r3, r1
 8003f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	6339      	str	r1, [r7, #48]	; 0x30
 8003f34:	415b      	adcs	r3, r3
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f3c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f40:	f7fc f954 	bl	80001ec <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <UART_SetConfig+0x3dc>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 0207 	and.w	r2, r3, #7
 8003f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4432      	add	r2, r6
 8003f70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f72:	e1a6      	b.n	80042c2 <UART_SetConfig+0x722>
 8003f74:	40011000 	.word	0x40011000
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4bd1      	ldr	r3, [pc, #836]	; (80042cc <UART_SetConfig+0x72c>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d006      	beq.n	8003f9a <UART_SetConfig+0x3fa>
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4bcf      	ldr	r3, [pc, #828]	; (80042d0 <UART_SetConfig+0x730>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 80ca 	bne.w	800412e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7ff f981 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8003f9e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	f04f 0500 	mov.w	r5, #0
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	1891      	adds	r1, r2, r2
 8003fb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fb4:	415b      	adcs	r3, r3
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbc:	1912      	adds	r2, r2, r4
 8003fbe:	eb45 0303 	adc.w	r3, r5, r3
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	00d9      	lsls	r1, r3, #3
 8003fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fd0:	00d0      	lsls	r0, r2, #3
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	eb12 0a04 	adds.w	sl, r2, r4
 8003fda:	eb43 0b05 	adc.w	fp, r3, r5
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ff8:	0082      	lsls	r2, r0, #2
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	f7fc f8f5 	bl	80001ec <__aeabi_uldivmod>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4bb3      	ldr	r3, [pc, #716]	; (80042d4 <UART_SetConfig+0x734>)
 8004008:	fba3 2302 	umull	r2, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	011e      	lsls	r6, r3, #4
 8004010:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004014:	4618      	mov	r0, r3
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	1894      	adds	r4, r2, r2
 8004020:	623c      	str	r4, [r7, #32]
 8004022:	415b      	adcs	r3, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800402a:	1812      	adds	r2, r2, r0
 800402c:	eb41 0303 	adc.w	r3, r1, r3
 8004030:	f04f 0400 	mov.w	r4, #0
 8004034:	f04f 0500 	mov.w	r5, #0
 8004038:	00dd      	lsls	r5, r3, #3
 800403a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403e:	00d4      	lsls	r4, r2, #3
 8004040:	4622      	mov	r2, r4
 8004042:	462b      	mov	r3, r5
 8004044:	1814      	adds	r4, r2, r0
 8004046:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800404a:	414b      	adcs	r3, r1
 800404c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	008b      	lsls	r3, r1, #2
 8004066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800406a:	0082      	lsls	r2, r0, #2
 800406c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004070:	f7fc f8bc 	bl	80001ec <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <UART_SetConfig+0x734>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a91      	ldr	r2, [pc, #580]	; (80042d4 <UART_SetConfig+0x734>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004098:	441e      	add	r6, r3
 800409a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800409e:	4618      	mov	r0, r3
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	1894      	adds	r4, r2, r2
 80040aa:	61bc      	str	r4, [r7, #24]
 80040ac:	415b      	adcs	r3, r3
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b4:	1812      	adds	r2, r2, r0
 80040b6:	eb41 0303 	adc.w	r3, r1, r3
 80040ba:	f04f 0400 	mov.w	r4, #0
 80040be:	f04f 0500 	mov.w	r5, #0
 80040c2:	00dd      	lsls	r5, r3, #3
 80040c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c8:	00d4      	lsls	r4, r2, #3
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	1814      	adds	r4, r2, r0
 80040d0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80040d4:	414b      	adcs	r3, r1
 80040d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040f4:	0082      	lsls	r2, r0, #2
 80040f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80040fa:	f7fc f877 	bl	80001ec <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4b74      	ldr	r3, [pc, #464]	; (80042d4 <UART_SetConfig+0x734>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a6f      	ldr	r2, [pc, #444]	; (80042d4 <UART_SetConfig+0x734>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4432      	add	r2, r6
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	e0c9      	b.n	80042c2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800412e:	f7ff f8a3 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004132:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800413a:	461c      	mov	r4, r3
 800413c:	f04f 0500 	mov.w	r5, #0
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	1891      	adds	r1, r2, r2
 8004146:	6139      	str	r1, [r7, #16]
 8004148:	415b      	adcs	r3, r3
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004150:	1912      	adds	r2, r2, r4
 8004152:	eb45 0303 	adc.w	r3, r5, r3
 8004156:	f04f 0000 	mov.w	r0, #0
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	00d9      	lsls	r1, r3, #3
 8004160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004164:	00d0      	lsls	r0, r2, #3
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	eb12 0804 	adds.w	r8, r2, r4
 800416e:	eb43 0905 	adc.w	r9, r3, r5
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	008b      	lsls	r3, r1, #2
 8004188:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800418c:	0082      	lsls	r2, r0, #2
 800418e:	4640      	mov	r0, r8
 8004190:	4649      	mov	r1, r9
 8004192:	f7fc f82b 	bl	80001ec <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4b4e      	ldr	r3, [pc, #312]	; (80042d4 <UART_SetConfig+0x734>)
 800419c:	fba3 2302 	umull	r2, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	011e      	lsls	r6, r3, #4
 80041a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041a8:	4618      	mov	r0, r3
 80041aa:	f04f 0100 	mov.w	r1, #0
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	1894      	adds	r4, r2, r2
 80041b4:	60bc      	str	r4, [r7, #8]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041be:	1812      	adds	r2, r2, r0
 80041c0:	eb41 0303 	adc.w	r3, r1, r3
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	f04f 0500 	mov.w	r5, #0
 80041cc:	00dd      	lsls	r5, r3, #3
 80041ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d2:	00d4      	lsls	r4, r2, #3
 80041d4:	4622      	mov	r2, r4
 80041d6:	462b      	mov	r3, r5
 80041d8:	1814      	adds	r4, r2, r0
 80041da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80041de:	414b      	adcs	r3, r1
 80041e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	008b      	lsls	r3, r1, #2
 80041fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fe:	0082      	lsls	r2, r0, #2
 8004200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004204:	f7fb fff2 	bl	80001ec <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <UART_SetConfig+0x734>)
 800420e:	fba3 1302 	umull	r1, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2164      	movs	r1, #100	; 0x64
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	; 0x32
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <UART_SetConfig+0x734>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422c:	441e      	add	r6, r3
 800422e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004232:	4618      	mov	r0, r3
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	1894      	adds	r4, r2, r2
 800423e:	603c      	str	r4, [r7, #0]
 8004240:	415b      	adcs	r3, r3
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004248:	1812      	adds	r2, r2, r0
 800424a:	eb41 0303 	adc.w	r3, r1, r3
 800424e:	f04f 0400 	mov.w	r4, #0
 8004252:	f04f 0500 	mov.w	r5, #0
 8004256:	00dd      	lsls	r5, r3, #3
 8004258:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800425c:	00d4      	lsls	r4, r2, #3
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	1814      	adds	r4, r2, r0
 8004264:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004268:	414b      	adcs	r3, r1
 800426a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	008b      	lsls	r3, r1, #2
 8004284:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004288:	0082      	lsls	r2, r0, #2
 800428a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800428e:	f7fb ffad 	bl	80001ec <__aeabi_uldivmod>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <UART_SetConfig+0x734>)
 8004298:	fba3 1302 	umull	r1, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2164      	movs	r1, #100	; 0x64
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	3332      	adds	r3, #50	; 0x32
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <UART_SetConfig+0x734>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 020f 	and.w	r2, r3, #15
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4432      	add	r2, r6
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	e7ff      	b.n	80042c2 <UART_SetConfig+0x722>
 80042c2:	bf00      	nop
 80042c4:	37f4      	adds	r7, #244	; 0xf4
 80042c6:	46bd      	mov	sp, r7
 80042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042cc:	40011000 	.word	0x40011000
 80042d0:	40011400 	.word	0x40011400
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d8:	b084      	sub	sp, #16
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	f107 001c 	add.w	r0, r7, #28
 80042e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d122      	bne.n	8004336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f94a 	bl	80045c4 <USB_CoreReset>
 8004330:	4603      	mov	r3, r0
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e01a      	b.n	800436c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f93e 	bl	80045c4 <USB_CoreReset>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
 800435e:	e005      	b.n	800436c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	2b01      	cmp	r3, #1
 8004370:	d10b      	bne.n	800438a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f043 0206 	orr.w	r2, r3, #6
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004396:	b004      	add	sp, #16
 8004398:	4770      	bx	lr

0800439a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f023 0201 	bic.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	e00b      	b.n	8004422 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e001      	b.n	8004422 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e003      	b.n	800442a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004422:	2032      	movs	r0, #50	; 0x32
 8004424:	f7fc fae4 	bl	80009f0 <HAL_Delay>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <USB_FlushTxFifo+0x48>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e006      	b.n	800446e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b20      	cmp	r3, #32
 800446a:	d0f0      	beq.n	800444e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	00030d40 	.word	0x00030d40

08004480 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2210      	movs	r2, #16
 8004490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <USB_FlushRxFifo+0x40>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e006      	b.n	80044b2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d0f0      	beq.n	8004492 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	00030d40 	.word	0x00030d40

080044c4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	460b      	mov	r3, r1
 80044d4:	71fb      	strb	r3, [r7, #7]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80044e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11a      	bne.n	8004520 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044ea:	88bb      	ldrh	r3, [r7, #4]
 80044ec:	3303      	adds	r3, #3
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e00f      	b.n	8004518 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	031a      	lsls	r2, r3, #12
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004504:	461a      	mov	r2, r3
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3304      	adds	r3, #4
 8004510:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3301      	adds	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d3eb      	bcc.n	80044f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800452e:	b480      	push	{r7}
 8004530:	b089      	sub	sp, #36	; 0x24
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	4613      	mov	r3, r2
 800453a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	3303      	adds	r3, #3
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e00b      	b.n	800456a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	601a      	str	r2, [r3, #0]
    pDest++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	3301      	adds	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3ef      	bcc.n	8004552 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004572:	69fb      	ldr	r3, [r7, #28]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3724      	adds	r7, #36	; 0x24
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0301 	and.w	r3, r3, #1
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	3301      	adds	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a13      	ldr	r2, [pc, #76]	; (8004628 <USB_CoreReset+0x64>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e01b      	b.n	800461a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	daf2      	bge.n	80045d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <USB_CoreReset+0x64>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e006      	b.n	800461a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d0f0      	beq.n	80045fa <USB_CoreReset+0x36>

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	00030d40 	.word	0x00030d40

0800462c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	f107 001c 	add.w	r0, r7, #28
 800463a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004648:	461a      	mov	r2, r3
 800464a:	2300      	movs	r3, #0
 800464c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d018      	beq.n	80046b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10a      	bne.n	800469a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e014      	b.n	80046c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e009      	b.n	80046c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046be:	f023 0304 	bic.w	r3, r3, #4
 80046c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80046c4:	2110      	movs	r1, #16
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff feb4 	bl	8004434 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fed7 	bl	8004480 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e015      	b.n	8004704 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	2300      	movs	r3, #0
 80046fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3301      	adds	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d3e5      	bcc.n	80046d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800470c:	2101      	movs	r1, #1
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8ac 	bl	800486c <USB_DriveVbus>

  HAL_Delay(200U);
 8004714:	20c8      	movs	r0, #200	; 0xc8
 8004716:	f7fc f96b 	bl	80009f0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a14      	ldr	r2, [pc, #80]	; (8004790 <USB_HostInit+0x164>)
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <USB_HostInit+0x168>)
 8004746:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800474a:	e009      	b.n	8004760 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a10      	ldr	r2, [pc, #64]	; (8004798 <USB_HostInit+0x16c>)
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a10      	ldr	r2, [pc, #64]	; (800479c <USB_HostInit+0x170>)
 800475c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f043 0210 	orr.w	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <USB_HostInit+0x174>)
 8004778:	4313      	orrs	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800478a:	b004      	add	sp, #16
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	01000200 	.word	0x01000200
 8004794:	00e00300 	.word	0x00e00300
 8004798:	00600080 	.word	0x00600080
 800479c:	004000e0 	.word	0x004000e0
 80047a0:	a3200008 	.word	0xa3200008

080047a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ec:	461a      	mov	r2, r3
 80047ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047f2:	6053      	str	r3, [r2, #4]
 80047f4:	e009      	b.n	800480a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d106      	bne.n	800480a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004802:	461a      	mov	r2, r3
 8004804:	f241 7370 	movw	r3, #6000	; 0x1770
 8004808:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004838:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004848:	2064      	movs	r0, #100	; 0x64
 800484a:	f7fc f8d1 	bl	80009f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800485c:	200a      	movs	r0, #10
 800485e:	f7fc f8c7 	bl	80009f0 <HAL_Delay>

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004890:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <USB_DriveVbus+0x44>
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d106      	bne.n	80048b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d109      	bne.n	80048d0 <USB_DriveVbus+0x64>
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80048ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	0c5b      	lsrs	r3, r3, #17
 80048fc:	f003 0303 	and.w	r3, r3, #3
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	b29b      	uxth	r3, r3
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	70fb      	strb	r3, [r7, #3]
 8004942:	460b      	mov	r3, r1
 8004944:	70bb      	strb	r3, [r7, #2]
 8004946:	4613      	mov	r3, r2
 8004948:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495e:	461a      	mov	r2, r3
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004966:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800496a:	2b03      	cmp	r3, #3
 800496c:	d87e      	bhi.n	8004a6c <USB_HC_Init+0x13c>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <USB_HC_Init+0x44>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	08004985 	.word	0x08004985
 8004978:	08004a2f 	.word	0x08004a2f
 800497c:	08004985 	.word	0x08004985
 8004980:	080049f1 	.word	0x080049f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	461a      	mov	r2, r3
 8004992:	f240 439d 	movw	r3, #1181	; 0x49d
 8004996:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da10      	bge.n	80049c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80049c0:	e057      	b.n	8004a72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d051      	beq.n	8004a72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049ec:	60d3      	str	r3, [r2, #12]
      break;
 80049ee:	e040      	b.n	8004a72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	461a      	mov	r2, r3
 80049fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8004a02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da34      	bge.n	8004a76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004a2c:	e023      	b.n	8004a76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f240 2325 	movw	r3, #549	; 0x225
 8004a40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004a42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da17      	bge.n	8004a7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004a68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004a6a:	e006      	b.n	8004a7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	e004      	b.n	8004a7c <USB_HC_Init+0x14c>
      break;
 8004a72:	bf00      	nop
 8004a74:	e002      	b.n	8004a7c <USB_HC_Init+0x14c>
      break;
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <USB_HC_Init+0x14c>
      break;
 8004a7a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a96:	4313      	orrs	r3, r2
 8004a98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004aa6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da03      	bge.n	8004ab6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	e001      	b.n	8004aba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d103      	bne.n	8004aca <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e001      	b.n	8004ace <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ace:	787b      	ldrb	r3, [r7, #1]
 8004ad0:	059b      	lsls	r3, r3, #22
 8004ad2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ad6:	78bb      	ldrb	r3, [r7, #2]
 8004ad8:	02db      	lsls	r3, r3, #11
 8004ada:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ade:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ae4:	049b      	lsls	r3, r3, #18
 8004ae6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004aea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004af2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	0159      	lsls	r1, r3, #5
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	440b      	add	r3, r1
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004b0a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d10f      	bne.n	8004b34 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b32:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b60:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d028      	beq.n	8004bc0 <USB_HC_StartXfer+0x7c>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	791b      	ldrb	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d124      	bne.n	8004bc0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <USB_HC_StartXfer+0x50>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	795b      	ldrb	r3, [r3, #5]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fa2c 	bl	8004fe8 <USB_DoPing>
      return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e111      	b.n	8004db8 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d112      	bne.n	8004bc0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004bb8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d018      	beq.n	8004bfa <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	8912      	ldrh	r2, [r2, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	8912      	ldrh	r2, [r2, #8]
 8004bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bdc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004bde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004be0:	8b7b      	ldrh	r3, [r7, #26]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d90b      	bls.n	8004bfe <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004be6:	8b7b      	ldrh	r3, [r7, #26]
 8004be8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004bea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	8912      	ldrh	r2, [r2, #8]
 8004bf0:	fb02 f203 	mul.w	r2, r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	611a      	str	r2, [r3, #16]
 8004bf8:	e001      	b.n	8004bfe <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	8912      	ldrh	r2, [r2, #8]
 8004c0c:	fb02 f203 	mul.w	r2, r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c1e:	04d9      	lsls	r1, r3, #19
 8004c20:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <USB_HC_StartXfer+0x27c>)
 8004c22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	7a9b      	ldrb	r3, [r3, #10]
 8004c2a:	075b      	lsls	r3, r3, #29
 8004c2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	0148      	lsls	r0, r1, #5
 8004c34:	6a39      	ldr	r1, [r7, #32]
 8004c36:	4401      	add	r1, r0
 8004c38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004c3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004c3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c56:	460a      	mov	r2, r1
 8004c58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	7e7b      	ldrb	r3, [r7, #25]
 8004ca2:	075b      	lsls	r3, r3, #29
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	0148      	lsls	r0, r1, #5
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	4401      	add	r1, r0
 8004cac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a40      	ldr	r2, [pc, #256]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cc4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cce:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cd0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	78db      	ldrb	r3, [r3, #3]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004cda:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	4a38      	ldr	r2, [pc, #224]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e005      	b.n	8004cf4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cf0:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cf2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004cfe:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	; (8004dc4 <USB_HC_StartXfer+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14d      	bne.n	8004db6 <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	78db      	ldrb	r3, [r3, #3]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d149      	bne.n	8004db6 <USB_HC_StartXfer+0x272>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d045      	beq.n	8004db6 <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	79db      	ldrb	r3, [r3, #7]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d830      	bhi.n	8004d94 <USB_HC_StartXfer+0x250>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <USB_HC_StartXfer+0x1f4>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d6d 	.word	0x08004d6d
 8004d40:	08004d49 	.word	0x08004d49
 8004d44:	08004d6d 	.word	0x08004d6d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	3303      	adds	r3, #3
 8004d4e:	089b      	lsrs	r3, r3, #2
 8004d50:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004d52:	8afa      	ldrh	r2, [r7, #22]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d91c      	bls.n	8004d98 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d6a:	e015      	b.n	8004d98 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	3303      	adds	r3, #3
 8004d72:	089b      	lsrs	r3, r3, #2
 8004d74:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d76:	8afa      	ldrh	r2, [r7, #22]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d90a      	bls.n	8004d9c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]
          }
          break;
 8004d92:	e003      	b.n	8004d9c <USB_HC_StartXfer+0x258>

        default:
          break;
 8004d94:	bf00      	nop
 8004d96:	e002      	b.n	8004d9e <USB_HC_StartXfer+0x25a>
          break;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <USB_HC_StartXfer+0x25a>
          break;
 8004d9c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	68d9      	ldr	r1, [r3, #12]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	785a      	ldrb	r2, [r3, #1]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2000      	movs	r0, #0
 8004dae:	9000      	str	r0, [sp, #0]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fb87 	bl	80044c4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3728      	adds	r7, #40	; 0x28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	1ff80000 	.word	0x1ff80000
 8004dc4:	200000b0 	.word	0x200000b0

08004dc8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	b29b      	uxth	r3, r3
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	0c9b      	lsrs	r3, r3, #18
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <USB_HC_Halt+0x3a>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d16c      	bne.n	8004efe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d143      	bne.n	8004ed8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004eae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ebc:	d81d      	bhi.n	8004efa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed4:	d0ec      	beq.n	8004eb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ed6:	e080      	b.n	8004fda <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ef8:	e06f      	b.n	8004fda <USB_HC_Halt+0x1f0>
          break;
 8004efa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004efc:	e06d      	b.n	8004fda <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f1c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d143      	bne.n	8004fb6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f4c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f6c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f8c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3301      	adds	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f9a:	d81d      	bhi.n	8004fd8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb2:	d0ec      	beq.n	8004f8e <USB_HC_Halt+0x1a4>
 8004fb4:	e011      	b.n	8004fda <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e000      	b.n	8004fda <USB_HC_Halt+0x1f0>
          break;
 8004fd8:	bf00      	nop
    }
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	04da      	lsls	r2, r3, #19
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <USB_DoPing+0x74>)
 8005006:	4013      	ands	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005018:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005030:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005038:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	461a      	mov	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	1ff80000 	.word	0x1ff80000

08005060 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff f9a3 	bl	80043bc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005076:	2110      	movs	r1, #16
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff f9db 	bl	8004434 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff f9fe 	bl	8004480 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e01f      	b.n	80050ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3301      	adds	r3, #1
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d9dc      	bls.n	800508a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e034      	b.n	8005140 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	461a      	mov	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3301      	adds	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511c:	d80c      	bhi.n	8005138 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005134:	d0ec      	beq.n	8005110 <USB_StopHost+0xb0>
 8005136:	e000      	b.n	800513a <USB_StopHost+0xda>
        break;
 8005138:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3301      	adds	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d9c7      	bls.n	80050d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514c:	461a      	mov	r2, r3
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f04f 32ff 	mov.w	r2, #4294967295
 800515a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f91c 	bl	800439a <USB_EnableGlobalInt>

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	601a      	str	r2, [r3, #0]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	709a      	strb	r2, [r3, #2]
 80051bc:	4b22      	ldr	r3, [pc, #136]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051be:	789a      	ldrb	r2, [r3, #2]
 80051c0:	4b21      	ldr	r3, [pc, #132]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051c2:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80051c4:	4b20      	ldr	r3, [pc, #128]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	711a      	strb	r2, [r3, #4]
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051cc:	791a      	ldrb	r2, [r3, #4]
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051d0:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80051d2:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	719a      	strb	r2, [r3, #6]
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051da:	799a      	ldrb	r2, [r3, #6]
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051de:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	721a      	strb	r2, [r3, #8]
 80051e6:	4b18      	ldr	r3, [pc, #96]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051e8:	7a1a      	ldrb	r2, [r3, #8]
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <USBH_HID_KeybdInit+0xa4>)
 80051ec:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e00c      	b.n	800520e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <USBH_HID_KeybdInit+0xa8>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2100      	movs	r1, #0
 80051fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 80051fe:	4a14      	ldr	r2, [pc, #80]	; (8005250 <USBH_HID_KeybdInit+0xac>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2100      	movs	r1, #0
 8005204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d9ef      	bls.n	80051f4 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	8b1b      	ldrh	r3, [r3, #24]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d902      	bls.n	8005222 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2208      	movs	r2, #8
 8005220:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <USBH_HID_KeybdInit+0xac>)
 8005226:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f103 0008 	add.w	r0, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005234:	2250      	movs	r2, #80	; 0x50
 8005236:	4619      	mov	r1, r3
 8005238:	f7ff ff98 	bl	800516c <USBH_HID_FifoInit>

  return USBH_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000118 	.word	0x20000118
 800524c:	20000108 	.word	0x20000108
 8005250:	20000110 	.word	0x20000110

08005254 <USBH_PRT_InterfaceInit>:
  USBH_PRT_Process,
  USBH_PRT_SOFProcess,
  NULL,
};

static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af04      	add	r7, sp, #16
 800525a:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005262:	2020      	movs	r0, #32
 8005264:	f002 fcba 	bl	8007bdc <malloc>
 8005268:	4603      	mov	r3, r0
 800526a:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 8005276:	2220      	movs	r2, #32
 8005278:	2100      	movs	r1, #0
 800527a:	68b8      	ldr	r0, [r7, #8]
 800527c:	f002 fcbe 	bl	8007bfc <memset>

	PRT_Handle->num = 0;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	709a      	strb	r2, [r3, #2]
	PRT_Handle->Budrate = Bud_9600;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800528c:	61da      	str	r2, [r3, #28]
	PRT_Handle->poll = 10;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	220a      	movs	r2, #10
 8005292:	729a      	strb	r2, [r3, #10]
	PRT_Handle->vID = phost->device.DevDesc.idVendor;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 232e 	ldrh.w	r2, [r3, #814]	; 0x32e
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	831a      	strh	r2, [r3, #24]
	PRT_Handle->pID = phost->device.DevDesc.idProduct;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 2330 	ldrh.w	r2, [r3, #816]	; 0x330
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	835a      	strh	r2, [r3, #26]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052ae:	7919      	ldrb	r1, [r3, #4]
 80052b0:	23ff      	movs	r3, #255	; 0xff
 80052b2:	2201      	movs	r2, #1
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 ff35 	bl	8006124 <USBH_FindInterface>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	4619      	mov	r1, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	231a      	movs	r3, #26
 80052cc:	fb03 f301 	mul.w	r3, r3, r1
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	4619      	mov	r1, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	231a      	movs	r3, #26
 80052e6:	fb03 f301 	mul.w	r3, r3, r1
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	4619      	mov	r1, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	231a      	movs	r3, #26
 8005300:	fb03 f301 	mul.w	r3, r3, r1
 8005304:	4413      	add	r3, r2
 8005306:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	799b      	ldrb	r3, [r3, #6]
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f002 f8e3 	bl	80074e2 <USBH_AllocPipe>
 800531c:	4603      	mov	r3, r0
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	4619      	mov	r1, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	231a      	movs	r3, #26
 800532e:	fb03 f301 	mul.w	r3, r3, r1
 8005332:	4413      	add	r3, r2
 8005334:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	795b      	ldrb	r3, [r3, #5]
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f002 f8cc 	bl	80074e2 <USBH_AllocPipe>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	2b07      	cmp	r3, #7
 800535c:	d107      	bne.n	800536e <USBH_PRT_InterfaceInit+0x11a>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 500);
 800535e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005362:	2210      	movs	r2, #16
 8005364:	4932      	ldr	r1, [pc, #200]	; (8005430 <USBH_PRT_InterfaceInit+0x1dc>)
 8005366:	4833      	ldr	r0, [pc, #204]	; (8005434 <USBH_PRT_InterfaceInit+0x1e0>)
 8005368:	f7fd fffb 	bl	8003362 <HAL_UART_Transmit>
 800536c:	e006      	b.n	800537c <USBH_PRT_InterfaceInit+0x128>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 500);
 800536e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005372:	2214      	movs	r2, #20
 8005374:	4930      	ldr	r1, [pc, #192]	; (8005438 <USBH_PRT_InterfaceInit+0x1e4>)
 8005376:	482f      	ldr	r0, [pc, #188]	; (8005434 <USBH_PRT_InterfaceInit+0x1e0>)
 8005378:	f7fd fff3 	bl	8003362 <HAL_UART_Transmit>
   }

	//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e04d      	b.n	800541e <USBH_PRT_InterfaceInit+0x1ca>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	4618      	mov	r0, r3
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3301      	adds	r3, #1
 800538e:	00d9      	lsls	r1, r3, #3
 8005390:	231a      	movs	r3, #26
 8005392:	fb03 f300 	mul.w	r3, r3, r0
 8005396:	440b      	add	r3, r1
 8005398:	4413      	add	r3, r2
 800539a:	f203 3346 	addw	r3, r3, #838	; 0x346
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	b25b      	sxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da1c      	bge.n	80053e0 <USBH_PRT_InterfaceInit+0x18c>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	7919      	ldrb	r1, [r3, #4]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	7998      	ldrb	r0, [r3, #6]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	8912      	ldrh	r2, [r2, #8]
 80053be:	9202      	str	r2, [sp, #8]
 80053c0:	2202      	movs	r2, #2
 80053c2:	9201      	str	r2, [sp, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4623      	mov	r3, r4
 80053c8:	4602      	mov	r2, r0
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 f85a 	bl	8007484 <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f002 fb6b 	bl	8007ab4 <USBH_LL_SetToggle>
 80053de:	e01b      	b.n	8005418 <USBH_PRT_InterfaceInit+0x1c4>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	78d9      	ldrb	r1, [r3, #3]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	7958      	ldrb	r0, [r3, #5]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	8912      	ldrh	r2, [r2, #8]
 80053f8:	9202      	str	r2, [sp, #8]
 80053fa:	2202      	movs	r2, #2
 80053fc:	9201      	str	r2, [sp, #4]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4623      	mov	r3, r4
 8005402:	4602      	mov	r2, r0
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f002 f83d 	bl	8007484 <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	78db      	ldrb	r3, [r3, #3]
 800540e:	2200      	movs	r2, #0
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f002 fb4e 	bl	8007ab4 <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	ddae      	ble.n	8005382 <USBH_PRT_InterfaceInit+0x12e>

		  }
     }

return USBH_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	08007e04 	.word	0x08007e04
 8005434:	200000c4 	.word	0x200000c4
 8005438:	08007e18 	.word	0x08007e18

0800543c <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	791b      	ldrb	r3, [r3, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00e      	beq.n	8005474 <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f002 f830 	bl	80074c2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	791b      	ldrb	r3, [r3, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 f85b 	bl	8007524 <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f002 f81d 	bl	80074c2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f002 f848 	bl	8007524 <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f002 fb9c 	bl	8007bec <free>
	    phost->pActiveClass->pData = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
	  }

return USBH_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0a8      	sub	sp, #160	; 0xa0
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	2296      	movs	r2, #150	; 0x96
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f002 fb8f 	bl	8007bfc <memset>
//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 80054de:	bf00      	nop
 80054e0:	f107 0308 	add.w	r3, r7, #8
 80054e4:	2296      	movs	r2, #150	; 0x96
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9b6 	bl	800585a <USBH_PRT_Get_Device_Id>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f5      	bne.n	80054e0 <USBH_PRT_ClassRequest+0x18>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)strlen(buff) ,( uint32_t)100);
	memset(buff,0,150);
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	2296      	movs	r2, #150	; 0x96
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f002 fb7d 	bl	8007bfc <memset>

	while( USBH_PRT_Get_Port_Status(phost, buff, 150) != USBH_OK);
 8005502:	bf00      	nop
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	2296      	movs	r2, #150	; 0x96
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9c5 	bl	800589c <USBH_PRT_Get_Port_Status>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f5      	bne.n	8005504 <USBH_PRT_ClassRequest+0x3c>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)10);
	memset(buff,0,150);
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	2296      	movs	r2, #150	; 0x96
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f002 fb6b 	bl	8007bfc <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)1000);
//	memset(buff,0,150);

	return USBH_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	37a0      	adds	r7, #160	; 0xa0
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	f5ad 5dfc 	sub.w	sp, sp, #8064	; 0x1f80
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	f107 0318 	add.w	r3, r7, #24
 800553e:	3b14      	subs	r3, #20
 8005540:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 8005542:	2300      	movs	r3, #0
 8005544:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005548:	f102 0216 	add.w	r2, r2, #22
 800554c:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];
	 int8_t stat_flag = -1;
 800554e:	23ff      	movs	r3, #255	; 0xff
 8005550:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005554:	f102 0215 	add.w	r2, r2, #21
 8005558:	7013      	strb	r3, [r2, #0]
	 USBH_StatusTypeDef status = USBH_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005560:	f102 0214 	add.w	r2, r2, #20
 8005564:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	3b14      	subs	r3, #20
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005578:	f102 0210 	add.w	r2, r2, #16
 800557c:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 800557e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8005582:	f103 030c 	add.w	r3, r3, #12
 8005586:	2240      	movs	r2, #64	; 0x40
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f002 fb36 	bl	8007bfc <memset>
	 memset(buff,0, sizeof(buff));
 8005590:	f107 0318 	add.w	r3, r7, #24
 8005594:	3b0c      	subs	r3, #12
 8005596:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f002 fb2d 	bl	8007bfc <memset>
	 PRT_Handle->poll = 10;
 80055a2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80055a6:	f103 0310 	add.w	r3, r3, #16
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	220a      	movs	r2, #10
 80055ae:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state)
 80055b0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80055b4:	f103 0310 	add.w	r3, r3, #16
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	f200 8112 	bhi.w	80057e6 <USBH_PRT_Process+0x2b6>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <USBH_PRT_Process+0x98>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055d9 	.word	0x080055d9
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	0800561b 	.word	0x0800561b
 80055d4:	0800572f 	.word	0x0800572f
	 {

			case PRT_INIT:
				PRT_Handle->state = PRT_SYNC;
 80055d8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80055dc:	f103 0310 	add.w	r3, r3, #16
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
				break;
 80055e6:	e108      	b.n	80057fa <USBH_PRT_Process+0x2ca>

			 case PRT_SYNC:
				  /* Sync with start of Even Frame */
				if (phost->Timer & 1U)
 80055e8:	f107 0318 	add.w	r3, r7, #24
 80055ec:	3b14      	subs	r3, #20
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d006      	beq.n	800560a <USBH_PRT_Process+0xda>
				 {
					PRT_Handle->state = PRT_GET_DATA;
 80055fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005600:	f103 0310 	add.w	r3, r3, #16
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2202      	movs	r2, #2
 8005608:	701a      	strb	r2, [r3, #0]
				 }
				 PRT_Handle->state = PRT_GET_DATA;
 800560a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800560e:	f103 0310 	add.w	r3, r3, #16
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2202      	movs	r2, #2
 8005616:	701a      	strb	r2, [r3, #0]
				 break;
 8005618:	e0ef      	b.n	80057fa <USBH_PRT_Process+0x2ca>
				  * 	(#) VIDPID
				  * 	(#) BAUDRATE : Default-->9600
				  * 	(#) CHN_BAUDRATE
				  *
				  */
				 HAL_UART_Receive_IT(&huart2, (uint8_t *)buff, (uint16_t)SIZE_BUFF);
 800561a:	f107 0318 	add.w	r3, r7, #24
 800561e:	3b0c      	subs	r3, #12
 8005620:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005624:	4619      	mov	r1, r3
 8005626:	4878      	ldr	r0, [pc, #480]	; (8005808 <USBH_PRT_Process+0x2d8>)
 8005628:	f7fd ffda 	bl	80035e0 <HAL_UART_Receive_IT>
				 while(1)
				 {

					 if( strlen(buff) > 0 ) break;
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	3b0c      	subs	r3, #12
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d100      	bne.n	800563a <USBH_PRT_Process+0x10a>
 8005638:	e7f8      	b.n	800562c <USBH_PRT_Process+0xfc>
 800563a:	bf00      	nop
				 }


				 if( strlen(buff) > 0 )
 800563c:	f107 0318 	add.w	r3, r7, #24
 8005640:	3b0c      	subs	r3, #12
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d014      	beq.n	8005672 <USBH_PRT_Process+0x142>
				 {
					 HAL_Delay(2000);
 8005648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800564c:	f7fb f9d0 	bl	80009f0 <HAL_Delay>
					 CommandOperation(PRT_Handle,buff);
 8005650:	f107 0318 	add.w	r3, r7, #24
 8005654:	3b0c      	subs	r3, #12
 8005656:	4619      	mov	r1, r3
 8005658:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800565c:	f103 0310 	add.w	r3, r3, #16
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	f000 fa11 	bl	8005a88 <CommandOperation>
					 HAL_UART_Transmit(&huart2, (uint8_t *)"Data Received\r\n",(uint16_t)strlen("Data Received\r\n") ,( uint32_t)50);
 8005666:	2332      	movs	r3, #50	; 0x32
 8005668:	220f      	movs	r2, #15
 800566a:	4968      	ldr	r1, [pc, #416]	; (800580c <USBH_PRT_Process+0x2dc>)
 800566c:	4866      	ldr	r0, [pc, #408]	; (8005808 <USBH_PRT_Process+0x2d8>)
 800566e:	f7fd fe78 	bl	8003362 <HAL_UART_Transmit>
				  *	OR
				  *	make it as external interrupt but in that case  SendDataOnPrinter(phost,PRT_Handle, buff);
				  *	should not work.
				  *
				  */
				 if(strlen(buff) > 16)
 8005672:	f107 0318 	add.w	r3, r7, #24
 8005676:	3b0c      	subs	r3, #12
 8005678:	4618      	mov	r0, r3
 800567a:	f7fa fdaf 	bl	80001dc <strlen>
 800567e:	4603      	mov	r3, r0
 8005680:	2b10      	cmp	r3, #16
 8005682:	f240 80b7 	bls.w	80057f4 <USBH_PRT_Process+0x2c4>
				 {
					 CommandOperation(PRT_Handle,buff);
 8005686:	f107 0318 	add.w	r3, r7, #24
 800568a:	3b0c      	subs	r3, #12
 800568c:	4619      	mov	r1, r3
 800568e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005692:	f103 0310 	add.w	r3, r3, #16
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	f000 f9f6 	bl	8005a88 <CommandOperation>

					 if( printReport() )
 800569c:	f000 fad2 	bl	8005c44 <printReport>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01a      	beq.n	80056dc <USBH_PRT_Process+0x1ac>
					 {
						 uint8_t *POSreport;
						 POSreport = PRT_Report(buff);
 80056a6:	f107 0318 	add.w	r3, r7, #24
 80056aa:	3b0c      	subs	r3, #12
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fad1 	bl	8005c54 <PRT_Report>
 80056b2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80056b6:	f103 030c 	add.w	r3, r3, #12
 80056ba:	6018      	str	r0, [r3, #0]
						 SendDataOnPrinter(phost,PRT_Handle, POSreport);
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	3b14      	subs	r3, #20
 80056c2:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80056c6:	f102 020c 	add.w	r2, r2, #12
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80056d0:	f101 0110 	add.w	r1, r1, #16
 80056d4:	6809      	ldr	r1, [r1, #0]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	f000 fba0 	bl	8005e1c <SendDataOnPrinter>
					 }

					 // Send Data on printer After choping into specified length.
					 SendDataOnPrinter(phost,PRT_Handle, buff);
 80056dc:	f107 0218 	add.w	r2, r7, #24
 80056e0:	3a0c      	subs	r2, #12
 80056e2:	f107 0318 	add.w	r3, r7, #24
 80056e6:	3b14      	subs	r3, #20
 80056e8:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 80056ec:	f101 0110 	add.w	r1, r1, #16
 80056f0:	6809      	ldr	r1, [r1, #0]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f000 fb92 	bl	8005e1c <SendDataOnPrinter>

					 PRT_Handle->state = PRT_POLL;
 80056f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80056fc:	f103 0310 	add.w	r3, r3, #16
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2203      	movs	r2, #3
 8005704:	701a      	strb	r2, [r3, #0]
					 PRT_Handle->timer = phost->Timer;
 8005706:	f107 0318 	add.w	r3, r7, #24
 800570a:	3b14      	subs	r3, #20
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005712:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005716:	f103 0310 	add.w	r3, r3, #16
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60da      	str	r2, [r3, #12]
					 PRT_Handle->DataReady = 0U;
 800571e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005722:	f103 0310 	add.w	r3, r3, #16
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2200      	movs	r2, #0
 800572a:	741a      	strb	r2, [r3, #16]
	 	 	 	 }
				 break;
 800572c:	e062      	b.n	80057f4 <USBH_PRT_Process+0x2c4>

			 case PRT_POLL:

				 if(USBH_LL_GetURBState(phost, PRT_Handle->InPipe) == USBH_URB_DONE)
 800572e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005732:	f103 0310 	add.w	r3, r3, #16
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	791a      	ldrb	r2, [r3, #4]
 800573a:	f107 0318 	add.w	r3, r7, #24
 800573e:	3b14      	subs	r3, #20
 8005740:	4611      	mov	r1, r2
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	f002 f97c 	bl	8007a40 <USBH_LL_GetURBState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d154      	bne.n	80057f8 <USBH_PRT_Process+0x2c8>
				 {

					 status = USBH_LL_GetURBState(phost, PRT_Handle->InPipe);
 800574e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005752:	f103 0310 	add.w	r3, r3, #16
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	791a      	ldrb	r2, [r3, #4]
 800575a:	f107 0318 	add.w	r3, r7, #24
 800575e:	3b14      	subs	r3, #20
 8005760:	4611      	mov	r1, r2
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	f002 f96c 	bl	8007a40 <USBH_LL_GetURBState>
 8005768:	4603      	mov	r3, r0
 800576a:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 800576e:	f102 0214 	add.w	r2, r2, #20
 8005772:	7013      	strb	r3, [r2, #0]
				//	 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll received status\r\n",(uint16_t)strlen("PRT Poll received status\r\n") ,( uint32_t)5);
					 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->InPipe);
 8005774:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005778:	f103 0310 	add.w	r3, r3, #16
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	791a      	ldrb	r2, [r3, #4]
 8005780:	f107 0318 	add.w	r3, r7, #24
 8005784:	3b14      	subs	r3, #20
 8005786:	4611      	mov	r1, r2
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	f002 f8c7 	bl	800791c <USBH_LL_GetLastXferSize>
 800578e:	4603      	mov	r3, r0
 8005790:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005794:	f102 0216 	add.w	r2, r2, #22
 8005798:	8013      	strh	r3, [r2, #0]
					 PRT_Handle->state = PRT_GET_DATA;
 800579a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800579e:	f103 0310 	add.w	r3, r3, #16
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2202      	movs	r2, #2
 80057a6:	701a      	strb	r2, [r3, #0]
				//	 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll got polled data\r\n",(uint16_t)strlen("PRT Poll got polled data\r\n") ,( uint32_t)5);
					 USBH_Delay( (PRT_Handle->poll)*2);
 80057a8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80057ac:	f103 0310 	add.w	r3, r3, #16
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	7a9b      	ldrb	r3, [r3, #10]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4618      	mov	r0, r3
 80057b8:	f002 f9af 	bl	8007b1a <USBH_Delay>
					 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll done\r\n",(uint16_t)strlen("PRT Poll done\r\n") ,( uint32_t)50);
 80057bc:	2332      	movs	r3, #50	; 0x32
 80057be:	220f      	movs	r2, #15
 80057c0:	4913      	ldr	r1, [pc, #76]	; (8005810 <USBH_PRT_Process+0x2e0>)
 80057c2:	4811      	ldr	r0, [pc, #68]	; (8005808 <USBH_PRT_Process+0x2d8>)
 80057c4:	f7fd fdcd 	bl	8003362 <HAL_UART_Transmit>
					 memset(buff,0,strlen(buff));
 80057c8:	f107 0318 	add.w	r3, r7, #24
 80057cc:	3b0c      	subs	r3, #12
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fd04 	bl	80001dc <strlen>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f107 0318 	add.w	r3, r7, #24
 80057da:	3b0c      	subs	r3, #12
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 fa0c 	bl	8007bfc <memset>
				 }

				 break;
 80057e4:	e008      	b.n	80057f8 <USBH_PRT_Process+0x2c8>

			 default:
				 HAL_UART_Transmit(&huart2, (uint8_t *)"Nothing to do...\r\n",(uint16_t)strlen("Nothing to do...\r\n") ,( uint32_t)50);
 80057e6:	2332      	movs	r3, #50	; 0x32
 80057e8:	2212      	movs	r2, #18
 80057ea:	490a      	ldr	r1, [pc, #40]	; (8005814 <USBH_PRT_Process+0x2e4>)
 80057ec:	4806      	ldr	r0, [pc, #24]	; (8005808 <USBH_PRT_Process+0x2d8>)
 80057ee:	f7fd fdb8 	bl	8003362 <HAL_UART_Transmit>
				 break;
 80057f2:	e002      	b.n	80057fa <USBH_PRT_Process+0x2ca>
				 break;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <USBH_PRT_Process+0x2ca>
				 break;
 80057f8:	bf00      	nop

	}



	return USBH_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	f507 57fc 	add.w	r7, r7, #8064	; 0x1f80
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200000c4 	.word	0x200000c4
 800580c:	08007e30 	.word	0x08007e30
 8005810:	08007e40 	.word	0x08007e40
 8005814:	08007e50 	.word	0x08007e50

08005818 <USBH_PRT_SOFProcess>:

static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d10c      	bne.n	800584c <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	7a92      	ldrb	r2, [r2, #10]
 8005842:	4293      	cmp	r3, r2
 8005844:	d302      	bcc.n	800584c <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USBH_PRT_Get_Device_Id>:


static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	22a1      	movs	r2, #161	; 0xa1
 800586c:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	88fa      	ldrh	r2, [r7, #6]
 8005884:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	461a      	mov	r2, r3
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f001 fbc6 	bl	800701e <USBH_CtlReq>
 8005892:	4603      	mov	r3, r0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <USBH_PRT_Get_Port_Status>:


static USBH_StatusTypeDef USBH_PRT_Get_Port_Status(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22a1      	movs	r2, #161	; 0xa1
 80058ae:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_PORT_STATUS;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 fba5 	bl	800701e <USBH_CtlReq>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <CheckCMD>:
/* @ checkCMD : Check command
 *
 */


int CheckCMD(const uint8_t *cmd){
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

	if( !strcmp(cmd,"VIDPID") )
 80058e8:	4914      	ldr	r1, [pc, #80]	; (800593c <CheckCMD+0x5c>)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fa fc6c 	bl	80001c8 <strcmp>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <CheckCMD+0x1a>
	{
		return 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e01b      	b.n	8005932 <CheckCMD+0x52>
	}else if(!strcmp(cmd,"BAUDRATE") )
 80058fa:	4911      	ldr	r1, [pc, #68]	; (8005940 <CheckCMD+0x60>)
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fa fc63 	bl	80001c8 <strcmp>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <CheckCMD+0x2c>
	{
		return 2;
 8005908:	2302      	movs	r3, #2
 800590a:	e012      	b.n	8005932 <CheckCMD+0x52>
	}else if(!strcmp(cmd,"CHN_BAUDRATE"))
 800590c:	490d      	ldr	r1, [pc, #52]	; (8005944 <CheckCMD+0x64>)
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fa fc5a 	bl	80001c8 <strcmp>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <CheckCMD+0x3e>
	{
		return 3;
 800591a:	2303      	movs	r3, #3
 800591c:	e009      	b.n	8005932 <CheckCMD+0x52>
	}
	if( !strcmp(cmd,"PRINTREPORT"))
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <CheckCMD+0x68>)
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fa fc51 	bl	80001c8 <strcmp>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <CheckCMD+0x50>
	{
		return 4;
 800592c:	2304      	movs	r3, #4
 800592e:	e000      	b.n	8005932 <CheckCMD+0x52>
	}

	return 0;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	08007e64 	.word	0x08007e64
 8005940:	08007e6c 	.word	0x08007e6c
 8005944:	08007e78 	.word	0x08007e78
 8005948:	08007e88 	.word	0x08007e88

0800594c <reverse>:
/* @ reverse : Reverse the String
 * @ temp : string address
 */


void reverse(uint8_t * temp){
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(temp)-1;
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fa fc41 	bl	80001dc <strlen>
 800595a:	4603      	mov	r3, r0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 8005962:	2300      	movs	r3, #0
 8005964:	73bb      	strb	r3, [r7, #14]
	uint8_t j=0;
 8005966:	2300      	movs	r3, #0
 8005968:	737b      	strb	r3, [r7, #13]
	while(i < len){
 800596a:	e017      	b.n	800599c <reverse+0x50>
		j = temp[i];
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	737b      	strb	r3, [r7, #13]
		temp[i++] = temp[len];
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	441a      	add	r2, r3
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	73b9      	strb	r1, [r7, #14]
 8005982:	4619      	mov	r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	440b      	add	r3, r1
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	701a      	strb	r2, [r3, #0]
		temp[len--] = j;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	73fa      	strb	r2, [r7, #15]
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	7b7a      	ldrb	r2, [r7, #13]
 800599a:	701a      	strb	r2, [r3, #0]
	while(i < len){
 800599c:	7bba      	ldrb	r2, [r7, #14]
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3e3      	bcc.n	800596c <reverse+0x20>

		//i++;//
		//len--;//
	}

}//end-reverse
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <I2A>:
/* @ I2A : Change Integer into ASCii
 * @ temp : Destination buffer of String
 * @ num : Integer
 */

void I2A(uint8_t *temp, uint32_t num){
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
	while(num){
 80059be:	e019      	b.n	80059f4 <I2A+0x44>
		temp[i++] = num%10+48;
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <I2A+0x58>)
 80059c4:	fba3 2301 	umull	r2, r3, r3, r1
 80059c8:	08da      	lsrs	r2, r3, #3
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	1aca      	subs	r2, r1, r3
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	73f9      	strb	r1, [r7, #15]
 80059dc:	4619      	mov	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	440b      	add	r3, r1
 80059e2:	3230      	adds	r2, #48	; 0x30
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
		num /= 10;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	4a07      	ldr	r2, [pc, #28]	; (8005a08 <I2A+0x58>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	08db      	lsrs	r3, r3, #3
 80059f2:	603b      	str	r3, [r7, #0]
	while(num){
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e2      	bne.n	80059c0 <I2A+0x10>
	}

	reverse(temp);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff ffa6 	bl	800594c <reverse>
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	cccccccd 	.word	0xcccccccd

08005a0c <A2I>:
 * @ temp   : String buffer
 * @ return : converted Integer
 */

uint32_t A2I(uint8_t *temp)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

	uint32_t num = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

	for(int i=0; i < strlen(temp); i++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	e00f      	b.n	8005a3e <A2I+0x32>
	{
		num = num*10 + (temp[i]-48);
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	440b      	add	r3, r1
 8005a34:	3b30      	subs	r3, #48	; 0x30
 8005a36:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < strlen(temp); i++)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fa fbcc 	bl	80001dc <strlen>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d8e8      	bhi.n	8005a1e <A2I+0x12>

	}

	return num;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <checkBudrate>:
 * @ temp : source buffer
 * @return : integer value or Baudrate
 */

uint32_t  checkBudrate(uint8_t *temp)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
	return A2I(temp);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ffd4 	bl	8005a0c <A2I>
 8005a64:	4603      	mov	r3, r0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <ChangeBaudrate>:
/* @ ChangeBaudrate : It is used to change baudrate at run time.
 * @ Baudrate : This is desired baudrate
 */

static uint8_t ChangeBaudrate( uint32_t Baudrate )
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]

	MX_USART2_UART_Init(Baudrate);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fa fdc6 	bl	8000608 <MX_USART2_UART_Init>

	return 1;
 8005a7c:	2301      	movs	r3, #1
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <CommandOperation>:
 * @ PRT_Handle : Printer Handler Structure
 * @ return : Use as per requirement
 */

int CommandOperation( PRT_HandleTypeDef *PRT_Handle , uint8_t *buff)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b094      	sub	sp, #80	; 0x50
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	//flag = 0 ; Command Not Found
	//flag = 1 ; Command  Found

	uint8_t temp[64],pktcnt,flag;
	uint16_t XferSize = strlen(buff);
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	f7fa fba2 	bl	80001dc <strlen>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	 pktcnt=flag=0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005aa8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	 memset(temp,0,64);
 8005aac:	f107 0308 	add.w	r3, r7, #8
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f002 f8a1 	bl	8007bfc <memset>

	 if( (XferSize == 0))
 8005aba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <CommandOperation+0x3e>
		 return 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0b2      	b.n	8005c2c <CommandOperation+0x1a4>

	 if( (XferSize > 15) )
 8005ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005aca:	2b0f      	cmp	r3, #15
 8005acc:	d901      	bls.n	8005ad2 <CommandOperation+0x4a>
		 return 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e0ac      	b.n	8005c2c <CommandOperation+0x1a4>

	 pktcnt = CheckCMD(buff);
 8005ad2:	6838      	ldr	r0, [r7, #0]
 8005ad4:	f7ff ff04 	bl	80058e0 <CheckCMD>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	 switch( pktcnt )
 8005ade:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	f200 8094 	bhi.w	8005c12 <CommandOperation+0x18a>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <CommandOperation+0x68>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005bb5 	.word	0x08005bb5
 8005afc:	08005c0d 	.word	0x08005c0d
		 {
		 case VIDPID:// Get Vid, Pid od device
			 I2A(temp,PRT_Handle->vID);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8b1b      	ldrh	r3, [r3, #24]
 8005b04:	461a      	mov	r2, r3
 8005b06:	f107 0308 	add.w	r3, r7, #8
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ff4f 	bl	80059b0 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fb60 	bl	80001dc <strlen>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f107 0108 	add.w	r1, r7, #8
 8005b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b28:	4842      	ldr	r0, [pc, #264]	; (8005c34 <CommandOperation+0x1ac>)
 8005b2a:	f7fd fc1a 	bl	8003362 <HAL_UART_Transmit>
			 I2A(temp,PRT_Handle->pID);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8b5b      	ldrh	r3, [r3, #26]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f107 0308 	add.w	r3, r7, #8
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ff38 	bl	80059b0 <I2A>
			 HAL_UART_Transmit(&huart2, ",", strlen(","),1000);
 8005b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b44:	2201      	movs	r2, #1
 8005b46:	493c      	ldr	r1, [pc, #240]	; (8005c38 <CommandOperation+0x1b0>)
 8005b48:	483a      	ldr	r0, [pc, #232]	; (8005c34 <CommandOperation+0x1ac>)
 8005b4a:	f7fd fc0a 	bl	8003362 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, &temp, strlen( temp),1000);
 8005b4e:	f107 0308 	add.w	r3, r7, #8
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fb42 	bl	80001dc <strlen>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f107 0108 	add.w	r1, r7, #8
 8005b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b64:	4833      	ldr	r0, [pc, #204]	; (8005c34 <CommandOperation+0x1ac>)
 8005b66:	f7fd fbfc 	bl	8003362 <HAL_UART_Transmit>
			 memset(temp,0,64);
 8005b6a:	f107 0308 	add.w	r3, r7, #8
 8005b6e:	2240      	movs	r2, #64	; 0x40
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 f842 	bl	8007bfc <memset>
			 flag = 1; //flag = 1 ; Command Found
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 8005b7e:	e053      	b.n	8005c28 <CommandOperation+0x1a0>

		 case BAUDRATE:// Get current baudrate default 9600
			 I2A(temp,PRT_Handle->Budrate);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	f107 0308 	add.w	r3, r7, #8
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff ff10 	bl	80059b0 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 8005b90:	f107 0308 	add.w	r3, r7, #8
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fb21 	bl	80001dc <strlen>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f107 0108 	add.w	r1, r7, #8
 8005ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ba6:	4823      	ldr	r0, [pc, #140]	; (8005c34 <CommandOperation+0x1ac>)
 8005ba8:	f7fd fbdb 	bl	8003362 <HAL_UART_Transmit>
		 	 flag = 1; //flag = 1 ; Command Found
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 	 break;
 8005bb2:	e039      	b.n	8005c28 <CommandOperation+0x1a0>

		 case CHN_BAUDRATE:// Change baudrate

			 HAL_UART_Transmit(&huart2, "Waiting for modified baudrate\n", strlen( "Waiting for modified baudrate\n"),1000);
 8005bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bb8:	221e      	movs	r2, #30
 8005bba:	4920      	ldr	r1, [pc, #128]	; (8005c3c <CommandOperation+0x1b4>)
 8005bbc:	481d      	ldr	r0, [pc, #116]	; (8005c34 <CommandOperation+0x1ac>)
 8005bbe:	f7fd fbd0 	bl	8003362 <HAL_UART_Transmit>
			 do
			 {
				 memset(temp,0,64);
 8005bc2:	f107 0308 	add.w	r3, r7, #8
 8005bc6:	2240      	movs	r2, #64	; 0x40
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f002 f816 	bl	8007bfc <memset>
				 HAL_UART_Receive(&huart2, &temp, 64,1000);
 8005bd0:	f107 0108 	add.w	r1, r7, #8
 8005bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	4816      	ldr	r0, [pc, #88]	; (8005c34 <CommandOperation+0x1ac>)
 8005bdc:	f7fd fc5a 	bl	8003494 <HAL_UART_Receive>

			 }while(!strlen(temp));
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0eb      	beq.n	8005bc2 <CommandOperation+0x13a>

			 PRT_Handle->Budrate = checkBudrate(temp);
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ff31 	bl	8005a56 <checkBudrate>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	61da      	str	r2, [r3, #28]
			 flag = ChangeBaudrate(  PRT_Handle->Budrate );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff ff35 	bl	8005a6e <ChangeBaudrate>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 8005c0a:	e00d      	b.n	8005c28 <CommandOperation+0x1a0>

		 case PRINTREPORT:
			 	 printReport();
 8005c0c:	f000 f81a 	bl	8005c44 <printReport>
			 	 break;
 8005c10:	e00a      	b.n	8005c28 <CommandOperation+0x1a0>
		 default:
		 {
			 HAL_UART_Transmit(&huart2, "This is not know Command\n", strlen(  "This is not know Command\n"),1000);
 8005c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c16:	2219      	movs	r2, #25
 8005c18:	4909      	ldr	r1, [pc, #36]	; (8005c40 <CommandOperation+0x1b8>)
 8005c1a:	4806      	ldr	r0, [pc, #24]	; (8005c34 <CommandOperation+0x1ac>)
 8005c1c:	f7fd fba1 	bl	8003362 <HAL_UART_Transmit>
			 flag = 0; //flag = 0 ; Command Not Found
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 }
		 break;
 8005c26:	bf00      	nop

		 }//end-Switch



	 return flag;
 8005c28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3750      	adds	r7, #80	; 0x50
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	200000c4 	.word	0x200000c4
 8005c38:	08007e94 	.word	0x08007e94
 8005c3c:	08007e98 	.word	0x08007e98
 8005c40:	08007eb8 	.word	0x08007eb8

08005c44 <printReport>:


uint8_t printReport(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
	/*
	 * Use it as per requirement and Conditions.
	 */

	return 0;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <PRT_Report>:
 * @ pData :  Received RAW data from User
 * @ return : converted data address into post scripts
 */

uint8_t *PRT_Report(uint8_t *pData)
{
 8005c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

	memset(dData,0,2000);
 8005c5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c60:	2100      	movs	r1, #0
 8005c62:	4865      	ldr	r0, [pc, #404]	; (8005df8 <PRT_Report+0x1a4>)
 8005c64:	f001 ffca 	bl	8007bfc <memset>

	  if(strlen(pData) > 15)
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fa fab7 	bl	80001dc <strlen>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b0f      	cmp	r3, #15
 8005c72:	d97f      	bls.n	8005d74 <PRT_Report+0x120>
		  {
			  uint16_t startIdx =0;   // starting index of Buffer data
 8005c74:	2300      	movs	r3, #0
 8005c76:	827b      	strh	r3, [r7, #18]
			  uint16_t lastIdx =0;    // Last index of Buffer data
 8005c78:	2300      	movs	r3, #0
 8005c7a:	823b      	strh	r3, [r7, #16]
			  uint8_t *startAddr; // starting address of Buffer data
			  uint8_t *lastAddr;  // Last address of Buffer data

			  strcat(dData, "/Courier findfont [ 12 0 0 12 0 0] makefont setfont \r\n");
 8005c7c:	485e      	ldr	r0, [pc, #376]	; (8005df8 <PRT_Report+0x1a4>)
 8005c7e:	f7fa faad 	bl	80001dc <strlen>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	4b5c      	ldr	r3, [pc, #368]	; (8005df8 <PRT_Report+0x1a4>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	4a5c      	ldr	r2, [pc, #368]	; (8005dfc <PRT_Report+0x1a8>)
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	469c      	mov	ip, r3
 8005c90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005c94:	4665      	mov	r5, ip
 8005c96:	4626      	mov	r6, r4
 8005c98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c9a:	6028      	str	r0, [r5, #0]
 8005c9c:	6069      	str	r1, [r5, #4]
 8005c9e:	60aa      	str	r2, [r5, #8]
 8005ca0:	60eb      	str	r3, [r5, #12]
 8005ca2:	3410      	adds	r4, #16
 8005ca4:	f10c 0c10 	add.w	ip, ip, #16
 8005ca8:	4574      	cmp	r4, lr
 8005caa:	d1f3      	bne.n	8005c94 <PRT_Report+0x40>
 8005cac:	4663      	mov	r3, ip
 8005cae:	4622      	mov	r2, r4
 8005cb0:	6810      	ldr	r0, [r2, #0]
 8005cb2:	6018      	str	r0, [r3, #0]
 8005cb4:	8891      	ldrh	r1, [r2, #4]
 8005cb6:	7992      	ldrb	r2, [r2, #6]
 8005cb8:	8099      	strh	r1, [r3, #4]
 8005cba:	719a      	strb	r2, [r3, #6]
			  strcat(dData, "/showline { gsave show grestore 0 -12  rmoveto } def \r\n");
 8005cbc:	484e      	ldr	r0, [pc, #312]	; (8005df8 <PRT_Report+0x1a4>)
 8005cbe:	f7fa fa8d 	bl	80001dc <strlen>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4b4c      	ldr	r3, [pc, #304]	; (8005df8 <PRT_Report+0x1a4>)
 8005cc8:	4413      	add	r3, r2
 8005cca:	4a4d      	ldr	r2, [pc, #308]	; (8005e00 <PRT_Report+0x1ac>)
 8005ccc:	4614      	mov	r4, r2
 8005cce:	469c      	mov	ip, r3
 8005cd0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005cd4:	4665      	mov	r5, ip
 8005cd6:	4626      	mov	r6, r4
 8005cd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005cda:	6028      	str	r0, [r5, #0]
 8005cdc:	6069      	str	r1, [r5, #4]
 8005cde:	60aa      	str	r2, [r5, #8]
 8005ce0:	60eb      	str	r3, [r5, #12]
 8005ce2:	3410      	adds	r4, #16
 8005ce4:	f10c 0c10 	add.w	ip, ip, #16
 8005ce8:	4574      	cmp	r4, lr
 8005cea:	d1f3      	bne.n	8005cd4 <PRT_Report+0x80>
 8005cec:	4662      	mov	r2, ip
 8005cee:	4623      	mov	r3, r4
 8005cf0:	cb03      	ldmia	r3!, {r0, r1}
 8005cf2:	6010      	str	r0, [r2, #0]
 8005cf4:	6051      	str	r1, [r2, #4]
			  strcat(dData, " 18   745  moveto \r\n");
 8005cf6:	4840      	ldr	r0, [pc, #256]	; (8005df8 <PRT_Report+0x1a4>)
 8005cf8:	f7fa fa70 	bl	80001dc <strlen>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4b3d      	ldr	r3, [pc, #244]	; (8005df8 <PRT_Report+0x1a4>)
 8005d02:	4413      	add	r3, r2
 8005d04:	4a3f      	ldr	r2, [pc, #252]	; (8005e04 <PRT_Report+0x1b0>)
 8005d06:	461d      	mov	r5, r3
 8005d08:	4614      	mov	r4, r2
 8005d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d0c:	6028      	str	r0, [r5, #0]
 8005d0e:	6069      	str	r1, [r5, #4]
 8005d10:	60aa      	str	r2, [r5, #8]
 8005d12:	60eb      	str	r3, [r5, #12]
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	6128      	str	r0, [r5, #16]
 8005d18:	7923      	ldrb	r3, [r4, #4]
 8005d1a:	752b      	strb	r3, [r5, #20]

			  for(int idx = 0; idx < strlen(pData); )
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e021      	b.n	8005d66 <PRT_Report+0x112>
			  {
				  startIdx  =  idx;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	827b      	strh	r3, [r7, #18]
				  startAddr = (pData+startIdx);
 8005d26:	8a7b      	ldrh	r3, [r7, #18]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
				  lastAddr   = (uint8_t *)strstr(pData+startIdx, "\r\n" );
 8005d2e:	8a7b      	ldrh	r3, [r7, #18]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	4934      	ldr	r1, [pc, #208]	; (8005e08 <PRT_Report+0x1b4>)
 8005d36:	4618      	mov	r0, r3
 8005d38:	f002 f831 	bl	8007d9e <strstr>
 8005d3c:	60b8      	str	r0, [r7, #8]

				  lastIdx = lastAddr - startAddr;
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	823b      	strh	r3, [r7, #16]

				  idx = idx  + lastIdx;
 8005d46:	8a3b      	ldrh	r3, [r7, #16]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

				  fun2(pData, startIdx, lastIdx);
 8005d4e:	8a3a      	ldrh	r2, [r7, #16]
 8005d50:	8a7b      	ldrh	r3, [r7, #18]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f8cf 	bl	8005ef8 <fun2>

				  idx++;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
				  idx++;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3301      	adds	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
			  for(int idx = 0; idx < strlen(pData); )
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fa fa38 	bl	80001dc <strlen>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d8d6      	bhi.n	8005d22 <PRT_Report+0xce>
			  }//end -for(idx)
		  }//end- if()

	  	  strcat(dData," showpage \r\n");
 8005d74:	4820      	ldr	r0, [pc, #128]	; (8005df8 <PRT_Report+0x1a4>)
 8005d76:	f7fa fa31 	bl	80001dc <strlen>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <PRT_Report+0x1a4>)
 8005d80:	4413      	add	r3, r2
 8005d82:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <PRT_Report+0x1b8>)
 8005d84:	461c      	mov	r4, r3
 8005d86:	4613      	mov	r3, r2
 8005d88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d8a:	6020      	str	r0, [r4, #0]
 8005d8c:	6061      	str	r1, [r4, #4]
 8005d8e:	60a2      	str	r2, [r4, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	7323      	strb	r3, [r4, #12]
		  strcat(dData, "18   745  moveto \r\n");
 8005d94:	4818      	ldr	r0, [pc, #96]	; (8005df8 <PRT_Report+0x1a4>)
 8005d96:	f7fa fa21 	bl	80001dc <strlen>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <PRT_Report+0x1a4>)
 8005da0:	4413      	add	r3, r2
 8005da2:	4a1b      	ldr	r2, [pc, #108]	; (8005e10 <PRT_Report+0x1bc>)
 8005da4:	461d      	mov	r5, r3
 8005da6:	4614      	mov	r4, r2
 8005da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005daa:	6028      	str	r0, [r5, #0]
 8005dac:	6069      	str	r1, [r5, #4]
 8005dae:	60aa      	str	r2, [r5, #8]
 8005db0:	60eb      	str	r3, [r5, #12]
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	6128      	str	r0, [r5, #16]
		  strcat(dData, " showpage \r\n");
 8005db6:	4810      	ldr	r0, [pc, #64]	; (8005df8 <PRT_Report+0x1a4>)
 8005db8:	f7fa fa10 	bl	80001dc <strlen>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <PRT_Report+0x1a4>)
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <PRT_Report+0x1c0>)
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	4613      	mov	r3, r2
 8005dca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005dcc:	6020      	str	r0, [r4, #0]
 8005dce:	6061      	str	r1, [r4, #4]
 8005dd0:	60a2      	str	r2, [r4, #8]
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	81a3      	strh	r3, [r4, #12]

		  HAL_UART_Transmit(&huart2, dData, strlen(dData), 3000);
 8005dd6:	4808      	ldr	r0, [pc, #32]	; (8005df8 <PRT_Report+0x1a4>)
 8005dd8:	f7fa fa00 	bl	80001dc <strlen>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005de4:	4904      	ldr	r1, [pc, #16]	; (8005df8 <PRT_Report+0x1a4>)
 8005de6:	480c      	ldr	r0, [pc, #48]	; (8005e18 <PRT_Report+0x1c4>)
 8005de8:	f7fd fabb 	bl	8003362 <HAL_UART_Transmit>
return dData;
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <PRT_Report+0x1a4>)

}//end-PRT_Report()
 8005dee:	4618      	mov	r0, r3
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000128 	.word	0x20000128
 8005dfc:	08007ed4 	.word	0x08007ed4
 8005e00:	08007f0c 	.word	0x08007f0c
 8005e04:	08007f44 	.word	0x08007f44
 8005e08:	08007f5c 	.word	0x08007f5c
 8005e0c:	08007f60 	.word	0x08007f60
 8005e10:	08007f70 	.word	0x08007f70
 8005e14:	08007f84 	.word	0x08007f84
 8005e18:	200000c4 	.word	0x200000c4

08005e1c <SendDataOnPrinter>:
 * @ buff :  received data
 */


uint8_t SendDataOnPrinter(USBH_HandleTypeDef *phost, PRT_HandleTypeDef *PRT_Handle, uint8_t *buff)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b09a      	sub	sp, #104	; 0x68
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
	uint8_t temp[64],pktcnt=0,status;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint16_t XferSize=0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	memset(temp,0,64);
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	2240      	movs	r2, #64	; 0x40
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fedd 	bl	8007bfc <memset>
	XferSize = strlen(buff);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fa f9ca 	bl	80001dc <strlen>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e52:	e03f      	b.n	8005ed4 <SendDataOnPrinter+0xb8>
	  {
			// Number of packets are important because the max packet size is decided and can not send more than that.
			// Here in this case is 64 bytes. It is already decided by device/configuration structures.
			 for(int j=0; j < PRT_Handle->length; j++)
 8005e54:	2300      	movs	r3, #0
 8005e56:	657b      	str	r3, [r7, #84]	; 0x54
 8005e58:	e00f      	b.n	8005e7a <SendDataOnPrinter+0x5e>
			 {
				 temp[j] = buff[i+j];
 8005e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5e:	4413      	add	r3, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4413      	add	r3, r2
 8005e66:	7819      	ldrb	r1, [r3, #0]
 8005e68:	f107 0210 	add.w	r2, r7, #16
 8005e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6e:	4413      	add	r3, r2
 8005e70:	460a      	mov	r2, r1
 8005e72:	701a      	strb	r2, [r3, #0]
			 for(int j=0; j < PRT_Handle->length; j++)
 8005e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e76:	3301      	adds	r3, #1
 8005e78:	657b      	str	r3, [r7, #84]	; 0x54
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	891b      	ldrh	r3, [r3, #8]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e82:	4293      	cmp	r3, r2
 8005e84:	dbe9      	blt.n	8005e5a <SendDataOnPrinter+0x3e>
			 }//for(j)
			 PRT_Handle->buff = temp;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f107 0210 	add.w	r2, r7, #16
 8005e8c:	615a      	str	r2, [r3, #20]
			 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->InPipe, 0);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6959      	ldr	r1, [r3, #20]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	891a      	ldrh	r2, [r3, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	9000      	str	r0, [sp, #0]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 facb 	bl	800743a <USBH_BulkSendData>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			 memset(temp,0,64);
 8005eaa:	f107 0310 	add.w	r3, r7, #16
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fea2 	bl	8007bfc <memset>
			 USBH_Delay(10);
 8005eb8:	200a      	movs	r0, #10
 8005eba:	f001 fe2e 	bl	8007b1a <USBH_Delay>
			 pktcnt++;
 8005ebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	891b      	ldrh	r3, [r3, #8]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed0:	4413      	add	r3, r2
 8005ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	891b      	ldrh	r3, [r3, #8]
 8005ede:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8005ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d9b3      	bls.n	8005e54 <SendDataOnPrinter+0x38>
	}

	 return status;
 8005eec:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3760      	adds	r7, #96	; 0x60
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <fun2>:
 * @ lastIdx : last  index
 */


void fun2(uint8_t *pData, uint16_t startIdx, uint16_t lastIdx)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b0b7      	sub	sp, #220	; 0xdc
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
 8005f04:	4613      	mov	r3, r2
 8005f06:	803b      	strh	r3, [r7, #0]
	uint16_t idx=0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint8_t temp[200];
	memset(temp,0,200);
 8005f0e:	f107 030c 	add.w	r3, r7, #12
 8005f12:	22c8      	movs	r2, #200	; 0xc8
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fe70 	bl	8007bfc <memset>
	strcat(dData,"(");
 8005f1c:	4822      	ldr	r0, [pc, #136]	; (8005fa8 <fun2+0xb0>)
 8005f1e:	f7fa f95d 	bl	80001dc <strlen>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <fun2+0xb0>)
 8005f28:	4413      	add	r3, r2
 8005f2a:	4920      	ldr	r1, [pc, #128]	; (8005fac <fun2+0xb4>)
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	460b      	mov	r3, r1
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	8013      	strh	r3, [r2, #0]
	while( idx <  lastIdx )
 8005f34:	e010      	b.n	8005f58 <fun2+0x60>
	{
		temp[idx++] =  pData[startIdx++];
 8005f36:	887b      	ldrh	r3, [r7, #2]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	807a      	strh	r2, [r7, #2]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	441a      	add	r2, r3
 8005f42:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	f8a7 10d6 	strh.w	r1, [r7, #214]	; 0xd6
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8005f52:	440b      	add	r3, r1
 8005f54:	f803 2ccc 	strb.w	r2, [r3, #-204]
	while( idx <  lastIdx )
 8005f58:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8005f5c:	883b      	ldrh	r3, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3e9      	bcc.n	8005f36 <fun2+0x3e>
	}
	temp[idx] = '\0';
 8005f62:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8005f66:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8005f6a:	4413      	add	r3, r2
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f803 2ccc 	strb.w	r2, [r3, #-204]
	strcat(dData,temp);
 8005f72:	f107 030c 	add.w	r3, r7, #12
 8005f76:	4619      	mov	r1, r3
 8005f78:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <fun2+0xb0>)
 8005f7a:	f001 ff01 	bl	8007d80 <strcat>
	strcat(dData, ") showline \r\n");
 8005f7e:	480a      	ldr	r0, [pc, #40]	; (8005fa8 <fun2+0xb0>)
 8005f80:	f7fa f92c 	bl	80001dc <strlen>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <fun2+0xb0>)
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <fun2+0xb8>)
 8005f8e:	461c      	mov	r4, r3
 8005f90:	4613      	mov	r3, r2
 8005f92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f94:	6020      	str	r0, [r4, #0]
 8005f96:	6061      	str	r1, [r4, #4]
 8005f98:	60a2      	str	r2, [r4, #8]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	81a3      	strh	r3, [r4, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	37dc      	adds	r7, #220	; 0xdc
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000128 	.word	0x20000128
 8005fac:	08007f94 	.word	0x08007f94
 8005fb0:	08007f98 	.word	0x08007f98

08005fb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e029      	b.n	8006020 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f81f 	bl	8006028 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f001 fbcb 	bl	80077b4 <USBH_LL_Init>

  return USBH_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e009      	b.n	800604e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	33e0      	adds	r3, #224	; 0xe0
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b0e      	cmp	r3, #14
 8006052:	d9f2      	bls.n	800603a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e009      	b.n	800606e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d3f1      	bcc.n	800605a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d016      	beq.n	8006112 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060f4:	1c59      	adds	r1, r3, #1
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	33de      	adds	r3, #222	; 0xde
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	e004      	b.n	8006116 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800610c:	2302      	movs	r3, #2
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e001      	b.n	8006116 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006112:	2302      	movs	r3, #2
 8006114:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	4608      	mov	r0, r1
 800612e:	4611      	mov	r1, r2
 8006130:	461a      	mov	r2, r3
 8006132:	4603      	mov	r3, r0
 8006134:	70fb      	strb	r3, [r7, #3]
 8006136:	460b      	mov	r3, r1
 8006138:	70bb      	strb	r3, [r7, #2]
 800613a:	4613      	mov	r3, r2
 800613c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800614c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800614e:	e025      	b.n	800619c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	221a      	movs	r2, #26
 8006154:	fb02 f303 	mul.w	r3, r2, r3
 8006158:	3308      	adds	r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	3302      	adds	r3, #2
 8006160:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	795b      	ldrb	r3, [r3, #5]
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	429a      	cmp	r2, r3
 800616a:	d002      	beq.n	8006172 <USBH_FindInterface+0x4e>
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2bff      	cmp	r3, #255	; 0xff
 8006170:	d111      	bne.n	8006196 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006176:	78ba      	ldrb	r2, [r7, #2]
 8006178:	429a      	cmp	r2, r3
 800617a:	d002      	beq.n	8006182 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800617c:	78bb      	ldrb	r3, [r7, #2]
 800617e:	2bff      	cmp	r3, #255	; 0xff
 8006180:	d109      	bne.n	8006196 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006186:	787a      	ldrb	r2, [r7, #1]
 8006188:	429a      	cmp	r2, r3
 800618a:	d002      	beq.n	8006192 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800618c:	787b      	ldrb	r3, [r7, #1]
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d101      	bne.n	8006196 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	e006      	b.n	80061a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	3301      	adds	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d9d6      	bls.n	8006150 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061a2:	23ff      	movs	r3, #255	; 0xff
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 fb37 	bl	800782c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80061be:	2101      	movs	r1, #1
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fc51 	bl	8007a68 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af04      	add	r7, sp, #16
 80061d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80061d8:	2302      	movs	r3, #2
 80061da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d102      	bne.n	80061f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2203      	movs	r2, #3
 80061f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b0b      	cmp	r3, #11
 80061fa:	f200 81b3 	bhi.w	8006564 <USBH_Process+0x394>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USBH_Process+0x34>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006235 	.word	0x08006235
 8006208:	08006267 	.word	0x08006267
 800620c:	080062cf 	.word	0x080062cf
 8006210:	080064ff 	.word	0x080064ff
 8006214:	08006565 	.word	0x08006565
 8006218:	08006373 	.word	0x08006373
 800621c:	080064a5 	.word	0x080064a5
 8006220:	080063a9 	.word	0x080063a9
 8006224:	080063c9 	.word	0x080063c9
 8006228:	080063e9 	.word	0x080063e9
 800622c:	08006417 	.word	0x08006417
 8006230:	080064e7 	.word	0x080064e7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8193 	beq.w	8006568 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006248:	20c8      	movs	r0, #200	; 0xc8
 800624a:	f001 fc66 	bl	8007b1a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fb49 	bl	80078e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006264:	e180      	b.n	8006568 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800627e:	e182      	b.n	8006586 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628a:	d914      	bls.n	80062b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006292:	3301      	adds	r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d903      	bls.n	80062ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	220d      	movs	r2, #13
 80062aa:	701a      	strb	r2, [r3, #0]
      break;
 80062ac:	e16b      	b.n	8006586 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
      break;
 80062b4:	e167      	b.n	8006586 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80062bc:	f103 020a 	add.w	r2, r3, #10
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80062c6:	200a      	movs	r0, #10
 80062c8:	f001 fc27 	bl	8007b1a <USBH_Delay>
      break;
 80062cc:	e15b      	b.n	8006586 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062de:	2104      	movs	r1, #4
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80062e4:	2064      	movs	r0, #100	; 0x64
 80062e6:	f001 fc18 	bl	8007b1a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fad4 	bl	8007898 <USBH_LL_GetSpeed>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2205      	movs	r2, #5
 80062fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006300:	2100      	movs	r1, #0
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 f8ed 	bl	80074e2 <USBH_AllocPipe>
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f8e5 	bl	80074e2 <USBH_AllocPipe>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7919      	ldrb	r1, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006334:	b292      	uxth	r2, r2
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4603      	mov	r3, r0
 8006340:	2280      	movs	r2, #128	; 0x80
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f89e 	bl	8007484 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7959      	ldrb	r1, [r3, #5]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800635c:	b292      	uxth	r2, r2
 800635e:	9202      	str	r2, [sp, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	9201      	str	r2, [sp, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	4603      	mov	r3, r0
 8006368:	2200      	movs	r2, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 f88a 	bl	8007484 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006370:	e109      	b.n	8006586 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f90c 	bl	8006590 <USBH_HandleEnum>
 8006378:	4603      	mov	r3, r0
 800637a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 80f3 	bne.w	800656c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006394:	2b01      	cmp	r3, #1
 8006396:	d103      	bne.n	80063a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2208      	movs	r2, #8
 800639c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800639e:	e0e5      	b.n	800656c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2207      	movs	r2, #7
 80063a4:	701a      	strb	r2, [r3, #0]
      break;
 80063a6:	e0e1      	b.n	800656c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80de 	beq.w	8006570 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063ba:	2101      	movs	r1, #1
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2208      	movs	r2, #8
 80063c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80063c6:	e0d3      	b.n	8006570 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc20 	bl	8006c18 <USBH_SetCfg>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 80ca 	bne.w	8006574 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2209      	movs	r2, #9
 80063e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063e6:	e0c5      	b.n	8006574 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80063f6:	2101      	movs	r1, #1
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fc30 	bl	8006c5e <USBH_SetFeature>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 80b9 	bne.w	8006578 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	220a      	movs	r2, #10
 800640a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800640c:	e0b4      	b.n	8006578 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	220a      	movs	r2, #10
 8006412:	701a      	strb	r2, [r3, #0]
      break;
 8006414:	e0b0      	b.n	8006578 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80ad 	beq.w	800657c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e016      	b.n	800645e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	32de      	adds	r2, #222	; 0xde
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	791a      	ldrb	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006442:	429a      	cmp	r2, r3
 8006444:	d108      	bne.n	8006458 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006446:	7bfa      	ldrb	r2, [r7, #15]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	32de      	adds	r2, #222	; 0xde
 800644c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006456:	e005      	b.n	8006464 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	3301      	adds	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0e5      	beq.n	8006430 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2206      	movs	r2, #6
 8006484:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800648c:	2103      	movs	r1, #3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006492:	e073      	b.n	800657c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	220d      	movs	r2, #13
 8006498:	701a      	strb	r2, [r3, #0]
      break;
 800649a:	e06f      	b.n	800657c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	220d      	movs	r2, #13
 80064a0:	701a      	strb	r2, [r3, #0]
      break;
 80064a2:	e06b      	b.n	800657c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d017      	beq.n	80064de <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	220b      	movs	r2, #11
 80064ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064cc:	e058      	b.n	8006580 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d154      	bne.n	8006580 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	220d      	movs	r2, #13
 80064da:	701a      	strb	r2, [r3, #0]
      break;
 80064dc:	e050      	b.n	8006580 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	220d      	movs	r2, #13
 80064e2:	701a      	strb	r2, [r3, #0]
      break;
 80064e4:	e04c      	b.n	8006580 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d049      	beq.n	8006584 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
     //   phost->gState = HOST_CLASS_REQUEST;

      }
      break;
 80064fc:	e042      	b.n	8006584 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fd8e 	bl	8006028 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800653a:	2105      	movs	r1, #5
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d107      	bne.n	800655c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fe2b 	bl	80061b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800655a:	e014      	b.n	8006586 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 f965 	bl	800782c <USBH_LL_Start>
      break;
 8006562:	e010      	b.n	8006586 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006564:	bf00      	nop
 8006566:	e00e      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 8006568:	bf00      	nop
 800656a:	e00c      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 800656c:	bf00      	nop
 800656e:	e00a      	b.n	8006586 <USBH_Process+0x3b6>
    break;
 8006570:	bf00      	nop
 8006572:	e008      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 8006574:	bf00      	nop
 8006576:	e006      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <USBH_Process+0x3b6>
      break;
 8006584:	bf00      	nop
  }
  return USBH_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af04      	add	r7, sp, #16
 8006596:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800659c:	2301      	movs	r3, #1
 800659e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b07      	cmp	r3, #7
 80065a6:	f200 81c1 	bhi.w	800692c <USBH_HandleEnum+0x39c>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <USBH_HandleEnum+0x20>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065d1 	.word	0x080065d1
 80065b4:	0800668f 	.word	0x0800668f
 80065b8:	080066f9 	.word	0x080066f9
 80065bc:	08006787 	.word	0x08006787
 80065c0:	080067f1 	.word	0x080067f1
 80065c4:	08006861 	.word	0x08006861
 80065c8:	080068a7 	.word	0x080068a7
 80065cc:	080068ed 	.word	0x080068ed
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80065d0:	2108      	movs	r1, #8
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa50 	bl	8006a78 <USBH_Get_DevDesc>
 80065d8:	4603      	mov	r3, r0
 80065da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d130      	bne.n	8006644 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7919      	ldrb	r1, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006606:	b292      	uxth	r2, r2
 8006608:	9202      	str	r2, [sp, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 ff35 	bl	8007484 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7959      	ldrb	r1, [r3, #5]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800662e:	b292      	uxth	r2, r2
 8006630:	9202      	str	r2, [sp, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	4603      	mov	r3, r0
 800663a:	2200      	movs	r2, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 ff21 	bl	8007484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006642:	e175      	b.n	8006930 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	2b03      	cmp	r3, #3
 8006648:	f040 8172 	bne.w	8006930 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006652:	3301      	adds	r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006662:	2b03      	cmp	r3, #3
 8006664:	d903      	bls.n	800666e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	220d      	movs	r2, #13
 800666a:	701a      	strb	r2, [r3, #0]
      break;
 800666c:	e160      	b.n	8006930 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	795b      	ldrb	r3, [r3, #5]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 ff55 	bl	8007524 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 ff4f 	bl	8007524 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
      break;
 800668c:	e150      	b.n	8006930 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800668e:	2112      	movs	r1, #18
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f9f1 	bl	8006a78 <USBH_Get_DevDesc>
 8006696:	4603      	mov	r3, r0
 8006698:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066a6:	e145      	b.n	8006934 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	f040 8142 	bne.w	8006934 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d903      	bls.n	80066d2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	220d      	movs	r2, #13
 80066ce:	701a      	strb	r2, [r3, #0]
      break;
 80066d0:	e130      	b.n	8006934 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	795b      	ldrb	r3, [r3, #5]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 ff23 	bl	8007524 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	791b      	ldrb	r3, [r3, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 ff1d 	bl	8007524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
      break;
 80066f6:	e11d      	b.n	8006934 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80066f8:	2101      	movs	r1, #1
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa68 	bl	8006bd0 <USBH_SetAddress>
 8006700:	4603      	mov	r3, r0
 8006702:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d132      	bne.n	8006770 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800670a:	2002      	movs	r0, #2
 800670c:	f001 fa05 	bl	8007b1a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2203      	movs	r2, #3
 800671c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7919      	ldrb	r1, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006732:	b292      	uxth	r2, r2
 8006734:	9202      	str	r2, [sp, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	9201      	str	r2, [sp, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4603      	mov	r3, r0
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fe9f 	bl	8007484 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7959      	ldrb	r1, [r3, #5]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800675a:	b292      	uxth	r2, r2
 800675c:	9202      	str	r2, [sp, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	9201      	str	r2, [sp, #4]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	4603      	mov	r3, r0
 8006766:	2200      	movs	r2, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fe8b 	bl	8007484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800676e:	e0e3      	b.n	8006938 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b03      	cmp	r3, #3
 8006774:	f040 80e0 	bne.w	8006938 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	220d      	movs	r2, #13
 800677c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	705a      	strb	r2, [r3, #1]
      break;
 8006784:	e0d8      	b.n	8006938 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006786:	2109      	movs	r1, #9
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f99d 	bl	8006ac8 <USBH_Get_CfgDesc>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800679e:	e0cd      	b.n	800693c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	f040 80ca 	bne.w	800693c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067ae:	3301      	adds	r3, #1
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d903      	bls.n	80067ca <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	220d      	movs	r2, #13
 80067c6:	701a      	strb	r2, [r3, #0]
      break;
 80067c8:	e0b8      	b.n	800693c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	795b      	ldrb	r3, [r3, #5]
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fea7 	bl	8007524 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fea1 	bl	8007524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
      break;
 80067ee:	e0a5      	b.n	800693c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f965 	bl	8006ac8 <USBH_Get_CfgDesc>
 80067fe:	4603      	mov	r3, r0
 8006800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2205      	movs	r2, #5
 800680c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800680e:	e097      	b.n	8006940 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b03      	cmp	r3, #3
 8006814:	f040 8094 	bne.w	8006940 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800681e:	3301      	adds	r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800682e:	2b03      	cmp	r3, #3
 8006830:	d903      	bls.n	800683a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	220d      	movs	r2, #13
 8006836:	701a      	strb	r2, [r3, #0]
      break;
 8006838:	e082      	b.n	8006940 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	795b      	ldrb	r3, [r3, #5]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fe6f 	bl	8007524 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fe69 	bl	8007524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
      break;
 800685e:	e06f      	b.n	8006940 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006866:	2b00      	cmp	r3, #0
 8006868:	d019      	beq.n	800689e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006876:	23ff      	movs	r3, #255	; 0xff
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f949 	bl	8006b10 <USBH_Get_StringDesc>
 800687e:	4603      	mov	r3, r0
 8006880:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2206      	movs	r2, #6
 800688c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800688e:	e059      	b.n	8006944 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d156      	bne.n	8006944 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2206      	movs	r2, #6
 800689a:	705a      	strb	r2, [r3, #1]
      break;
 800689c:	e052      	b.n	8006944 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2206      	movs	r2, #6
 80068a2:	705a      	strb	r2, [r3, #1]
      break;
 80068a4:	e04e      	b.n	8006944 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d019      	beq.n	80068e4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80068bc:	23ff      	movs	r3, #255	; 0xff
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f926 	bl	8006b10 <USBH_Get_StringDesc>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2207      	movs	r2, #7
 80068d2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80068d4:	e038      	b.n	8006948 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d135      	bne.n	8006948 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2207      	movs	r2, #7
 80068e0:	705a      	strb	r2, [r3, #1]
      break;
 80068e2:	e031      	b.n	8006948 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2207      	movs	r2, #7
 80068e8:	705a      	strb	r2, [r3, #1]
      break;
 80068ea:	e02d      	b.n	8006948 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006902:	23ff      	movs	r3, #255	; 0xff
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f903 	bl	8006b10 <USBH_Get_StringDesc>
 800690a:	4603      	mov	r3, r0
 800690c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006918:	e018      	b.n	800694c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d115      	bne.n	800694c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e012      	b.n	800694c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
      break;
 800692a:	e00f      	b.n	800694c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800692c:	bf00      	nop
 800692e:	e00e      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006930:	bf00      	nop
 8006932:	e00c      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006934:	bf00      	nop
 8006936:	e00a      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006938:	bf00      	nop
 800693a:	e008      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 800693c:	bf00      	nop
 800693e:	e006      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006940:	bf00      	nop
 8006942:	e004      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <USBH_HandleEnum+0x3be>
      break;
 800694c:	bf00      	nop
  }
  return Status;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f804 	bl	800699a <USBH_HandleSof>
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b0b      	cmp	r3, #11
 80069aa:	d10a      	bne.n	80069c2 <USBH_HandleSof+0x28>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80069da:	bf00      	nop
}
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80069f6:	bf00      	nop
}
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 ff06 	bl	8007862 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	791b      	ldrb	r3, [r3, #4]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fd61 	bl	8007524 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	795b      	ldrb	r3, [r3, #5]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fd5b 	bl	8007524 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a96:	2100      	movs	r1, #0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f864 	bl	8006b66 <USBH_GetDescriptor>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ab4:	78fa      	ldrb	r2, [r7, #3]
 8006ab6:	b292      	uxth	r2, r2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f000 f8f4 	bl	8006ca6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	331c      	adds	r3, #28
 8006ad8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006ada:	887b      	ldrh	r3, [r7, #2]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f83d 	bl	8006b66 <USBH_GetDescriptor>
 8006aec:	4603      	mov	r3, r0
 8006aee:	72fb      	strb	r3, [r7, #11]
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d107      	bne.n	8006b06 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006afc:	887a      	ldrh	r2, [r7, #2]
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f940 	bl	8006d86 <USBH_ParseCfgDesc>
  }

  return status;
 8006b06:	7afb      	ldrb	r3, [r7, #11]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	72fb      	strb	r3, [r7, #11]
 8006b20:	4613      	mov	r3, r2
 8006b22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b2c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006b34:	893b      	ldrh	r3, [r7, #8]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f812 	bl	8006b66 <USBH_GetDescriptor>
 8006b42:	4603      	mov	r3, r0
 8006b44:	75fb      	strb	r3, [r7, #23]
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b52:	893a      	ldrh	r2, [r7, #8]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fa13 	bl	8006f82 <USBH_ParseStringDesc>
  }

  return status;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	72fb      	strb	r3, [r7, #11]
 8006b74:	4613      	mov	r3, r2
 8006b76:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	789b      	ldrb	r3, [r3, #2]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d11c      	bne.n	8006bba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2206      	movs	r2, #6
 8006b90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	893a      	ldrh	r2, [r7, #8]
 8006b96:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba2:	d104      	bne.n	8006bae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f240 4209 	movw	r2, #1033	; 0x409
 8006baa:	829a      	strh	r2, [r3, #20]
 8006bac:	e002      	b.n	8006bb4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8b3a      	ldrh	r2, [r7, #24]
 8006bb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006bba:	8b3b      	ldrh	r3, [r7, #24]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fa2c 	bl	800701e <USBH_CtlReq>
 8006bc6:	4603      	mov	r3, r0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	789b      	ldrb	r3, [r3, #2]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2205      	movs	r2, #5
 8006bee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c04:	2200      	movs	r2, #0
 8006c06:	2100      	movs	r1, #0
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa08 	bl	800701e <USBH_CtlReq>
 8006c0e:	4603      	mov	r3, r0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	789b      	ldrb	r3, [r3, #2]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10e      	bne.n	8006c4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2209      	movs	r2, #9
 8006c36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	887a      	ldrh	r2, [r7, #2]
 8006c3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9e5 	bl	800701e <USBH_CtlReq>
 8006c54:	4603      	mov	r3, r0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	789b      	ldrb	r3, [r3, #2]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10f      	bne.n	8006c92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9c1 	bl	800701e <USBH_CtlReq>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781a      	ldrb	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	785a      	ldrb	r2, [r3, #1]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3303      	adds	r3, #3
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	791a      	ldrb	r2, [r3, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	795a      	ldrb	r2, [r3, #5]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	799a      	ldrb	r2, [r3, #6]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	79da      	ldrb	r2, [r3, #7]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d939      	bls.n	8006d7a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	3309      	adds	r3, #9
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	330a      	adds	r3, #10
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	330b      	adds	r3, #11
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	330c      	adds	r3, #12
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	330d      	adds	r3, #13
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	7b9a      	ldrb	r2, [r3, #14]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	7bda      	ldrb	r2, [r3, #15]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	7c1a      	ldrb	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	7c5a      	ldrb	r2, [r3, #17]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	745a      	strb	r2, [r3, #17]
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b08a      	sub	sp, #40	; 0x28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	785a      	ldrb	r2, [r3, #1]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3302      	adds	r3, #2
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	3303      	adds	r3, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	791a      	ldrb	r2, [r3, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	795a      	ldrb	r2, [r3, #5]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	799a      	ldrb	r2, [r3, #6]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	79da      	ldrb	r2, [r3, #7]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	7a1a      	ldrb	r2, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d95f      	bls.n	8006ec2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006e02:	2309      	movs	r3, #9
 8006e04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e0a:	e051      	b.n	8006eb0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e0c:	f107 0316 	add.w	r3, r7, #22
 8006e10:	4619      	mov	r1, r3
 8006e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e14:	f000 f8e8 	bl	8006fe8 <USBH_GetNextDesc>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d146      	bne.n	8006eb0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e26:	221a      	movs	r2, #26
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	3302      	adds	r3, #2
 8006e34:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e38:	69f8      	ldr	r0, [r7, #28]
 8006e3a:	f000 f846 	bl	8006eca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e48:	e022      	b.n	8006e90 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e4a:	f107 0316 	add.w	r3, r7, #22
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e52:	f000 f8c9 	bl	8006fe8 <USBH_GetNextDesc>
 8006e56:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b05      	cmp	r3, #5
 8006e5e:	d117      	bne.n	8006e90 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006e68:	3201      	adds	r2, #1
 8006e6a:	00d2      	lsls	r2, r2, #3
 8006e6c:	211a      	movs	r1, #26
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	3308      	adds	r3, #8
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e80:	69b8      	ldr	r0, [r7, #24]
 8006e82:	f000 f851 	bl	8006f28 <USBH_ParseEPDesc>
            ep_ix++;
 8006e86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	791b      	ldrb	r3, [r3, #4]
 8006e94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d204      	bcs.n	8006ea6 <USBH_ParseCfgDesc+0x120>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	885a      	ldrh	r2, [r3, #2]
 8006ea0:	8afb      	ldrh	r3, [r7, #22]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d8d1      	bhi.n	8006e4a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006ea6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d804      	bhi.n	8006ec2 <USBH_ParseCfgDesc+0x13c>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	885a      	ldrh	r2, [r3, #2]
 8006ebc:	8afb      	ldrh	r3, [r7, #22]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d8a4      	bhi.n	8006e0c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3728      	adds	r7, #40	; 0x28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	785a      	ldrb	r2, [r3, #1]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	789a      	ldrb	r2, [r3, #2]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	78da      	ldrb	r2, [r3, #3]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	791a      	ldrb	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	795a      	ldrb	r2, [r3, #5]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	799a      	ldrb	r2, [r3, #6]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	79da      	ldrb	r2, [r3, #7]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	7a1a      	ldrb	r2, [r3, #8]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	721a      	strb	r2, [r3, #8]
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	785a      	ldrb	r2, [r3, #1]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	789a      	ldrb	r2, [r3, #2]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	78da      	ldrb	r2, [r3, #3]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	3304      	adds	r3, #4
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	3305      	adds	r3, #5
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	799a      	ldrb	r2, [r3, #6]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	719a      	strb	r2, [r3, #6]
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d120      	bne.n	8006fdc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	1e9a      	subs	r2, r3, #2
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bf28      	it	cs
 8006fa6:	4613      	movcs	r3, r2
 8006fa8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3302      	adds	r3, #2
 8006fae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	82fb      	strh	r3, [r7, #22]
 8006fb4:	e00b      	b.n	8006fce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006fb6:	8afb      	ldrh	r3, [r7, #22]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006fc8:	8afb      	ldrh	r3, [r7, #22]
 8006fca:	3302      	adds	r3, #2
 8006fcc:	82fb      	strh	r3, [r7, #22]
 8006fce:	8afa      	ldrh	r2, [r7, #22]
 8006fd0:	8abb      	ldrh	r3, [r7, #20]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d3ef      	bcc.n	8006fb6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
  }
}
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	881a      	ldrh	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	4613      	mov	r3, r2
 800702a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	789b      	ldrb	r3, [r3, #2]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d002      	beq.n	800703e <USBH_CtlReq+0x20>
 8007038:	2b02      	cmp	r3, #2
 800703a:	d00f      	beq.n	800705c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800703c:	e027      	b.n	800708e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2202      	movs	r2, #2
 8007054:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
      break;
 800705a:	e018      	b.n	800708e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f81b 	bl	8007098 <USBH_HandleControl>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <USBH_CtlReq+0x54>
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d106      	bne.n	8007080 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	761a      	strb	r2, [r3, #24]
      break;
 800707e:	e005      	b.n	800708c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d102      	bne.n	800708c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
      break;
 800708c:	bf00      	nop
  }
  return status;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7e1b      	ldrb	r3, [r3, #24]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	2b0a      	cmp	r3, #10
 80070b0:	f200 8156 	bhi.w	8007360 <USBH_HandleControl+0x2c8>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <USBH_HandleControl+0x24>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	08007103 	.word	0x08007103
 80070c4:	0800716d 	.word	0x0800716d
 80070c8:	08007193 	.word	0x08007193
 80070cc:	080071cb 	.word	0x080071cb
 80070d0:	080071f5 	.word	0x080071f5
 80070d4:	08007247 	.word	0x08007247
 80070d8:	08007269 	.word	0x08007269
 80070dc:	080072a5 	.word	0x080072a5
 80070e0:	080072cb 	.word	0x080072cb
 80070e4:	08007309 	.word	0x08007309
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f103 0110 	add.w	r1, r3, #16
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	795b      	ldrb	r3, [r3, #5]
 80070f2:	461a      	mov	r2, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f943 	bl	8007380 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	761a      	strb	r2, [r3, #24]
      break;
 8007100:	e139      	b.n	8007376 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	795b      	ldrb	r3, [r3, #5]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc99 	bl	8007a40 <USBH_LL_GetURBState>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d11e      	bne.n	8007156 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7c1b      	ldrb	r3, [r3, #16]
 800711c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007120:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	8adb      	ldrh	r3, [r3, #22]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800712a:	7b7b      	ldrb	r3, [r7, #13]
 800712c:	2b80      	cmp	r3, #128	; 0x80
 800712e:	d103      	bne.n	8007138 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2203      	movs	r2, #3
 8007134:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007136:	e115      	b.n	8007364 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2205      	movs	r2, #5
 800713c:	761a      	strb	r2, [r3, #24]
      break;
 800713e:	e111      	b.n	8007364 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007140:	7b7b      	ldrb	r3, [r7, #13]
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d103      	bne.n	800714e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2209      	movs	r2, #9
 800714a:	761a      	strb	r2, [r3, #24]
      break;
 800714c:	e10a      	b.n	8007364 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2207      	movs	r2, #7
 8007152:	761a      	strb	r2, [r3, #24]
      break;
 8007154:	e106      	b.n	8007364 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d003      	beq.n	8007164 <USBH_HandleControl+0xcc>
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b02      	cmp	r3, #2
 8007160:	f040 8100 	bne.w	8007364 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220b      	movs	r2, #11
 8007168:	761a      	strb	r2, [r3, #24]
      break;
 800716a:	e0fb      	b.n	8007364 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6899      	ldr	r1, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	899a      	ldrh	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	791b      	ldrb	r3, [r3, #4]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f93a 	bl	80073fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	761a      	strb	r2, [r3, #24]
      break;
 8007190:	e0f1      	b.n	8007376 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	791b      	ldrb	r3, [r3, #4]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fc51 	bl	8007a40 <USBH_LL_GetURBState>
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d102      	bne.n	80071ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2209      	movs	r2, #9
 80071ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d102      	bne.n	80071ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80071b4:	2303      	movs	r3, #3
 80071b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071b8:	e0d6      	b.n	8007368 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	f040 80d3 	bne.w	8007368 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	220b      	movs	r2, #11
 80071c6:	761a      	strb	r2, [r3, #24]
      break;
 80071c8:	e0ce      	b.n	8007368 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6899      	ldr	r1, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	899a      	ldrh	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	2001      	movs	r0, #1
 80071d8:	9000      	str	r0, [sp, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8ea 	bl	80073b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2206      	movs	r2, #6
 80071f0:	761a      	strb	r2, [r3, #24]
      break;
 80071f2:	e0c0      	b.n	8007376 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	795b      	ldrb	r3, [r3, #5]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc20 	bl	8007a40 <USBH_LL_GetURBState>
 8007200:	4603      	mov	r3, r0
 8007202:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d103      	bne.n	8007212 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2207      	movs	r2, #7
 800720e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007210:	e0ac      	b.n	800736c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b05      	cmp	r3, #5
 8007216:	d105      	bne.n	8007224 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	220c      	movs	r2, #12
 800721c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800721e:	2303      	movs	r3, #3
 8007220:	73fb      	strb	r3, [r7, #15]
      break;
 8007222:	e0a3      	b.n	800736c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d103      	bne.n	8007232 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2205      	movs	r2, #5
 800722e:	761a      	strb	r2, [r3, #24]
      break;
 8007230:	e09c      	b.n	800736c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b04      	cmp	r3, #4
 8007236:	f040 8099 	bne.w	800736c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	220b      	movs	r2, #11
 800723e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	e092      	b.n	800736c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	2100      	movs	r1, #0
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8d5 	bl	80073fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2208      	movs	r2, #8
 8007264:	761a      	strb	r2, [r3, #24]

      break;
 8007266:	e086      	b.n	8007376 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	791b      	ldrb	r3, [r3, #4]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fbe6 	bl	8007a40 <USBH_LL_GetURBState>
 8007274:	4603      	mov	r3, r0
 8007276:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220d      	movs	r2, #13
 8007282:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007288:	e072      	b.n	8007370 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b04      	cmp	r3, #4
 800728e:	d103      	bne.n	8007298 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	220b      	movs	r2, #11
 8007294:	761a      	strb	r2, [r3, #24]
      break;
 8007296:	e06b      	b.n	8007370 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b05      	cmp	r3, #5
 800729c:	d168      	bne.n	8007370 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800729e:	2303      	movs	r3, #3
 80072a0:	73fb      	strb	r3, [r7, #15]
      break;
 80072a2:	e065      	b.n	8007370 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	795b      	ldrb	r3, [r3, #5]
 80072a8:	2201      	movs	r2, #1
 80072aa:	9200      	str	r2, [sp, #0]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2100      	movs	r1, #0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f87f 	bl	80073b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	220a      	movs	r2, #10
 80072c6:	761a      	strb	r2, [r3, #24]
      break;
 80072c8:	e055      	b.n	8007376 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	795b      	ldrb	r3, [r3, #5]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fbb5 	bl	8007a40 <USBH_LL_GetURBState>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	220d      	movs	r2, #13
 80072e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072ea:	e043      	b.n	8007374 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d103      	bne.n	80072fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2209      	movs	r2, #9
 80072f6:	761a      	strb	r2, [r3, #24]
      break;
 80072f8:	e03c      	b.n	8007374 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d139      	bne.n	8007374 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	220b      	movs	r2, #11
 8007304:	761a      	strb	r2, [r3, #24]
      break;
 8007306:	e035      	b.n	8007374 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7e5b      	ldrb	r3, [r3, #25]
 800730c:	3301      	adds	r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	765a      	strb	r2, [r3, #25]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7e5b      	ldrb	r3, [r3, #25]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d806      	bhi.n	800732a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007328:	e025      	b.n	8007376 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007330:	2106      	movs	r1, #6
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	795b      	ldrb	r3, [r3, #5]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8ee 	bl	8007524 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	791b      	ldrb	r3, [r3, #4]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8e8 	bl	8007524 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800735a:	2302      	movs	r3, #2
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e00a      	b.n	8007376 <USBH_HandleControl+0x2de>

    default:
      break;
 8007360:	bf00      	nop
 8007362:	e008      	b.n	8007376 <USBH_HandleControl+0x2de>
      break;
 8007364:	bf00      	nop
 8007366:	e006      	b.n	8007376 <USBH_HandleControl+0x2de>
      break;
 8007368:	bf00      	nop
 800736a:	e004      	b.n	8007376 <USBH_HandleControl+0x2de>
      break;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <USBH_HandleControl+0x2de>
      break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <USBH_HandleControl+0x2de>
      break;
 8007374:	bf00      	nop
  }

  return status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af04      	add	r7, sp, #16
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800738e:	79f9      	ldrb	r1, [r7, #7]
 8007390:	2300      	movs	r3, #0
 8007392:	9303      	str	r3, [sp, #12]
 8007394:	2308      	movs	r3, #8
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	2300      	movs	r3, #0
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	2200      	movs	r2, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fb1a 	bl	80079de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	460b      	mov	r3, r1
 80073c4:	80fb      	strh	r3, [r7, #6]
 80073c6:	4613      	mov	r3, r2
 80073c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073d8:	7979      	ldrb	r1, [r7, #5]
 80073da:	7e3b      	ldrb	r3, [r7, #24]
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	2301      	movs	r3, #1
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	2200      	movs	r2, #0
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 faf5 	bl	80079de <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af04      	add	r7, sp, #16
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	4611      	mov	r1, r2
 800740a:	461a      	mov	r2, r3
 800740c:	460b      	mov	r3, r1
 800740e:	80fb      	strh	r3, [r7, #6]
 8007410:	4613      	mov	r3, r2
 8007412:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007414:	7979      	ldrb	r1, [r7, #5]
 8007416:	2300      	movs	r3, #0
 8007418:	9303      	str	r3, [sp, #12]
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	2301      	movs	r3, #1
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	2300      	movs	r3, #0
 8007428:	2201      	movs	r2, #1
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fad7 	bl	80079de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007430:	2300      	movs	r3, #0

}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b088      	sub	sp, #32
 800743e:	af04      	add	r7, sp, #16
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	4611      	mov	r1, r2
 8007446:	461a      	mov	r2, r3
 8007448:	460b      	mov	r3, r1
 800744a:	80fb      	strh	r3, [r7, #6]
 800744c:	4613      	mov	r3, r2
 800744e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	763b      	strb	r3, [r7, #24]
  }

 // do_ping = 1U;

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800745e:	7979      	ldrb	r1, [r7, #5]
 8007460:	7e3b      	ldrb	r3, [r7, #24]
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	9302      	str	r3, [sp, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	2301      	movs	r3, #1
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2302      	movs	r3, #2
 8007472:	2200      	movs	r2, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fab2 	bl	80079de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af04      	add	r7, sp, #16
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	4603      	mov	r3, r0
 8007494:	70fb      	strb	r3, [r7, #3]
 8007496:	460b      	mov	r3, r1
 8007498:	70bb      	strb	r3, [r7, #2]
 800749a:	4613      	mov	r3, r2
 800749c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800749e:	7878      	ldrb	r0, [r7, #1]
 80074a0:	78ba      	ldrb	r2, [r7, #2]
 80074a2:	78f9      	ldrb	r1, [r7, #3]
 80074a4:	8b3b      	ldrh	r3, [r7, #24]
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	7d3b      	ldrb	r3, [r7, #20]
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	7c3b      	ldrb	r3, [r7, #16]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4603      	mov	r3, r0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa45 	bl	8007942 <USBH_LL_OpenPipe>

  return USBH_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa64 	bl	80079a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f836 	bl	8007560 <USBH_GetFreePipe>
 80074f4:	4603      	mov	r3, r0
 80074f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074f8:	89fb      	ldrh	r3, [r7, #14]
 80074fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00a      	beq.n	8007518 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	33e0      	adds	r3, #224	; 0xe0
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007518:	89fb      	ldrh	r3, [r7, #14]
 800751a:	b2db      	uxtb	r3, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	2b0a      	cmp	r3, #10
 8007534:	d80d      	bhi.n	8007552 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	33e0      	adds	r3, #224	; 0xe0
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	78fb      	ldrb	r3, [r7, #3]
 8007544:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	33e0      	adds	r3, #224	; 0xe0
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
 8007570:	e00f      	b.n	8007592 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	33e0      	adds	r3, #224	; 0xe0
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	b29b      	uxth	r3, r3
 800758a:	e007      	b.n	800759c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	3301      	adds	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2b0a      	cmp	r3, #10
 8007596:	d9ec      	bls.n	8007572 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007598:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80075ac:	2201      	movs	r2, #1
 80075ae:	490e      	ldr	r1, [pc, #56]	; (80075e8 <MX_USB_HOST_Init+0x40>)
 80075b0:	480e      	ldr	r0, [pc, #56]	; (80075ec <MX_USB_HOST_Init+0x44>)
 80075b2:	f7fe fcff 	bl	8005fb4 <USBH_Init>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80075bc:	f7f9 f878 	bl	80006b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 80075c0:	490b      	ldr	r1, [pc, #44]	; (80075f0 <MX_USB_HOST_Init+0x48>)
 80075c2:	480a      	ldr	r0, [pc, #40]	; (80075ec <MX_USB_HOST_Init+0x44>)
 80075c4:	f7fe fd84 	bl	80060d0 <USBH_RegisterClass>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80075ce:	f7f9 f86f 	bl	80006b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80075d2:	4806      	ldr	r0, [pc, #24]	; (80075ec <MX_USB_HOST_Init+0x44>)
 80075d4:	f7fe fdec 	bl	80061b0 <USBH_Start>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80075de:	f7f9 f867 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80075e2:	bf00      	nop
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	08007609 	.word	0x08007609
 80075ec:	200008f8 	.word	0x200008f8
 80075f0:	2000000c 	.word	0x2000000c

080075f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80075f8:	4802      	ldr	r0, [pc, #8]	; (8007604 <MX_USB_HOST_Process+0x10>)
 80075fa:	f7fe fde9 	bl	80061d0 <USBH_Process>
}
 80075fe:	bf00      	nop
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200008f8 	.word	0x200008f8

08007608 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	3b01      	subs	r3, #1
 8007618:	2b04      	cmp	r3, #4
 800761a:	d819      	bhi.n	8007650 <USBH_UserProcess+0x48>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <USBH_UserProcess+0x1c>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007651 	.word	0x08007651
 8007628:	08007641 	.word	0x08007641
 800762c:	08007651 	.word	0x08007651
 8007630:	08007649 	.word	0x08007649
 8007634:	08007639 	.word	0x08007639
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007638:	4b09      	ldr	r3, [pc, #36]	; (8007660 <USBH_UserProcess+0x58>)
 800763a:	2203      	movs	r2, #3
 800763c:	701a      	strb	r2, [r3, #0]
  break;
 800763e:	e008      	b.n	8007652 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007640:	4b07      	ldr	r3, [pc, #28]	; (8007660 <USBH_UserProcess+0x58>)
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
  break;
 8007646:	e004      	b.n	8007652 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <USBH_UserProcess+0x58>)
 800764a:	2201      	movs	r2, #1
 800764c:	701a      	strb	r2, [r3, #0]
  break;
 800764e:	e000      	b.n	8007652 <USBH_UserProcess+0x4a>

  default:
  break;
 8007650:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	200000b4 	.word	0x200000b4

08007664 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	609a      	str	r2, [r3, #8]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007684:	d13a      	bne.n	80076fc <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	6313      	str	r3, [r2, #48]	; 0x30
 8007696:	4b1b      	ldr	r3, [pc, #108]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	613b      	str	r3, [r7, #16]
 80076a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80076a2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80076a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a8:	2302      	movs	r3, #2
 80076aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076b0:	2303      	movs	r3, #3
 80076b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076b4:	230a      	movs	r3, #10
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076b8:	f107 0314 	add.w	r3, r7, #20
 80076bc:	4619      	mov	r1, r3
 80076be:	4812      	ldr	r0, [pc, #72]	; (8007708 <HAL_HCD_MspInit+0xa4>)
 80076c0:	f7f9 faee 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076c4:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	4a0e      	ldr	r2, [pc, #56]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 80076ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ce:	6353      	str	r3, [r2, #52]	; 0x34
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	4a0a      	ldr	r2, [pc, #40]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 80076da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076de:	6453      	str	r3, [r2, #68]	; 0x44
 80076e0:	4b08      	ldr	r3, [pc, #32]	; (8007704 <HAL_HCD_MspInit+0xa0>)
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076ec:	2200      	movs	r2, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	2043      	movs	r0, #67	; 0x43
 80076f2:	f7f9 fa7c 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076f6:	2043      	movs	r0, #67	; 0x43
 80076f8:	f7f9 fa95 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076fc:	bf00      	nop
 80076fe:	3728      	adds	r7, #40	; 0x28
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	40020000 	.word	0x40020000

0800770c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f92b 	bl	8006976 <USBH_LL_IncTimer>
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff f963 	bl	8006a02 <USBH_LL_Connect>
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f96c 	bl	8006a30 <USBH_LL_Disconnect>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
 800776c:	4613      	mov	r3, r2
 800776e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff f91d 	bl	80069ca <USBH_LL_PortEnabled>
} 
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff f91d 	bl	80069e6 <USBH_LL_PortDisabled>
} 
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d12a      	bne.n	800781c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <USBH_LL_Init+0x74>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a15      	ldr	r2, [pc, #84]	; (8007828 <USBH_LL_Init+0x74>)
 80077d2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <USBH_LL_Init+0x74>)
 80077d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077dc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80077de:	4b12      	ldr	r3, [pc, #72]	; (8007828 <USBH_LL_Init+0x74>)
 80077e0:	2208      	movs	r2, #8
 80077e2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <USBH_LL_Init+0x74>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <USBH_LL_Init+0x74>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <USBH_LL_Init+0x74>)
 80077f2:	2202      	movs	r2, #2
 80077f4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <USBH_LL_Init+0x74>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80077fc:	480a      	ldr	r0, [pc, #40]	; (8007828 <USBH_LL_Init+0x74>)
 80077fe:	f7f9 fc04 	bl	800100a <HAL_HCD_Init>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007808:	f7f8 ff52 	bl	80006b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800780c:	4806      	ldr	r0, [pc, #24]	; (8007828 <USBH_LL_Init+0x74>)
 800780e:	f7fa f807 	bl	8001820 <HAL_HCD_GetCurrentFrame>
 8007812:	4603      	mov	r3, r0
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f89e 	bl	8006958 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000cd0 	.word	0x20000cd0

0800782c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007842:	4618      	mov	r0, r3
 8007844:	f7f9 ff74 	bl	8001730 <HAL_HCD_Start>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f96e 	bl	8007b30 <USBH_Get_USB_Status>
 8007854:	4603      	mov	r3, r0
 8007856:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007858:	7bbb      	ldrb	r3, [r7, #14]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 ff7c 	bl	8001776 <HAL_HCD_Stop>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f953 	bl	8007b30 <USBH_Get_USB_Status>
 800788a:	4603      	mov	r3, r0
 800788c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800788e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f9 ffc6 	bl	800183c <HAL_HCD_GetCurrentSpeed>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d00c      	beq.n	80078d0 <USBH_LL_GetSpeed+0x38>
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d80d      	bhi.n	80078d6 <USBH_LL_GetSpeed+0x3e>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <USBH_LL_GetSpeed+0x2c>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d003      	beq.n	80078ca <USBH_LL_GetSpeed+0x32>
 80078c2:	e008      	b.n	80078d6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73fb      	strb	r3, [r7, #15]
    break;
 80078c8:	e008      	b.n	80078dc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80078ca:	2301      	movs	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
    break;
 80078ce:	e005      	b.n	80078dc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80078d0:	2302      	movs	r3, #2
 80078d2:	73fb      	strb	r3, [r7, #15]
    break;
 80078d4:	e002      	b.n	80078dc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80078d6:	2301      	movs	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]
    break;
 80078da:	bf00      	nop
  }
  return  speed;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7f9 ff57 	bl	80017b0 <HAL_HCD_ResetPort>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f911 	bl	8007b30 <USBH_Get_USB_Status>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007912:	7bbb      	ldrb	r3, [r7, #14]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7f9 ff5f 	bl	80017f6 <HAL_HCD_HC_GetXferCount>
 8007938:	4603      	mov	r3, r0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007942:	b590      	push	{r4, r7, lr}
 8007944:	b089      	sub	sp, #36	; 0x24
 8007946:	af04      	add	r7, sp, #16
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	461a      	mov	r2, r3
 8007950:	4603      	mov	r3, r0
 8007952:	70fb      	strb	r3, [r7, #3]
 8007954:	460b      	mov	r3, r1
 8007956:	70bb      	strb	r3, [r7, #2]
 8007958:	4613      	mov	r3, r2
 800795a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800796a:	787c      	ldrb	r4, [r7, #1]
 800796c:	78ba      	ldrb	r2, [r7, #2]
 800796e:	78f9      	ldrb	r1, [r7, #3]
 8007970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4623      	mov	r3, r4
 8007982:	f7f9 fba4 	bl	80010ce <HAL_HCD_HC_Init>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f8cf 	bl	8007b30 <USBH_Get_USB_Status>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007996:	7bbb      	ldrb	r3, [r7, #14]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}

080079a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f9 fc1d 	bl	80011fe <HAL_HCD_HC_Halt>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f8b0 	bl	8007b30 <USBH_Get_USB_Status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80079de:	b590      	push	{r4, r7, lr}
 80079e0:	b089      	sub	sp, #36	; 0x24
 80079e2:	af04      	add	r7, sp, #16
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	461a      	mov	r2, r3
 80079ec:	4603      	mov	r3, r0
 80079ee:	70fb      	strb	r3, [r7, #3]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70bb      	strb	r3, [r7, #2]
 80079f4:	4613      	mov	r3, r2
 80079f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a06:	787c      	ldrb	r4, [r7, #1]
 8007a08:	78ba      	ldrb	r2, [r7, #2]
 8007a0a:	78f9      	ldrb	r1, [r7, #3]
 8007a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a10:	9303      	str	r3, [sp, #12]
 8007a12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a14:	9302      	str	r3, [sp, #8]
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	4623      	mov	r3, r4
 8007a22:	f7f9 fc0f 	bl	8001244 <HAL_HCD_HC_SubmitRequest>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f87f 	bl	8007b30 <USBH_Get_USB_Status>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd90      	pop	{r4, r7, pc}

08007a40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f9 feb8 	bl	80017cc <HAL_HCD_HC_GetURBState>
 8007a5c:	4603      	mov	r3, r0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_FS)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10f      	bne.n	8007a9e <USBH_LL_DriverVBUS+0x36>
  {
    if (state == 0)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <USBH_LL_DriverVBUS+0x2a>
    {
      /* Drive high Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8007a84:	2200      	movs	r2, #0
 8007a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a8a:	4809      	ldr	r0, [pc, #36]	; (8007ab0 <USBH_LL_DriverVBUS+0x48>)
 8007a8c:	f7f9 faa4 	bl	8000fd8 <HAL_GPIO_WritePin>
 8007a90:	e005      	b.n	8007a9e <USBH_LL_DriverVBUS+0x36>
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8007a92:	2200      	movs	r2, #0
 8007a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a98:	4805      	ldr	r0, [pc, #20]	; (8007ab0 <USBH_LL_DriverVBUS+0x48>)
 8007a9a:	f7f9 fa9d 	bl	8000fd8 <HAL_GPIO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007a9e:	20c8      	movs	r0, #200	; 0xc8
 8007aa0:	f7f8 ffa6 	bl	80009f0 <HAL_Delay>
  return USBH_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40020000 	.word	0x40020000

08007ab4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007aca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	440b      	add	r3, r1
 8007ada:	333b      	adds	r3, #59	; 0x3b
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	68f9      	ldr	r1, [r7, #12]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	3350      	adds	r3, #80	; 0x50
 8007af2:	78ba      	ldrb	r2, [r7, #2]
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e009      	b.n	8007b0c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	440b      	add	r3, r1
 8007b06:	3351      	adds	r3, #81	; 0x51
 8007b08:	78ba      	ldrb	r2, [r7, #2]
 8007b0a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7f8 ff64 	bl	80009f0 <HAL_Delay>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d817      	bhi.n	8007b74 <USBH_Get_USB_Status+0x44>
 8007b44:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <USBH_Get_USB_Status+0x1c>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007b63 	.word	0x08007b63
 8007b54:	08007b69 	.word	0x08007b69
 8007b58:	08007b6f 	.word	0x08007b6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b60:	e00b      	b.n	8007b7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	73fb      	strb	r3, [r7, #15]
    break;
 8007b66:	e008      	b.n	8007b7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6c:	e005      	b.n	8007b7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	73fb      	strb	r3, [r7, #15]
    break;
 8007b72:	e002      	b.n	8007b7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007b74:	2302      	movs	r3, #2
 8007b76:	73fb      	strb	r3, [r7, #15]
    break;
 8007b78:	bf00      	nop
  }
  return usb_status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <__errno>:
 8007b88:	4b01      	ldr	r3, [pc, #4]	; (8007b90 <__errno+0x8>)
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	2000002c 	.word	0x2000002c

08007b94 <__libc_init_array>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	4d0d      	ldr	r5, [pc, #52]	; (8007bcc <__libc_init_array+0x38>)
 8007b98:	4c0d      	ldr	r4, [pc, #52]	; (8007bd0 <__libc_init_array+0x3c>)
 8007b9a:	1b64      	subs	r4, r4, r5
 8007b9c:	10a4      	asrs	r4, r4, #2
 8007b9e:	2600      	movs	r6, #0
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	d109      	bne.n	8007bb8 <__libc_init_array+0x24>
 8007ba4:	4d0b      	ldr	r5, [pc, #44]	; (8007bd4 <__libc_init_array+0x40>)
 8007ba6:	4c0c      	ldr	r4, [pc, #48]	; (8007bd8 <__libc_init_array+0x44>)
 8007ba8:	f000 f91e 	bl	8007de8 <_init>
 8007bac:	1b64      	subs	r4, r4, r5
 8007bae:	10a4      	asrs	r4, r4, #2
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	42a6      	cmp	r6, r4
 8007bb4:	d105      	bne.n	8007bc2 <__libc_init_array+0x2e>
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}
 8007bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bbc:	4798      	blx	r3
 8007bbe:	3601      	adds	r6, #1
 8007bc0:	e7ee      	b.n	8007ba0 <__libc_init_array+0xc>
 8007bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc6:	4798      	blx	r3
 8007bc8:	3601      	adds	r6, #1
 8007bca:	e7f2      	b.n	8007bb2 <__libc_init_array+0x1e>
 8007bcc:	08007fc8 	.word	0x08007fc8
 8007bd0:	08007fc8 	.word	0x08007fc8
 8007bd4:	08007fc8 	.word	0x08007fc8
 8007bd8:	08007fcc 	.word	0x08007fcc

08007bdc <malloc>:
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <malloc+0xc>)
 8007bde:	4601      	mov	r1, r0
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	f000 b863 	b.w	8007cac <_malloc_r>
 8007be6:	bf00      	nop
 8007be8:	2000002c 	.word	0x2000002c

08007bec <free>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	; (8007bf8 <free+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f000 b80b 	b.w	8007c0c <_free_r>
 8007bf6:	bf00      	nop
 8007bf8:	2000002c 	.word	0x2000002c

08007bfc <memset>:
 8007bfc:	4402      	add	r2, r0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d100      	bne.n	8007c06 <memset+0xa>
 8007c04:	4770      	bx	lr
 8007c06:	f803 1b01 	strb.w	r1, [r3], #1
 8007c0a:	e7f9      	b.n	8007c00 <memset+0x4>

08007c0c <_free_r>:
 8007c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d048      	beq.n	8007ca4 <_free_r+0x98>
 8007c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c16:	9001      	str	r0, [sp, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c1e:	bfb8      	it	lt
 8007c20:	18e4      	addlt	r4, r4, r3
 8007c22:	f000 f8d3 	bl	8007dcc <__malloc_lock>
 8007c26:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <_free_r+0x9c>)
 8007c28:	9801      	ldr	r0, [sp, #4]
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	b933      	cbnz	r3, 8007c3e <_free_r+0x32>
 8007c30:	6063      	str	r3, [r4, #4]
 8007c32:	6014      	str	r4, [r2, #0]
 8007c34:	b003      	add	sp, #12
 8007c36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c3a:	f000 b8cd 	b.w	8007dd8 <__malloc_unlock>
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	d90b      	bls.n	8007c5a <_free_r+0x4e>
 8007c42:	6821      	ldr	r1, [r4, #0]
 8007c44:	1862      	adds	r2, r4, r1
 8007c46:	4293      	cmp	r3, r2
 8007c48:	bf04      	itt	eq
 8007c4a:	681a      	ldreq	r2, [r3, #0]
 8007c4c:	685b      	ldreq	r3, [r3, #4]
 8007c4e:	6063      	str	r3, [r4, #4]
 8007c50:	bf04      	itt	eq
 8007c52:	1852      	addeq	r2, r2, r1
 8007c54:	6022      	streq	r2, [r4, #0]
 8007c56:	602c      	str	r4, [r5, #0]
 8007c58:	e7ec      	b.n	8007c34 <_free_r+0x28>
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b10b      	cbz	r3, 8007c64 <_free_r+0x58>
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d9fa      	bls.n	8007c5a <_free_r+0x4e>
 8007c64:	6811      	ldr	r1, [r2, #0]
 8007c66:	1855      	adds	r5, r2, r1
 8007c68:	42a5      	cmp	r5, r4
 8007c6a:	d10b      	bne.n	8007c84 <_free_r+0x78>
 8007c6c:	6824      	ldr	r4, [r4, #0]
 8007c6e:	4421      	add	r1, r4
 8007c70:	1854      	adds	r4, r2, r1
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	6011      	str	r1, [r2, #0]
 8007c76:	d1dd      	bne.n	8007c34 <_free_r+0x28>
 8007c78:	681c      	ldr	r4, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	6053      	str	r3, [r2, #4]
 8007c7e:	4421      	add	r1, r4
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	e7d7      	b.n	8007c34 <_free_r+0x28>
 8007c84:	d902      	bls.n	8007c8c <_free_r+0x80>
 8007c86:	230c      	movs	r3, #12
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	e7d3      	b.n	8007c34 <_free_r+0x28>
 8007c8c:	6825      	ldr	r5, [r4, #0]
 8007c8e:	1961      	adds	r1, r4, r5
 8007c90:	428b      	cmp	r3, r1
 8007c92:	bf04      	itt	eq
 8007c94:	6819      	ldreq	r1, [r3, #0]
 8007c96:	685b      	ldreq	r3, [r3, #4]
 8007c98:	6063      	str	r3, [r4, #4]
 8007c9a:	bf04      	itt	eq
 8007c9c:	1949      	addeq	r1, r1, r5
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	6054      	str	r4, [r2, #4]
 8007ca2:	e7c7      	b.n	8007c34 <_free_r+0x28>
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bd30      	pop	{r4, r5, pc}
 8007ca8:	200000b8 	.word	0x200000b8

08007cac <_malloc_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	1ccd      	adds	r5, r1, #3
 8007cb0:	f025 0503 	bic.w	r5, r5, #3
 8007cb4:	3508      	adds	r5, #8
 8007cb6:	2d0c      	cmp	r5, #12
 8007cb8:	bf38      	it	cc
 8007cba:	250c      	movcc	r5, #12
 8007cbc:	2d00      	cmp	r5, #0
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	db01      	blt.n	8007cc6 <_malloc_r+0x1a>
 8007cc2:	42a9      	cmp	r1, r5
 8007cc4:	d903      	bls.n	8007cce <_malloc_r+0x22>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	2000      	movs	r0, #0
 8007ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cce:	f000 f87d 	bl	8007dcc <__malloc_lock>
 8007cd2:	4921      	ldr	r1, [pc, #132]	; (8007d58 <_malloc_r+0xac>)
 8007cd4:	680a      	ldr	r2, [r1, #0]
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	b99c      	cbnz	r4, 8007d02 <_malloc_r+0x56>
 8007cda:	4f20      	ldr	r7, [pc, #128]	; (8007d5c <_malloc_r+0xb0>)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	b923      	cbnz	r3, 8007cea <_malloc_r+0x3e>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f000 f83c 	bl	8007d60 <_sbrk_r>
 8007ce8:	6038      	str	r0, [r7, #0]
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f000 f837 	bl	8007d60 <_sbrk_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	d123      	bne.n	8007d3e <_malloc_r+0x92>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f86c 	bl	8007dd8 <__malloc_unlock>
 8007d00:	e7e3      	b.n	8007cca <_malloc_r+0x1e>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	1b5b      	subs	r3, r3, r5
 8007d06:	d417      	bmi.n	8007d38 <_malloc_r+0x8c>
 8007d08:	2b0b      	cmp	r3, #11
 8007d0a:	d903      	bls.n	8007d14 <_malloc_r+0x68>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	441c      	add	r4, r3
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	e004      	b.n	8007d1e <_malloc_r+0x72>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	42a2      	cmp	r2, r4
 8007d18:	bf0c      	ite	eq
 8007d1a:	600b      	streq	r3, [r1, #0]
 8007d1c:	6053      	strne	r3, [r2, #4]
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f000 f85a 	bl	8007dd8 <__malloc_unlock>
 8007d24:	f104 000b 	add.w	r0, r4, #11
 8007d28:	1d23      	adds	r3, r4, #4
 8007d2a:	f020 0007 	bic.w	r0, r0, #7
 8007d2e:	1ac2      	subs	r2, r0, r3
 8007d30:	d0cc      	beq.n	8007ccc <_malloc_r+0x20>
 8007d32:	1a1b      	subs	r3, r3, r0
 8007d34:	50a3      	str	r3, [r4, r2]
 8007d36:	e7c9      	b.n	8007ccc <_malloc_r+0x20>
 8007d38:	4622      	mov	r2, r4
 8007d3a:	6864      	ldr	r4, [r4, #4]
 8007d3c:	e7cc      	b.n	8007cd8 <_malloc_r+0x2c>
 8007d3e:	1cc4      	adds	r4, r0, #3
 8007d40:	f024 0403 	bic.w	r4, r4, #3
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d0e3      	beq.n	8007d10 <_malloc_r+0x64>
 8007d48:	1a21      	subs	r1, r4, r0
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f000 f808 	bl	8007d60 <_sbrk_r>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d1dd      	bne.n	8007d10 <_malloc_r+0x64>
 8007d54:	e7cf      	b.n	8007cf6 <_malloc_r+0x4a>
 8007d56:	bf00      	nop
 8007d58:	200000b8 	.word	0x200000b8
 8007d5c:	200000bc 	.word	0x200000bc

08007d60 <_sbrk_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_sbrk_r+0x1c>)
 8007d64:	2300      	movs	r3, #0
 8007d66:	4604      	mov	r4, r0
 8007d68:	4608      	mov	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f8 fd62 	bl	8000834 <_sbrk>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_sbrk_r+0x1a>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_sbrk_r+0x1a>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20000f94 	.word	0x20000f94

08007d80 <strcat>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4602      	mov	r2, r0
 8007d84:	7814      	ldrb	r4, [r2, #0]
 8007d86:	4613      	mov	r3, r2
 8007d88:	3201      	adds	r2, #1
 8007d8a:	2c00      	cmp	r4, #0
 8007d8c:	d1fa      	bne.n	8007d84 <strcat+0x4>
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d1f9      	bne.n	8007d90 <strcat+0x10>
 8007d9c:	bd10      	pop	{r4, pc}

08007d9e <strstr>:
 8007d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da0:	780c      	ldrb	r4, [r1, #0]
 8007da2:	b164      	cbz	r4, 8007dbe <strstr+0x20>
 8007da4:	4603      	mov	r3, r0
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	1c5e      	adds	r6, r3, #1
 8007dac:	b90a      	cbnz	r2, 8007db2 <strstr+0x14>
 8007dae:	4610      	mov	r0, r2
 8007db0:	e005      	b.n	8007dbe <strstr+0x20>
 8007db2:	4294      	cmp	r4, r2
 8007db4:	d108      	bne.n	8007dc8 <strstr+0x2a>
 8007db6:	460d      	mov	r5, r1
 8007db8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007dbc:	b902      	cbnz	r2, 8007dc0 <strstr+0x22>
 8007dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007dc4:	4297      	cmp	r7, r2
 8007dc6:	d0f7      	beq.n	8007db8 <strstr+0x1a>
 8007dc8:	4633      	mov	r3, r6
 8007dca:	e7ec      	b.n	8007da6 <strstr+0x8>

08007dcc <__malloc_lock>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__malloc_lock+0x8>)
 8007dce:	f000 b809 	b.w	8007de4 <__retarget_lock_acquire_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	20000f9c 	.word	0x20000f9c

08007dd8 <__malloc_unlock>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__malloc_unlock+0x8>)
 8007dda:	f000 b804 	b.w	8007de6 <__retarget_lock_release_recursive>
 8007dde:	bf00      	nop
 8007de0:	20000f9c 	.word	0x20000f9c

08007de4 <__retarget_lock_acquire_recursive>:
 8007de4:	4770      	bx	lr

08007de6 <__retarget_lock_release_recursive>:
 8007de6:	4770      	bx	lr

08007de8 <_init>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr

08007df4 <_fini>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr
