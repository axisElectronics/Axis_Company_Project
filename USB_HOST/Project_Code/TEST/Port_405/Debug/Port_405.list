
Port_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  20000090  08006fec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08006fec  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192ed  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003780  00000000  00000000  000393ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0003d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022090  00000000  00000000  0003e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f85  00000000  00000000  000604a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be29f  00000000  00000000  0007142d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f6cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  0012f720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006eec 	.word	0x08006eec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006eec 	.word	0x08006eec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa00 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f822 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b6 	bl	800064c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 f926 	bl	8006730 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_9600);
 80004e4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80004e8:	f000 f884 	bl	80005f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x48>)
 80004f4:	f000 fd34 	bl	8000f60 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80004f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80004fc:	f000 fa5e 	bl	80009bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x48>)
 8000508:	f000 fd2a 	bl	8000f60 <HAL_GPIO_WritePin>

  USBH_HID_KeybdInit(&hUsbHostFS);
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x4c>)
 800050e:	f004 fa35 	bl	800497c <USBH_HID_KeybdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000512:	f006 f933 	bl	800677c <MX_USB_HOST_Process>
 8000516:	e7fc      	b.n	8000512 <main+0x42>
 8000518:	40020000 	.word	0x40020000
 800051c:	20000128 	.word	0x20000128

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 fc0c 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fa59 	bl	8002a5c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f874 	bl	800069c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fcba 	bl	8002f4c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f85d 	bl	800069c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x50>)
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_USART2_UART_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_USART2_UART_Init+0x50>)
 800061c:	220c      	movs	r2, #12
 800061e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_USART2_UART_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x50>)
 800062e:	f002 fe89 	bl	8003344 <HAL_UART_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000638:	f000 f830 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c0 	.word	0x200000c0
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_GPIO_Init+0x4c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <MX_GPIO_Init+0x4c>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_GPIO_Init+0x4c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <MX_GPIO_Init+0x4c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_GPIO_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <HAL_MspInit+0x4c>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_UART_MspInit+0x84>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d12b      	bne.n	8000776 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_UART_MspInit+0x88>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_UART_MspInit+0x88>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_UART_MspInit+0x88>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_UART_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_UART_MspInit+0x88>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_UART_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000756:	230c      	movs	r3, #12
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000766:	2307      	movs	r3, #7
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_UART_MspInit+0x8c>)
 8000772:	f000 fa59 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f8d0 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fe3f 	bl	8001468 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000500 	.word	0x20000500

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f006 fa58 	bl	8006cd8 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20020000 	.word	0x20020000
 8000854:	00000400 	.word	0x00000400
 8000858:	200000ac 	.word	0x200000ac
 800085c:	20000818 	.word	0x20000818

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f006 fa17 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe0b 	bl	80004d0 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80008c8:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 80008cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80008d0:	20000814 	.word	0x20000814

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f94f 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fece 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f967 	bl	8000c0e <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f92f 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000104 	.word	0x20000104

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000104 	.word	0x20000104

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffde 	bl	80009a4 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff29 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff3e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff31 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffa2 	bl	8000b60 <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f94:	b08f      	sub	sp, #60	; 0x3c
 8000f96:	af0a      	add	r7, sp, #40	; 0x28
 8000f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e054      	b.n	800104e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d106      	bne.n	8000fc4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f005 fc14 	bl	80067ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fdb4 	bl	8003b50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	687e      	ldr	r6, [r7, #4]
 8000ff0:	466d      	mov	r5, sp
 8000ff2:	f106 0410 	add.w	r4, r6, #16
 8000ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001002:	e885 0003 	stmia.w	r5, {r0, r1}
 8001006:	1d33      	adds	r3, r6, #4
 8001008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f002 fd2e 	bl	8003a6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fdab 	bl	8003b72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	687e      	ldr	r6, [r7, #4]
 8001024:	466d      	mov	r5, sp
 8001026:	f106 0410 	add.w	r4, r6, #16
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001036:	e885 0003 	stmia.w	r5, {r0, r1}
 800103a:	1d33      	adds	r3, r6, #4
 800103c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f002 febe 	bl	8003dc0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001056 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001056:	b590      	push	{r4, r7, lr}
 8001058:	b089      	sub	sp, #36	; 0x24
 800105a:	af04      	add	r7, sp, #16
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	4608      	mov	r0, r1
 8001060:	4611      	mov	r1, r2
 8001062:	461a      	mov	r2, r3
 8001064:	4603      	mov	r3, r0
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	460b      	mov	r3, r1
 800106a:	70bb      	strb	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_HCD_HC_Init+0x28>
 800107a:	2302      	movs	r3, #2
 800107c:	e076      	b.n	800116c <HAL_HCD_HC_Init+0x116>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	212c      	movs	r1, #44	; 0x2c
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	333d      	adds	r3, #61	; 0x3d
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	212c      	movs	r1, #44	; 0x2c
 800109e:	fb01 f303 	mul.w	r3, r1, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	3338      	adds	r3, #56	; 0x38
 80010a6:	787a      	ldrb	r2, [r7, #1]
 80010a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	3340      	adds	r3, #64	; 0x40
 80010b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010ba:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	212c      	movs	r1, #44	; 0x2c
 80010c2:	fb01 f303 	mul.w	r3, r1, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	3339      	adds	r3, #57	; 0x39
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	212c      	movs	r1, #44	; 0x2c
 80010d4:	fb01 f303 	mul.w	r3, r1, r3
 80010d8:	4413      	add	r3, r2
 80010da:	333f      	adds	r3, #63	; 0x3f
 80010dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	78ba      	ldrb	r2, [r7, #2]
 80010e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010ea:	b2d0      	uxtb	r0, r2
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	212c      	movs	r1, #44	; 0x2c
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	333a      	adds	r3, #58	; 0x3a
 80010f8:	4602      	mov	r2, r0
 80010fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da09      	bge.n	8001118 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	212c      	movs	r1, #44	; 0x2c
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	333b      	adds	r3, #59	; 0x3b
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e008      	b.n	800112a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	212c      	movs	r1, #44	; 0x2c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	333b      	adds	r3, #59	; 0x3b
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	333c      	adds	r3, #60	; 0x3c
 8001138:	f897 2020 	ldrb.w	r2, [r7, #32]
 800113c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	787c      	ldrb	r4, [r7, #1]
 8001144:	78ba      	ldrb	r2, [r7, #2]
 8001146:	78f9      	ldrb	r1, [r7, #3]
 8001148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4623      	mov	r3, r4
 800115a:	f002 ffb3 	bl	80040c4 <USB_HC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_HCD_HC_Halt+0x1e>
 800118e:	2302      	movs	r3, #2
 8001190:	e00f      	b.n	80011b2 <HAL_HCD_HC_Halt+0x3e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f9ef 	bl	8004586 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	70fb      	strb	r3, [r7, #3]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70bb      	strb	r3, [r7, #2]
 80011d2:	4613      	mov	r3, r2
 80011d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	333b      	adds	r3, #59	; 0x3b
 80011e4:	78ba      	ldrb	r2, [r7, #2]
 80011e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	212c      	movs	r1, #44	; 0x2c
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	333f      	adds	r3, #63	; 0x3f
 80011f6:	787a      	ldrb	r2, [r7, #1]
 80011f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011fa:	7c3b      	ldrb	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d112      	bne.n	8001226 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	212c      	movs	r1, #44	; 0x2c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	3342      	adds	r3, #66	; 0x42
 800120e:	2203      	movs	r2, #3
 8001210:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	333d      	adds	r3, #61	; 0x3d
 8001220:	7f3a      	ldrb	r2, [r7, #28]
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e008      	b.n	8001238 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3342      	adds	r3, #66	; 0x42
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b03      	cmp	r3, #3
 800123c:	f200 80c6 	bhi.w	80013cc <HAL_HCD_HC_SubmitRequest+0x210>
 8001240:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001259 	.word	0x08001259
 800124c:	080013b9 	.word	0x080013b9
 8001250:	080012bd 	.word	0x080012bd
 8001254:	0800133b 	.word	0x0800133b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001258:	7c3b      	ldrb	r3, [r7, #16]
 800125a:	2b01      	cmp	r3, #1
 800125c:	f040 80b8 	bne.w	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 80b4 	bne.w	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001268:	8b3b      	ldrh	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	212c      	movs	r1, #44	; 0x2c
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	4413      	add	r3, r2
 800127a:	3355      	adds	r3, #85	; 0x55
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	212c      	movs	r1, #44	; 0x2c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3355      	adds	r3, #85	; 0x55
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	212c      	movs	r1, #44	; 0x2c
 800129a:	fb01 f303 	mul.w	r3, r1, r3
 800129e:	4413      	add	r3, r2
 80012a0:	3342      	adds	r3, #66	; 0x42
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012a6:	e093      	b.n	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	212c      	movs	r1, #44	; 0x2c
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	3342      	adds	r3, #66	; 0x42
 80012b6:	2202      	movs	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
      break;
 80012ba:	e089      	b.n	80013d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012bc:	78bb      	ldrb	r3, [r7, #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11d      	bne.n	80012fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	212c      	movs	r1, #44	; 0x2c
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	3355      	adds	r3, #85	; 0x55
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	212c      	movs	r1, #44	; 0x2c
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	3342      	adds	r3, #66	; 0x42
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012e8:	e073      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	212c      	movs	r1, #44	; 0x2c
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3342      	adds	r3, #66	; 0x42
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]
      break;
 80012fc:	e069      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	212c      	movs	r1, #44	; 0x2c
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	4413      	add	r3, r2
 800130a:	3354      	adds	r3, #84	; 0x54
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	3342      	adds	r3, #66	; 0x42
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
      break;
 8001324:	e055      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	212c      	movs	r1, #44	; 0x2c
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	3342      	adds	r3, #66	; 0x42
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
      break;
 8001338:	e04b      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d11d      	bne.n	800137c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	212c      	movs	r1, #44	; 0x2c
 8001346:	fb01 f303 	mul.w	r3, r1, r3
 800134a:	4413      	add	r3, r2
 800134c:	3355      	adds	r3, #85	; 0x55
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	212c      	movs	r1, #44	; 0x2c
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	3342      	adds	r3, #66	; 0x42
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001366:	e034      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	3342      	adds	r3, #66	; 0x42
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
      break;
 800137a:	e02a      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3354      	adds	r3, #84	; 0x54
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	e016      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	212c      	movs	r1, #44	; 0x2c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	3342      	adds	r3, #66	; 0x42
 80013b2:	2202      	movs	r2, #2
 80013b4:	701a      	strb	r2, [r3, #0]
      break;
 80013b6:	e00c      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	212c      	movs	r1, #44	; 0x2c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	3342      	adds	r3, #66	; 0x42
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
      break;
 80013ca:	e002      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80013cc:	bf00      	nop
 80013ce:	e000      	b.n	80013d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80013d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	3344      	adds	r3, #68	; 0x44
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	8b3a      	ldrh	r2, [r7, #24]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	202c      	movs	r0, #44	; 0x2c
 80013ec:	fb00 f303 	mul.w	r3, r0, r3
 80013f0:	440b      	add	r3, r1
 80013f2:	334c      	adds	r3, #76	; 0x4c
 80013f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	212c      	movs	r1, #44	; 0x2c
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	4413      	add	r3, r2
 8001402:	3360      	adds	r3, #96	; 0x60
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3350      	adds	r3, #80	; 0x50
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	3339      	adds	r3, #57	; 0x39
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	212c      	movs	r1, #44	; 0x2c
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4413      	add	r3, r2
 8001438:	3361      	adds	r3, #97	; 0x61
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	222c      	movs	r2, #44	; 0x2c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	3338      	adds	r3, #56	; 0x38
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	18d1      	adds	r1, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	f002 ff42 	bl	80042e0 <USB_HC_StartXfer>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop

08001468 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fc5b 	bl	8003d3a <USB_GetMode>
 8001484:	4603      	mov	r3, r0
 8001486:	2b01      	cmp	r3, #1
 8001488:	f040 80ef 	bne.w	800166a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fc3f 	bl	8003d14 <USB_ReadInterrupts>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80e5 	beq.w	8001668 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fc36 	bl	8003d14 <USB_ReadInterrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014b2:	d104      	bne.n	80014be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fc26 	bl	8003d14 <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d2:	d104      	bne.n	80014de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fc16 	bl	8003d14 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014f2:	d104      	bne.n	80014fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fc06 	bl	8003d14 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d103      	bne.n	800151a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f002 fbf8 	bl	8003d14 <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800152a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800152e:	d115      	bne.n	800155c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001538:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f005 f9be 	bl	80068cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fcee 	bl	8003f38 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fbd7 	bl	8003d14 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d102      	bne.n	8001578 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f001 f9ff 	bl	8002976 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fbc9 	bl	8003d14 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d106      	bne.n	800159a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f005 f981 	bl	8006894 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2208      	movs	r2, #8
 8001598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fbb8 	bl	8003d14 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d101      	bne.n	80015b2 <HAL_HCD_IRQHandler+0x14a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_HCD_IRQHandler+0x14c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d012      	beq.n	80015de <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0210 	bic.w	r2, r2, #16
 80015c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f001 f902 	bl	80027d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0210 	orr.w	r2, r2, #16
 80015dc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fb96 	bl	8003d14 <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015f2:	d13a      	bne.n	800166a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 ffb3 	bl	8004564 <USB_HC_ReadInterrupt>
 80015fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e025      	b.n	8001652 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d018      	beq.n	800164c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800162c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001630:	d106      	bne.n	8001640 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f8ab 	bl	8001794 <HCD_HC_IN_IRQHandler>
 800163e:	e005      	b.n	800164c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fcc6 	bl	8001fd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3d4      	bcc.n	8001606 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001664:	615a      	str	r2, [r3, #20]
 8001666:	e000      	b.n	800166a <HAL_HCD_IRQHandler+0x202>
      return;
 8001668:	bf00      	nop
    }
  }
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_HCD_Start+0x16>
 8001682:	2302      	movs	r3, #2
 8001684:	e013      	b.n	80016ae <HAL_HCD_Start+0x3e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fa4b 	bl	8003b2e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fcae 	bl	8004000 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_HCD_Stop+0x16>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e00d      	b.n	80016e8 <HAL_HCD_Stop+0x32>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f8ad 	bl	8004838 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fc55 	bl	8003fac <USB_ResetPort>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3360      	adds	r3, #96	; 0x60
 8001726:	781b      	ldrb	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3350      	adds	r3, #80	; 0x50
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fc99 	bl	80040a0 <USB_GetCurrentFrame>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fc74 	bl	8004072 <USB_GetHostSpeed>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d119      	bne.n	80017f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	461a      	mov	r2, r3
 80017d2:	2304      	movs	r3, #4
 80017d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	0151      	lsls	r1, r2, #5
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	440a      	add	r2, r1
 80017ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	60d3      	str	r3, [r2, #12]
 80017f6:	e101      	b.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180e:	d12b      	bne.n	8001868 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4413      	add	r3, r2
 8001818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181c:	461a      	mov	r2, r3
 800181e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001822:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3361      	adds	r3, #97	; 0x61
 8001832:	2207      	movs	r2, #7
 8001834:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4413      	add	r3, r2
 800183e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	0151      	lsls	r1, r2, #5
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	440a      	add	r2, r1
 800184c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fe90 	bl	8004586 <USB_HC_Halt>
 8001866:	e0c9      	b.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0320 	and.w	r3, r3, #32
 800187a:	2b20      	cmp	r3, #32
 800187c:	d109      	bne.n	8001892 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	461a      	mov	r2, r3
 800188c:	2320      	movs	r3, #32
 800188e:	6093      	str	r3, [r2, #8]
 8001890:	e0b4      	b.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4413      	add	r3, r2
 800189a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d133      	bne.n	8001910 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	0151      	lsls	r1, r2, #5
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	440a      	add	r2, r1
 80018be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	212c      	movs	r1, #44	; 0x2c
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	3361      	adds	r3, #97	; 0x61
 80018d6:	2205      	movs	r2, #5
 80018d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e6:	461a      	mov	r2, r3
 80018e8:	2310      	movs	r3, #16
 80018ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f8:	461a      	mov	r2, r3
 80018fa:	2308      	movs	r3, #8
 80018fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fe3c 	bl	8004586 <USB_HC_Halt>
 800190e:	e075      	b.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4413      	add	r3, r2
 8001918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d134      	bne.n	8001992 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	0151      	lsls	r1, r2, #5
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	440a      	add	r2, r1
 800193e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3361      	adds	r3, #97	; 0x61
 8001956:	2208      	movs	r2, #8
 8001958:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001966:	461a      	mov	r2, r3
 8001968:	2310      	movs	r3, #16
 800196a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001978:	461a      	mov	r2, r3
 800197a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fdfb 	bl	8004586 <USB_HC_Halt>
 8001990:	e034      	b.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d129      	bne.n	80019fc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	0151      	lsls	r1, r2, #5
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	440a      	add	r2, r1
 80019be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3361      	adds	r3, #97	; 0x61
 80019d6:	2206      	movs	r2, #6
 80019d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fdce 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f6:	461a      	mov	r2, r3
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a12:	d122      	bne.n	8001a5a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	0151      	lsls	r1, r2, #5
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	440a      	add	r2, r1
 8001a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fda1 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	461a      	mov	r2, r3
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a58:	e2ba      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 811b 	bne.w	8001ca8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d019      	beq.n	8001aae <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3348      	adds	r3, #72	; 0x48
 8001a88:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	0159      	lsls	r1, r3, #5
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a9c:	1ad2      	subs	r2, r2, r3
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	202c      	movs	r0, #44	; 0x2c
 8001aa4:	fb00 f303 	mul.w	r3, r0, r3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3350      	adds	r3, #80	; 0x50
 8001aac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3361      	adds	r3, #97	; 0x61
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	335c      	adds	r3, #92	; 0x5c
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	015a      	lsls	r2, r3, #5
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	333f      	adds	r3, #63	; 0x3f
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	333f      	adds	r3, #63	; 0x3f
 8001b06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d121      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fd25 	bl	8004586 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	6093      	str	r3, [r2, #8]
 8001b4e:	e066      	b.n	8001c1e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	333f      	adds	r3, #63	; 0x3f
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d127      	bne.n	8001bb4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	0151      	lsls	r1, r2, #5
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	440a      	add	r2, r1
 8001b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3360      	adds	r3, #96	; 0x60
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	b2d9      	uxtb	r1, r3
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	202c      	movs	r0, #44	; 0x2c
 8001ba0:	fb00 f303 	mul.w	r3, r0, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3360      	adds	r3, #96	; 0x60
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f004 fe9b 	bl	80068e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bb2:	e034      	b.n	8001c1e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	333f      	adds	r3, #63	; 0x3f
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d12a      	bne.n	8001c1e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3360      	adds	r3, #96	; 0x60
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3354      	adds	r3, #84	; 0x54
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2d8      	uxtb	r0, r3
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3354      	adds	r3, #84	; 0x54
 8001bfe:	4602      	mov	r2, r0
 8001c00:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	b2d9      	uxtb	r1, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	202c      	movs	r0, #44	; 0x2c
 8001c0c:	fb00 f303 	mul.w	r3, r0, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f004 fe65 	bl	80068e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d12b      	bne.n	8001c7e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3348      	adds	r3, #72	; 0x48
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	202c      	movs	r0, #44	; 0x2c
 8001c3c:	fb00 f202 	mul.w	r2, r0, r2
 8001c40:	440a      	add	r2, r1
 8001c42:	3240      	adds	r2, #64	; 0x40
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 81be 	beq.w	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3354      	adds	r3, #84	; 0x54
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	f083 0301 	eor.w	r3, r3, #1
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3354      	adds	r3, #84	; 0x54
 8001c78:	4602      	mov	r2, r0
 8001c7a:	701a      	strb	r2, [r3, #0]
}
 8001c7c:	e1a8      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3354      	adds	r3, #84	; 0x54
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f083 0301 	eor.w	r3, r3, #1
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3354      	adds	r3, #84	; 0x54
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	e193      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	f040 8106 	bne.w	8001ecc <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	0151      	lsls	r1, r2, #5
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cda:	f023 0302 	bic.w	r3, r3, #2
 8001cde:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3361      	adds	r3, #97	; 0x61
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d109      	bne.n	8001d08 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3360      	adds	r3, #96	; 0x60
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e0c9      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3361      	adds	r3, #97	; 0x61
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d109      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3360      	adds	r3, #96	; 0x60
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e0b5      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3361      	adds	r3, #97	; 0x61
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d009      	beq.n	8001d58 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3361      	adds	r3, #97	; 0x61
 8001d52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d150      	bne.n	8001dfa <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	335c      	adds	r3, #92	; 0x5c
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	202c      	movs	r0, #44	; 0x2c
 8001d70:	fb00 f303 	mul.w	r3, r0, r3
 8001d74:	440b      	add	r3, r1
 8001d76:	335c      	adds	r3, #92	; 0x5c
 8001d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	212c      	movs	r1, #44	; 0x2c
 8001d80:	fb01 f303 	mul.w	r3, r1, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d912      	bls.n	8001db4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	335c      	adds	r3, #92	; 0x5c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3360      	adds	r3, #96	; 0x60
 8001dae:	2204      	movs	r2, #4
 8001db0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001db2:	e073      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3360      	adds	r3, #96	; 0x60
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ddc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001de4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001df8:	e050      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3361      	adds	r3, #97	; 0x61
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d122      	bne.n	8001e54 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	212c      	movs	r1, #44	; 0x2c
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	4413      	add	r3, r2
 8001e1a:	3360      	adds	r3, #96	; 0x60
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e023      	b.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3361      	adds	r3, #97	; 0x61
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b07      	cmp	r3, #7
 8001e66:	d119      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	335c      	adds	r3, #92	; 0x5c
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	202c      	movs	r0, #44	; 0x2c
 8001e80:	fb00 f303 	mul.w	r3, r0, r3
 8001e84:	440b      	add	r3, r1
 8001e86:	335c      	adds	r3, #92	; 0x5c
 8001e88:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3360      	adds	r3, #96	; 0x60
 8001e98:	2204      	movs	r2, #4
 8001e9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2302      	movs	r3, #2
 8001eac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	b2d9      	uxtb	r1, r3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	202c      	movs	r0, #44	; 0x2c
 8001eb8:	fb00 f303 	mul.w	r3, r0, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f004 fd0f 	bl	80068e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eca:	e081      	b.n	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d176      	bne.n	8001fd0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d121      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	335c      	adds	r3, #92	; 0x5c
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	0151      	lsls	r1, r2, #5
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fb27 	bl	8004586 <USB_HC_Halt>
 8001f38:	e041      	b.n	8001fbe <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d12d      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d120      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3361      	adds	r3, #97	; 0x61
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	0151      	lsls	r1, r2, #5
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	440a      	add	r2, r1
 8001fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fae4 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2310      	movs	r3, #16
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d119      	bne.n	800203c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	461a      	mov	r2, r3
 8002016:	2304      	movs	r3, #4
 8002018:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	0151      	lsls	r1, r2, #5
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	440a      	add	r2, r1
 8002030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800203a:	e3c6      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d13e      	bne.n	80020d0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	2320      	movs	r3, #32
 8002062:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333d      	adds	r3, #61	; 0x3d
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	f040 83a8 	bne.w	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	333d      	adds	r3, #61	; 0x3d
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3360      	adds	r3, #96	; 0x60
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	0151      	lsls	r1, r2, #5
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	440a      	add	r2, r1
 80020b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fa5c 	bl	8004586 <USB_HC_Halt>
}
 80020ce:	e37c      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e6:	d122      	bne.n	800212e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	0151      	lsls	r1, r2, #5
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	440a      	add	r2, r1
 80020fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fa37 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	461a      	mov	r2, r3
 8002126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212a:	6093      	str	r3, [r2, #8]
}
 800212c:	e34d      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d150      	bne.n	80021e6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	335c      	adds	r3, #92	; 0x5c
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d111      	bne.n	8002190 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	333d      	adds	r3, #61	; 0x3d
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	2340      	movs	r3, #64	; 0x40
 800218e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	0151      	lsls	r1, r2, #5
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	440a      	add	r2, r1
 80021a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 f9e3 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3361      	adds	r3, #97	; 0x61
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
}
 80021e4:	e2f1      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d13c      	bne.n	8002276 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3361      	adds	r3, #97	; 0x61
 800220a:	2204      	movs	r2, #4
 800220c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	333d      	adds	r3, #61	; 0x3d
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	335c      	adds	r3, #92	; 0x5c
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f002 f992 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2340      	movs	r3, #64	; 0x40
 8002272:	6093      	str	r3, [r2, #8]
}
 8002274:	e2a9      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d12a      	bne.n	80022e2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2308      	movs	r3, #8
 800229c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	0151      	lsls	r1, r2, #5
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	440a      	add	r2, r1
 80022b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 f95c 	bl	8004586 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3361      	adds	r3, #97	; 0x61
 80022dc:	2205      	movs	r2, #5
 80022de:	701a      	strb	r2, [r3, #0]
}
 80022e0:	e273      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d150      	bne.n	800239a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	335c      	adds	r3, #92	; 0x5c
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	2203      	movs	r2, #3
 800231a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333d      	adds	r3, #61	; 0x3d
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d112      	bne.n	8002356 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	333c      	adds	r3, #60	; 0x3c
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d108      	bne.n	8002356 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	333d      	adds	r3, #61	; 0x3d
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	0151      	lsls	r1, r2, #5
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	440a      	add	r2, r1
 800236c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f002 f900 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	461a      	mov	r2, r3
 8002394:	2310      	movs	r3, #16
 8002396:	6093      	str	r3, [r2, #8]
}
 8002398:	e217      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d174      	bne.n	800249a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d121      	bne.n	80023fc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	2206      	movs	r2, #6
 80023c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 f8c6 	bl	8004586 <USB_HC_Halt>
 80023fa:	e044      	b.n	8002486 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	fb00 f303 	mul.w	r3, r0, r3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	335c      	adds	r3, #92	; 0x5c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d920      	bls.n	8002474 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3360      	adds	r3, #96	; 0x60
 8002452:	2204      	movs	r2, #4
 8002454:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	b2d9      	uxtb	r1, r3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	202c      	movs	r0, #44	; 0x2c
 8002460:	fb00 f303 	mul.w	r3, r0, r3
 8002464:	4413      	add	r3, r2
 8002466:	3360      	adds	r3, #96	; 0x60
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f004 fa3b 	bl	80068e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002472:	e008      	b.n	8002486 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	461a      	mov	r2, r3
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	6093      	str	r3, [r2, #8]
}
 8002498:	e197      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d134      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	0151      	lsls	r1, r2, #5
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	440a      	add	r2, r1
 80024c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 f852 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2310      	movs	r3, #16
 80024f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	461a      	mov	r2, r3
 8002502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	2208      	movs	r2, #8
 8002518:	701a      	strb	r2, [r3, #0]
}
 800251a:	e156      	b.n	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	f040 814b 	bne.w	80027ca <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f023 0302 	bic.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d179      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3360      	adds	r3, #96	; 0x60
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333f      	adds	r3, #63	; 0x3f
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d00a      	beq.n	80025a4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333f      	adds	r3, #63	; 0x3f
 800259c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	f040 80fc 	bne.w	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d142      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	334c      	adds	r3, #76	; 0x4c
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80ed 	beq.w	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	334c      	adds	r3, #76	; 0x4c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	202c      	movs	r0, #44	; 0x2c
 80025d8:	fb00 f202 	mul.w	r2, r0, r2
 80025dc:	440a      	add	r2, r1
 80025de:	3240      	adds	r2, #64	; 0x40
 80025e0:	8812      	ldrh	r2, [r2, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	3b01      	subs	r3, #1
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	202c      	movs	r0, #44	; 0x2c
 80025ec:	fb00 f202 	mul.w	r2, r0, r2
 80025f0:	440a      	add	r2, r1
 80025f2:	3240      	adds	r2, #64	; 0x40
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80ca 	beq.w	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3355      	adds	r3, #85	; 0x55
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2d8      	uxtb	r0, r3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3355      	adds	r3, #85	; 0x55
 800262c:	4602      	mov	r2, r0
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e0b4      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3355      	adds	r3, #85	; 0x55
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2d8      	uxtb	r0, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3355      	adds	r3, #85	; 0x55
 8002656:	4602      	mov	r2, r0
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e09f      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3361      	adds	r3, #97	; 0x61
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d109      	bne.n	8002684 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3360      	adds	r3, #96	; 0x60
 800267e:	2202      	movs	r2, #2
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e08b      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3361      	adds	r3, #97	; 0x61
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d109      	bne.n	80026ac <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3360      	adds	r3, #96	; 0x60
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e077      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d109      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3360      	adds	r3, #96	; 0x60
 80026ce:	2205      	movs	r2, #5
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e063      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3361      	adds	r3, #97	; 0x61
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d009      	beq.n	80026fc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3361      	adds	r3, #97	; 0x61
 80026f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d14f      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	335c      	adds	r3, #92	; 0x5c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	202c      	movs	r0, #44	; 0x2c
 8002714:	fb00 f303 	mul.w	r3, r0, r3
 8002718:	440b      	add	r3, r1
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d912      	bls.n	8002758 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3360      	adds	r3, #96	; 0x60
 8002752:	2204      	movs	r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e021      	b.n	800279c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3360      	adds	r3, #96	; 0x60
 8002766:	2202      	movs	r2, #2
 8002768:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002780:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002788:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2302      	movs	r3, #2
 80027ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	b2d9      	uxtb	r1, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	202c      	movs	r0, #44	; 0x2c
 80027b8:	fb00 f303 	mul.w	r3, r0, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f004 f88f 	bl	80068e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027ca:	bf00      	nop
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08a      	sub	sp, #40	; 0x28
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	0c5b      	lsrs	r3, r3, #17
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002806:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d004      	beq.n	8002818 <HCD_RXQLVL_IRQHandler+0x46>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b05      	cmp	r3, #5
 8002812:	f000 80a9 	beq.w	8002968 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002816:	e0aa      	b.n	800296e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a6 	beq.w	800296c <HCD_RXQLVL_IRQHandler+0x19a>
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3344      	adds	r3, #68	; 0x44
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 809b 	beq.w	800296c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3350      	adds	r3, #80	; 0x50
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	441a      	add	r2, r3
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	202c      	movs	r0, #44	; 0x2c
 8002850:	fb00 f303 	mul.w	r3, r0, r3
 8002854:	440b      	add	r3, r1
 8002856:	334c      	adds	r3, #76	; 0x4c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d87a      	bhi.n	8002954 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3344      	adds	r3, #68	; 0x44
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	b292      	uxth	r2, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f001 fa23 	bl	8003cc2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3344      	adds	r3, #68	; 0x44
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	441a      	add	r2, r3
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	202c      	movs	r0, #44	; 0x2c
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	440b      	add	r3, r1
 800289c:	3344      	adds	r3, #68	; 0x44
 800289e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3350      	adds	r3, #80	; 0x50
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	441a      	add	r2, r3
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	202c      	movs	r0, #44	; 0x2c
 80028ba:	fb00 f303 	mul.w	r3, r0, r3
 80028be:	440b      	add	r3, r1
 80028c0:	3350      	adds	r3, #80	; 0x50
 80028c2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	0cdb      	lsrs	r3, r3, #19
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3340      	adds	r3, #64	; 0x40
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d13c      	bne.n	800296c <HCD_RXQLVL_IRQHandler+0x19a>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d039      	beq.n	800296c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800290e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002916:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3354      	adds	r3, #84	; 0x54
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	f083 0301 	eor.w	r3, r3, #1
 800293e:	b2d8      	uxtb	r0, r3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3354      	adds	r3, #84	; 0x54
 800294e:	4602      	mov	r2, r0
 8002950:	701a      	strb	r2, [r3, #0]
      break;
 8002952:	e00b      	b.n	800296c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2204      	movs	r2, #4
 8002964:	701a      	strb	r2, [r3, #0]
      break;
 8002966:	e001      	b.n	800296c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800296c:	bf00      	nop
  }
}
 800296e:	bf00      	nop
 8002970:	3728      	adds	r7, #40	; 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b086      	sub	sp, #24
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10b      	bne.n	80029c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f003 ff79 	bl	80068b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d132      	bne.n	8002a36 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d126      	bne.n	8002a30 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d113      	bne.n	8002a12 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80029f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f4:	d106      	bne.n	8002a04 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2102      	movs	r1, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fa9b 	bl	8003f38 <USB_InitFSLSPClkSel>
 8002a02:	e011      	b.n	8002a28 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fa94 	bl	8003f38 <USB_InitFSLSPClkSel>
 8002a10:	e00a      	b.n	8002a28 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d106      	bne.n	8002a28 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a20:	461a      	mov	r2, r3
 8002a22:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a26:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f003 ff6b 	bl	8006904 <HAL_HCD_PortEnabled_Callback>
 8002a2e:	e002      	b.n	8002a36 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f003 ff75 	bl	8006920 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d103      	bne.n	8002a48 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f043 0320 	orr.w	r3, r3, #32
 8002a46:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e264      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d075      	beq.n	8002b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7a:	4ba3      	ldr	r3, [pc, #652]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d112      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b9d      	ldr	r3, [pc, #628]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b99      	ldr	r3, [pc, #612]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x108>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d157      	bne.n	8002b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e23f      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x74>
 8002ac2:	4b91      	ldr	r3, [pc, #580]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a90      	ldr	r2, [pc, #576]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8a      	ldr	r2, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a87      	ldr	r2, [pc, #540]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002af4:	4b84      	ldr	r3, [pc, #528]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a83      	ldr	r2, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a80      	ldr	r2, [pc, #512]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fd ff46 	bl	80009a4 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fd ff42 	bl	80009a4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e204      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xc0>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fd ff32 	bl	80009a4 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fd ff2e 	bl	80009a4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1f0      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0xe8>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1c4      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4952      	ldr	r1, [pc, #328]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <HAL_RCC_OscConfig+0x2b0>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fd fee7 	bl	80009a4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fd fee3 	bl	80009a4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1a5      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4940      	ldr	r1, [pc, #256]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_OscConfig+0x2b0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fd fec6 	bl	80009a4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fd fec2 	bl	80009a4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e184      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d030      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_RCC_OscConfig+0x2b4>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fd fea6 	bl	80009a4 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fd fea2 	bl	80009a4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e164      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x200>
 8002c7a:	e015      	b.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCC_OscConfig+0x2b4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fd fe8f 	bl	80009a4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fd fe8b 	bl	80009a4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e14d      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a0 	beq.w	8002df6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x2b8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d121      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCC_OscConfig+0x2b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_RCC_OscConfig+0x2b8>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fd fe51 	bl	80009a4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e011      	b.n	8002d2a <HAL_RCC_OscConfig+0x2ce>
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	42470000 	.word	0x42470000
 8002d10:	42470e80 	.word	0x42470e80
 8002d14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fd fe44 	bl	80009a4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e106      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b85      	ldr	r3, [pc, #532]	; (8002f40 <HAL_RCC_OscConfig+0x4e4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
 8002d3e:	4b81      	ldr	r3, [pc, #516]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	4a80      	ldr	r2, [pc, #512]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4a:	e01c      	b.n	8002d86 <HAL_RCC_OscConfig+0x32a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCC_OscConfig+0x312>
 8002d54:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a7a      	ldr	r2, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	4b78      	ldr	r3, [pc, #480]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	e00b      	b.n	8002d86 <HAL_RCC_OscConfig+0x32a>
 8002d6e:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a74      	ldr	r2, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7a:	4b72      	ldr	r3, [pc, #456]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a71      	ldr	r2, [pc, #452]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d015      	beq.n	8002dba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fd fe09 	bl	80009a4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fd fe05 	bl	80009a4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0c5      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ee      	beq.n	8002d96 <HAL_RCC_OscConfig+0x33a>
 8002db8:	e014      	b.n	8002de4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fd fdf3 	bl	80009a4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fd fdef 	bl	80009a4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0af      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ee      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dea:	4b56      	ldr	r3, [pc, #344]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a55      	ldr	r2, [pc, #340]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 809b 	beq.w	8002f36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d05c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d141      	bne.n	8002e98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fd fdc3 	bl	80009a4 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fd fdbf 	bl	80009a4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e081      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e34:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	019b      	lsls	r3, r3, #6
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fd fd98 	bl	80009a4 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fd fd94 	bl	80009a4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e056      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x41c>
 8002e96:	e04e      	b.n	8002f36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fd fd81 	bl	80009a4 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fd7d 	bl	80009a4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e03f      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x44a>
 8002ec4:	e037      	b.n	8002f36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e032      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_RCC_OscConfig+0x4e8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d028      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d11a      	bne.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f02:	4013      	ands	r3, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d111      	bne.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40007000 	.word	0x40007000
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470060 	.word	0x42470060

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0cc      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d90c      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b8      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa0:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	494d      	ldr	r1, [pc, #308]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e067      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4934      	ldr	r1, [pc, #208]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7fd fcb2 	bl	80009a4 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7fd fcae 	bl	80009a4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d20c      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e032      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4916      	ldr	r1, [pc, #88]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490e      	ldr	r1, [pc, #56]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f821 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490a      	ldr	r1, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fc12 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00
 8003108:	40023800 	.word	0x40023800
 800310c:	08006f34 	.word	0x08006f34
 8003110:	20000000 	.word	0x20000000
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	2300      	movs	r3, #0
 800312a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d00d      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x40>
 800313c:	2b08      	cmp	r3, #8
 800313e:	f200 80bd 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x34>
 8003146:	2b04      	cmp	r3, #4
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x3a>
 800314a:	e0b7      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b61      	ldr	r3, [pc, #388]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800314e:	60bb      	str	r3, [r7, #8]
       break;
 8003150:	e0b7      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003154:	60bb      	str	r3, [r7, #8]
      break;
 8003156:	e0b4      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003160:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d04d      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	ea02 0800 	and.w	r8, r2, r0
 8003186:	ea03 0901 	and.w	r9, r3, r1
 800318a:	4640      	mov	r0, r8
 800318c:	4649      	mov	r1, r9
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	014b      	lsls	r3, r1, #5
 8003198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800319c:	0142      	lsls	r2, r0, #5
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	ebb0 0008 	subs.w	r0, r0, r8
 80031a6:	eb61 0109 	sbc.w	r1, r1, r9
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031b8:	0182      	lsls	r2, r0, #6
 80031ba:	1a12      	subs	r2, r2, r0
 80031bc:	eb63 0301 	sbc.w	r3, r3, r1
 80031c0:	f04f 0000 	mov.w	r0, #0
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	00d9      	lsls	r1, r3, #3
 80031ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ce:	00d0      	lsls	r0, r2, #3
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	eb12 0208 	adds.w	r2, r2, r8
 80031d8:	eb43 0309 	adc.w	r3, r3, r9
 80031dc:	f04f 0000 	mov.w	r0, #0
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	0259      	lsls	r1, r3, #9
 80031e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031ea:	0250      	lsls	r0, r2, #9
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f7fc ffec 	bl	80001d8 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e04a      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	461a      	mov	r2, r3
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800321a:	f04f 0100 	mov.w	r1, #0
 800321e:	ea02 0400 	and.w	r4, r2, r0
 8003222:	ea03 0501 	and.w	r5, r3, r1
 8003226:	4620      	mov	r0, r4
 8003228:	4629      	mov	r1, r5
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	014b      	lsls	r3, r1, #5
 8003234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003238:	0142      	lsls	r2, r0, #5
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	1b00      	subs	r0, r0, r4
 8003240:	eb61 0105 	sbc.w	r1, r1, r5
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	018b      	lsls	r3, r1, #6
 800324e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003252:	0182      	lsls	r2, r0, #6
 8003254:	1a12      	subs	r2, r2, r0
 8003256:	eb63 0301 	sbc.w	r3, r3, r1
 800325a:	f04f 0000 	mov.w	r0, #0
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	00d9      	lsls	r1, r3, #3
 8003264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003268:	00d0      	lsls	r0, r2, #3
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	1912      	adds	r2, r2, r4
 8003270:	eb45 0303 	adc.w	r3, r5, r3
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0299      	lsls	r1, r3, #10
 800327e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003282:	0290      	lsls	r0, r2, #10
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	f7fc ffa0 	bl	80001d8 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	60bb      	str	r3, [r7, #8]
      break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032be:	60bb      	str	r3, [r7, #8]
      break;
 80032c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c2:	68bb      	ldr	r3, [r7, #8]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	00f42400 	.word	0x00f42400
 80032d8:	007a1200 	.word	0x007a1200

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000

080032f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032f8:	f7ff fff0 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	08006f44 	.word	0x08006f44

0800331c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003320:	f7ff ffdc 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0b5b      	lsrs	r3, r3, #13
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	08006f44 	.word	0x08006f44

08003344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd f9c6 	bl	80006fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2224      	movs	r2, #36	; 0x24
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f9a7 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08a      	sub	sp, #40	; 0x28
 80033e2:	af02      	add	r7, sp, #8
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d17c      	bne.n	80034f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_UART_Transmit+0x2c>
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e075      	b.n	80034fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_UART_Transmit+0x3e>
 8003418:	2302      	movs	r3, #2
 800341a:	e06e      	b.n	80034fa <HAL_UART_Transmit+0x11c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2221      	movs	r2, #33	; 0x21
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003432:	f7fd fab7 	bl	80009a4 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d108      	bne.n	8003460 <HAL_UART_Transmit+0x82>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e003      	b.n	8003468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003470:	e02a      	b.n	80034c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f8e2 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e036      	b.n	80034fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	3302      	adds	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	e007      	b.n	80034ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	3301      	adds	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1cf      	bne.n	8003472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2200      	movs	r2, #0
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f8b2 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e006      	b.n	80034fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	f040 808c 	bne.w	800363c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_UART_Receive+0x2e>
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e084      	b.n	800363e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_UART_Receive+0x40>
 800353e:	2302      	movs	r3, #2
 8003540:	e07d      	b.n	800363e <HAL_UART_Receive+0x13c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2222      	movs	r2, #34	; 0x22
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800355e:	f7fd fa21 	bl	80009a4 <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d108      	bne.n	800358c <HAL_UART_Receive+0x8a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e003      	b.n	8003594 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800359c:	e043      	b.n	8003626 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2120      	movs	r1, #32
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f84c 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e042      	b.n	800363e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	3302      	adds	r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e01f      	b.n	8003618 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d007      	beq.n	80035f2 <HAL_UART_Receive+0xf0>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_UART_Receive+0xfe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e008      	b.n	8003612 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360c:	b2da      	uxtb	r2, r3
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1b6      	bne.n	800359e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e02c      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d028      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	f7fd f99d 	bl	80009a4 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	429a      	cmp	r2, r3
 8003674:	d21d      	bcs.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003684:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e00f      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0c3      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b09f      	sub	sp, #124	; 0x7c
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	ea40 0301 	orr.w	r3, r0, r1
 80036fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	431a      	orrs	r2, r3
 8003708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	431a      	orrs	r2, r3
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4313      	orrs	r3, r2
 8003714:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003720:	f021 010c 	bic.w	r1, r1, #12
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800372a:	430b      	orrs	r3, r1
 800372c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	6999      	ldr	r1, [r3, #24]
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bc5      	ldr	r3, [pc, #788]	; (8003a60 <UART_SetConfig+0x384>)
 800374c:	429a      	cmp	r2, r3
 800374e:	d004      	beq.n	800375a <UART_SetConfig+0x7e>
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4bc3      	ldr	r3, [pc, #780]	; (8003a64 <UART_SetConfig+0x388>)
 8003756:	429a      	cmp	r2, r3
 8003758:	d103      	bne.n	8003762 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800375a:	f7ff fddf 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 800375e:	6778      	str	r0, [r7, #116]	; 0x74
 8003760:	e002      	b.n	8003768 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7ff fdc7 	bl	80032f4 <HAL_RCC_GetPCLK1Freq>
 8003766:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	f040 80b6 	bne.w	80038e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003776:	461c      	mov	r4, r3
 8003778:	f04f 0500 	mov.w	r5, #0
 800377c:	4622      	mov	r2, r4
 800377e:	462b      	mov	r3, r5
 8003780:	1891      	adds	r1, r2, r2
 8003782:	6439      	str	r1, [r7, #64]	; 0x40
 8003784:	415b      	adcs	r3, r3
 8003786:	647b      	str	r3, [r7, #68]	; 0x44
 8003788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800378c:	1912      	adds	r2, r2, r4
 800378e:	eb45 0303 	adc.w	r3, r5, r3
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	00d9      	lsls	r1, r3, #3
 800379c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037a0:	00d0      	lsls	r0, r2, #3
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	1911      	adds	r1, r2, r4
 80037a8:	6639      	str	r1, [r7, #96]	; 0x60
 80037aa:	416b      	adcs	r3, r5
 80037ac:	667b      	str	r3, [r7, #100]	; 0x64
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80037bc:	415b      	adcs	r3, r3
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037c8:	f7fc fd06 	bl	80001d8 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4ba5      	ldr	r3, [pc, #660]	; (8003a68 <UART_SetConfig+0x38c>)
 80037d2:	fba3 2302 	umull	r2, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	011e      	lsls	r6, r3, #4
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	461c      	mov	r4, r3
 80037de:	f04f 0500 	mov.w	r5, #0
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	1891      	adds	r1, r2, r2
 80037e8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ea:	415b      	adcs	r3, r3
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
 80037ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037f2:	1912      	adds	r2, r2, r4
 80037f4:	eb45 0303 	adc.w	r3, r5, r3
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	00d9      	lsls	r1, r3, #3
 8003802:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003806:	00d0      	lsls	r0, r2, #3
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	1911      	adds	r1, r2, r4
 800380e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003810:	416b      	adcs	r3, r5
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	1891      	adds	r1, r2, r2
 8003820:	62b9      	str	r1, [r7, #40]	; 0x28
 8003822:	415b      	adcs	r3, r3
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800382e:	f7fc fcd3 	bl	80001d8 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <UART_SetConfig+0x38c>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <UART_SetConfig+0x38c>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003858:	441e      	add	r6, r3
 800385a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385c:	4618      	mov	r0, r3
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	1894      	adds	r4, r2, r2
 8003868:	623c      	str	r4, [r7, #32]
 800386a:	415b      	adcs	r3, r3
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003872:	1812      	adds	r2, r2, r0
 8003874:	eb41 0303 	adc.w	r3, r1, r3
 8003878:	f04f 0400 	mov.w	r4, #0
 800387c:	f04f 0500 	mov.w	r5, #0
 8003880:	00dd      	lsls	r5, r3, #3
 8003882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003886:	00d4      	lsls	r4, r2, #3
 8003888:	4622      	mov	r2, r4
 800388a:	462b      	mov	r3, r5
 800388c:	1814      	adds	r4, r2, r0
 800388e:	653c      	str	r4, [r7, #80]	; 0x50
 8003890:	414b      	adcs	r3, r1
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	1891      	adds	r1, r2, r2
 80038a0:	61b9      	str	r1, [r7, #24]
 80038a2:	415b      	adcs	r3, r3
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038ae:	f7fc fc93 	bl	80001d8 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <UART_SetConfig+0x38c>)
 80038b8:	fba3 1302 	umull	r1, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2164      	movs	r1, #100	; 0x64
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	3332      	adds	r3, #50	; 0x32
 80038ca:	4a67      	ldr	r2, [pc, #412]	; (8003a68 <UART_SetConfig+0x38c>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4432      	add	r2, r6
 80038dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038de:	e0b9      	b.n	8003a54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e2:	461c      	mov	r4, r3
 80038e4:	f04f 0500 	mov.w	r5, #0
 80038e8:	4622      	mov	r2, r4
 80038ea:	462b      	mov	r3, r5
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	6139      	str	r1, [r7, #16]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038f8:	1912      	adds	r2, r2, r4
 80038fa:	eb45 0303 	adc.w	r3, r5, r3
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	00d9      	lsls	r1, r3, #3
 8003908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800390c:	00d0      	lsls	r0, r2, #3
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	eb12 0804 	adds.w	r8, r2, r4
 8003916:	eb43 0905 	adc.w	r9, r3, r5
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003932:	0082      	lsls	r2, r0, #2
 8003934:	4640      	mov	r0, r8
 8003936:	4649      	mov	r1, r9
 8003938:	f7fc fc4e 	bl	80001d8 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <UART_SetConfig+0x38c>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011e      	lsls	r6, r3, #4
 800394a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394c:	4618      	mov	r0, r3
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	1894      	adds	r4, r2, r2
 8003958:	60bc      	str	r4, [r7, #8]
 800395a:	415b      	adcs	r3, r3
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003962:	1812      	adds	r2, r2, r0
 8003964:	eb41 0303 	adc.w	r3, r1, r3
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	f04f 0500 	mov.w	r5, #0
 8003970:	00dd      	lsls	r5, r3, #3
 8003972:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003976:	00d4      	lsls	r4, r2, #3
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	1814      	adds	r4, r2, r0
 800397e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003980:	414b      	adcs	r3, r1
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4618      	mov	r0, r3
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	008b      	lsls	r3, r1, #2
 8003998:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800399c:	0082      	lsls	r2, r0, #2
 800399e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039a2:	f7fc fc19 	bl	80001d8 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <UART_SetConfig+0x38c>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <UART_SetConfig+0x38c>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	441e      	add	r6, r3
 80039cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ce:	4618      	mov	r0, r3
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	1894      	adds	r4, r2, r2
 80039da:	603c      	str	r4, [r7, #0]
 80039dc:	415b      	adcs	r3, r3
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e4:	1812      	adds	r2, r2, r0
 80039e6:	eb41 0303 	adc.w	r3, r1, r3
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	f04f 0500 	mov.w	r5, #0
 80039f2:	00dd      	lsls	r5, r3, #3
 80039f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f8:	00d4      	lsls	r4, r2, #3
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	eb12 0a00 	adds.w	sl, r2, r0
 8003a02:	eb43 0b01 	adc.w	fp, r3, r1
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	008b      	lsls	r3, r1, #2
 8003a1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a1e:	0082      	lsls	r2, r0, #2
 8003a20:	4650      	mov	r0, sl
 8003a22:	4659      	mov	r1, fp
 8003a24:	f7fc fbd8 	bl	80001d8 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <UART_SetConfig+0x38c>)
 8003a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2164      	movs	r1, #100	; 0x64
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <UART_SetConfig+0x38c>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4432      	add	r2, r6
 8003a52:	609a      	str	r2, [r3, #8]
}
 8003a54:	bf00      	nop
 8003a56:	377c      	adds	r7, #124	; 0x7c
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5e:	bf00      	nop
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 001c 	add.w	r0, r7, #28
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d122      	bne.n	8003aca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d105      	bne.n	8003abe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f94a 	bl	8003d58 <USB_CoreReset>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e01a      	b.n	8003b00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f93e 	bl	8003d58 <USB_CoreReset>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
 8003af2:	e005      	b.n	8003b00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10b      	bne.n	8003b1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f043 0206 	orr.w	r2, r3, #6
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b2a:	b004      	add	sp, #16
 8003b2c:	4770      	bx	lr

08003b2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 0201 	bic.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e00b      	b.n	8003bb6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e001      	b.n	8003bb6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e003      	b.n	8003bbe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003bb6:	2032      	movs	r0, #50	; 0x32
 8003bb8:	f7fc ff00 	bl	80009bc <HAL_Delay>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	019b      	lsls	r3, r3, #6
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <USB_FlushTxFifo+0x48>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d0f0      	beq.n	8003be2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	00030d40 	.word	0x00030d40

08003c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2210      	movs	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <USB_FlushRxFifo+0x40>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d0f0      	beq.n	8003c26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	00030d40 	.word	0x00030d40

08003c58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	460b      	mov	r3, r1
 8003c68:	71fb      	strb	r3, [r7, #7]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003c76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11a      	bne.n	8003cb4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c7e:	88bb      	ldrh	r3, [r7, #4]
 8003c80:	3303      	adds	r3, #3
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	e00f      	b.n	8003cac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	031a      	lsls	r2, r3, #12
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c98:	461a      	mov	r2, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3eb      	bcc.n	8003c8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b089      	sub	sp, #36	; 0x24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	3303      	adds	r3, #3
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e00b      	b.n	8003cfe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3ef      	bcc.n	8003ce6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d06:	69fb      	ldr	r3, [r7, #28]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3724      	adds	r7, #36	; 0x24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0301 	and.w	r3, r3, #1
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <USB_CoreReset+0x64>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e01b      	b.n	8003dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	daf2      	bge.n	8003d64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <USB_CoreReset+0x64>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e006      	b.n	8003dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d0f0      	beq.n	8003d8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	00030d40 	.word	0x00030d40

08003dc0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	f107 001c 	add.w	r0, r7, #28
 8003dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10a      	bne.n	8003e2e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e014      	b.n	8003e58 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e009      	b.n	8003e58 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e52:	f023 0304 	bic.w	r3, r3, #4
 8003e56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e58:	2110      	movs	r1, #16
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff feb4 	bl	8003bc8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fed7 	bl	8003c14 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e015      	b.n	8003e98 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3e5      	bcc.n	8003e6c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8ac 	bl	8004000 <USB_DriveVbus>

  HAL_Delay(200U);
 8003ea8:	20c8      	movs	r0, #200	; 0xc8
 8003eaa:	f7fc fd87 	bl	80009bc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <USB_HostInit+0x164>)
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <USB_HostInit+0x168>)
 8003eda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003ede:	e009      	b.n	8003ef4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <USB_HostInit+0x16c>)
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <USB_HostInit+0x170>)
 8003ef0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f043 0210 	orr.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <USB_HostInit+0x174>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f1e:	b004      	add	sp, #16
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	01000200 	.word	0x01000200
 8003f28:	00e00300 	.word	0x00e00300
 8003f2c:	00600080 	.word	0x00600080
 8003f30:	004000e0 	.word	0x004000e0
 8003f34:	a3200008 	.word	0xa3200008

08003f38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f80:	461a      	mov	r2, r3
 8003f82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f86:	6053      	str	r3, [r2, #4]
 8003f88:	e009      	b.n	8003f9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d106      	bne.n	8003f9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f96:	461a      	mov	r2, r3
 8003f98:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fda:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003fdc:	2064      	movs	r0, #100	; 0x64
 8003fde:	f7fc fced 	bl	80009bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f7fc fce3 	bl	80009bc <HAL_Delay>

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004024:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <USB_DriveVbus+0x44>
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d106      	bne.n	8004044 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800403e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004042:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	d109      	bne.n	8004064 <USB_DriveVbus+0x64>
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800405e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004062:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 0303 	and.w	r3, r3, #3
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	b29b      	uxth	r3, r3
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	70fb      	strb	r3, [r7, #3]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70bb      	strb	r3, [r7, #2]
 80040da:	4613      	mov	r3, r2
 80040dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
 80040f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80040fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d87e      	bhi.n	8004200 <USB_HC_Init+0x13c>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <USB_HC_Init+0x44>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	08004119 	.word	0x08004119
 800410c:	080041c3 	.word	0x080041c3
 8004110:	08004119 	.word	0x08004119
 8004114:	08004185 	.word	0x08004185
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	461a      	mov	r2, r3
 8004126:	f240 439d 	movw	r3, #1181	; 0x49d
 800412a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800412c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da10      	bge.n	8004156 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	440a      	add	r2, r1
 800414a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004154:	e057      	b.n	8004206 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d051      	beq.n	8004206 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004180:	60d3      	str	r3, [r2, #12]
      break;
 8004182:	e040      	b.n	8004206 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004190:	461a      	mov	r2, r3
 8004192:	f240 639d 	movw	r3, #1693	; 0x69d
 8004196:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004198:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	da34      	bge.n	800420a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80041c0:	e023      	b.n	800420a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	461a      	mov	r2, r3
 80041d0:	f240 2325 	movw	r3, #549	; 0x225
 80041d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80041d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da17      	bge.n	800420e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80041fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80041fe:	e006      	b.n	800420e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77fb      	strb	r3, [r7, #31]
      break;
 8004204:	e004      	b.n	8004210 <USB_HC_Init+0x14c>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <USB_HC_Init+0x14c>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <USB_HC_Init+0x14c>
      break;
 800420e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	6939      	ldr	r1, [r7, #16]
 8004226:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800422a:	4313      	orrs	r3, r2
 800422c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800423a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	da03      	bge.n	800424a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e001      	b.n	800424e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ff0f 	bl	8004072 <USB_GetHostSpeed>
 8004254:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800425a:	2b02      	cmp	r3, #2
 800425c:	d106      	bne.n	800426c <USB_HC_Init+0x1a8>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d003      	beq.n	800426c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e001      	b.n	8004270 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004270:	787b      	ldrb	r3, [r7, #1]
 8004272:	059b      	lsls	r3, r3, #22
 8004274:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004278:	78bb      	ldrb	r3, [r7, #2]
 800427a:	02db      	lsls	r3, r3, #11
 800427c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004280:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004282:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004286:	049b      	lsls	r3, r3, #18
 8004288:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800428c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800428e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004290:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004294:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	0159      	lsls	r1, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042ac:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80042ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d10f      	bne.n	80042d6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80042f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02d      	beq.n	8004366 <USB_HC_StartXfer+0x86>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d129      	bne.n	8004366 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d117      	bne.n	8004348 <USB_HC_StartXfer+0x68>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	79db      	ldrb	r3, [r3, #7]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <USB_HC_StartXfer+0x48>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	79db      	ldrb	r3, [r3, #7]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d10f      	bne.n	8004348 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	6a3a      	ldr	r2, [r7, #32]
 800433c:	440a      	add	r2, r1
 800433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <USB_HC_StartXfer+0x86>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	4619      	mov	r1, r3
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fa2f 	bl	80047c0 <USB_DoPing>
      return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e0f8      	b.n	8004558 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	8912      	ldrh	r2, [r2, #8]
 8004376:	4413      	add	r3, r2
 8004378:	3b01      	subs	r3, #1
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	8912      	ldrh	r2, [r2, #8]
 800437e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004382:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004386:	8b7b      	ldrh	r3, [r7, #26]
 8004388:	429a      	cmp	r2, r3
 800438a:	d90b      	bls.n	80043a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	8912      	ldrh	r2, [r2, #8]
 8004396:	fb02 f203 	mul.w	r2, r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e001      	b.n	80043a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	8912      	ldrh	r2, [r2, #8]
 80043b2:	fb02 f203 	mul.w	r2, r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	e003      	b.n	80043c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ce:	04d9      	lsls	r1, r3, #19
 80043d0:	4b63      	ldr	r3, [pc, #396]	; (8004560 <USB_HC_StartXfer+0x280>)
 80043d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	7a9b      	ldrb	r3, [r3, #10]
 80043da:	075b      	lsls	r3, r3, #29
 80043dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	0148      	lsls	r0, r1, #5
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	4401      	add	r1, r0
 80043e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	460a      	mov	r2, r1
 8004408:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	440a      	add	r2, r1
 8004438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800443c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004440:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	7e7b      	ldrb	r3, [r7, #25]
 8004452:	075b      	lsls	r3, r3, #29
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	4401      	add	r1, r0
 800445c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800447a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e003      	b.n	8004496 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004494:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800449c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e04e      	b.n	8004558 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d149      	bne.n	8004556 <USB_HC_StartXfer+0x276>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d045      	beq.n	8004556 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	79db      	ldrb	r3, [r3, #7]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d830      	bhi.n	8004534 <USB_HC_StartXfer+0x254>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <USB_HC_StartXfer+0x1f8>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	0800450d 	.word	0x0800450d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	3303      	adds	r3, #3
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80044f2:	8afa      	ldrh	r2, [r7, #22]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d91c      	bls.n	8004538 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	619a      	str	r2, [r3, #24]
        }
        break;
 800450a:	e015      	b.n	8004538 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	3303      	adds	r3, #3
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004516:	8afa      	ldrh	r2, [r7, #22]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	b29b      	uxth	r3, r3
 8004522:	429a      	cmp	r2, r3
 8004524:	d90a      	bls.n	800453c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]
        }
        break;
 8004532:	e003      	b.n	800453c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <USB_HC_StartXfer+0x25e>
        break;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <USB_HC_StartXfer+0x25e>
        break;
 800453c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68d9      	ldr	r1, [r3, #12]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	785a      	ldrb	r2, [r3, #1]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	b29b      	uxth	r3, r3
 800454c:	2000      	movs	r0, #0
 800454e:	9000      	str	r0, [sp, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fb81 	bl	8003c58 <USB_WritePacket>
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	1ff80000 	.word	0x1ff80000

08004564 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	b29b      	uxth	r3, r3
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004586:	b480      	push	{r7}
 8004588:	b089      	sub	sp, #36	; 0x24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0c9b      	lsrs	r3, r3, #18
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0fdb      	lsrs	r3, r3, #31
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d104      	bne.n	80045e0 <USB_HC_Halt+0x5a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e0e8      	b.n	80047b2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <USB_HC_Halt+0x66>
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d173      	bne.n	80046d4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	440a      	add	r2, r1
 8004602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 80cb 	bne.w	80047b0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d143      	bne.n	80046ae <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	440a      	add	r2, r1
 800463c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004644:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	440a      	add	r2, r1
 800465c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004664:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	440a      	add	r2, r1
 800467c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004684:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3301      	adds	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004692:	d81d      	bhi.n	80046d0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046aa:	d0ec      	beq.n	8004686 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046ac:	e080      	b.n	80047b0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046ce:	e06f      	b.n	80047b0 <USB_HC_Halt+0x22a>
            break;
 80046d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046d2:	e06d      	b.n	80047b0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d143      	bne.n	800478c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	440a      	add	r2, r1
 800471a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004722:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	440a      	add	r2, r1
 800473a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800473e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004742:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	440a      	add	r2, r1
 800475a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800475e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004762:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004770:	d81d      	bhi.n	80047ae <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004788:	d0ec      	beq.n	8004764 <USB_HC_Halt+0x1de>
 800478a:	e011      	b.n	80047b0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e000      	b.n	80047b0 <USB_HC_Halt+0x22a>
          break;
 80047ae:	bf00      	nop
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80047d4:	2301      	movs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	04da      	lsls	r2, r3, #19
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <USB_DoPing+0x74>)
 80047de:	4013      	ands	r3, r2
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004808:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004810:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	1ff80000 	.word	0x1ff80000

08004838 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff f981 	bl	8003b50 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800484e:	2110      	movs	r1, #16
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff f9b9 	bl	8003bc8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff f9dc 	bl	8003c14 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e01f      	b.n	80048a2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004878:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004880:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004888:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3301      	adds	r3, #1
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b0f      	cmp	r3, #15
 80048a6:	d9dc      	bls.n	8004862 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	e034      	b.n	8004918 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048c4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3301      	adds	r3, #1
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048f4:	d80c      	bhi.n	8004910 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800490c:	d0ec      	beq.n	80048e8 <USB_StopHost+0xb0>
 800490e:	e000      	b.n	8004912 <USB_StopHost+0xda>
        break;
 8004910:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	d9c7      	bls.n	80048ae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff f8fa 	bl	8003b2e <USB_EnableGlobalInt>

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 8004990:	2200      	movs	r2, #0
 8004992:	709a      	strb	r2, [r3, #2]
 8004994:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 8004996:	789a      	ldrb	r2, [r3, #2]
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 800499a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 800499c:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 800499e:	2200      	movs	r2, #0
 80049a0:	711a      	strb	r2, [r3, #4]
 80049a2:	4b1f      	ldr	r3, [pc, #124]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049a4:	791a      	ldrb	r2, [r3, #4]
 80049a6:	4b1e      	ldr	r3, [pc, #120]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049a8:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	719a      	strb	r2, [r3, #6]
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049b2:	799a      	ldrb	r2, [r3, #6]
 80049b4:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049b6:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	721a      	strb	r2, [r3, #8]
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049c0:	7a1a      	ldrb	r2, [r3, #8]
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <USBH_HID_KeybdInit+0xa4>)
 80049c4:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e00c      	b.n	80049e6 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <USBH_HID_KeybdInit+0xa8>)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2100      	movs	r1, #0
 80049d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 80049d6:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <USBH_HID_KeybdInit+0xac>)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2100      	movs	r1, #0
 80049dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d9ef      	bls.n	80049cc <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	8b1b      	ldrh	r3, [r3, #24]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d902      	bls.n	80049fa <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2208      	movs	r2, #8
 80049f8:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <USBH_HID_KeybdInit+0xac>)
 80049fe:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f103 0008 	add.w	r0, r3, #8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004a0c:	2250      	movs	r2, #80	; 0x50
 8004a0e:	4619      	mov	r1, r3
 8004a10:	f7ff ff98 	bl	8004944 <USBH_HID_FifoInit>

  return USBH_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000118 	.word	0x20000118
 8004a24:	20000108 	.word	0x20000108
 8004a28:	20000110 	.word	0x20000110

08004a2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004a40:	2302      	movs	r3, #2
 8004a42:	e029      	b.n	8004a98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	79fa      	ldrb	r2, [r7, #7]
 8004a48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f81f 	bl	8004aa0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f001 ff53 	bl	800693c <USBH_LL_Init>

  return USBH_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e009      	b.n	8004ac6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	33e0      	adds	r3, #224	; 0xe0
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	2200      	movs	r2, #0
 8004abe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b0e      	cmp	r3, #14
 8004aca:	d9f2      	bls.n	8004ab2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e009      	b.n	8004ae6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d3f1      	bcc.n	8004ad2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2240      	movs	r2, #64	; 0x40
 8004b12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10e      	bne.n	8004b84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b6c:	1c59      	adds	r1, r3, #1
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	33de      	adds	r3, #222	; 0xde
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
 8004b82:	e004      	b.n	8004b8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004b84:	2302      	movs	r3, #2
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	e001      	b.n	8004b8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	70fb      	strb	r3, [r7, #3]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70bb      	strb	r3, [r7, #2]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004bc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004bc6:	e025      	b.n	8004c14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	221a      	movs	r2, #26
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	795b      	ldrb	r3, [r3, #5]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d002      	beq.n	8004bea <USBH_FindInterface+0x4e>
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2bff      	cmp	r3, #255	; 0xff
 8004be8:	d111      	bne.n	8004c0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004bee:	78ba      	ldrb	r2, [r7, #2]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d002      	beq.n	8004bfa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004bf4:	78bb      	ldrb	r3, [r7, #2]
 8004bf6:	2bff      	cmp	r3, #255	; 0xff
 8004bf8:	d109      	bne.n	8004c0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004bfe:	787a      	ldrb	r2, [r7, #1]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d002      	beq.n	8004c0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2bff      	cmp	r3, #255	; 0xff
 8004c08:	d101      	bne.n	8004c0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	e006      	b.n	8004c1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	3301      	adds	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d9d6      	bls.n	8004bc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004c1a:	23ff      	movs	r3, #255	; 0xff
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 febf 	bl	80069b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8004c36:	2101      	movs	r1, #1
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f001 ffd8 	bl	8006bee <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af04      	add	r7, sp, #16
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004c50:	2302      	movs	r3, #2
 8004c52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d102      	bne.n	8004c6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2203      	movs	r2, #3
 8004c68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b0b      	cmp	r3, #11
 8004c72:	f200 81b3 	bhi.w	8004fdc <USBH_Process+0x394>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <USBH_Process+0x34>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cad 	.word	0x08004cad
 8004c80:	08004cdf 	.word	0x08004cdf
 8004c84:	08004d47 	.word	0x08004d47
 8004c88:	08004f77 	.word	0x08004f77
 8004c8c:	08004fdd 	.word	0x08004fdd
 8004c90:	08004deb 	.word	0x08004deb
 8004c94:	08004f1d 	.word	0x08004f1d
 8004c98:	08004e21 	.word	0x08004e21
 8004c9c:	08004e41 	.word	0x08004e41
 8004ca0:	08004e61 	.word	0x08004e61
 8004ca4:	08004e8f 	.word	0x08004e8f
 8004ca8:	08004f5f 	.word	0x08004f5f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8193 	beq.w	8004fe0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004cc0:	20c8      	movs	r0, #200	; 0xc8
 8004cc2:	f001 ffd2 	bl	8006c6a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 fed1 	bl	8006a6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004cdc:	e180      	b.n	8004fe0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004cf6:	e182      	b.n	8004ffe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d02:	d914      	bls.n	8004d2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d903      	bls.n	8004d26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	220d      	movs	r2, #13
 8004d22:	701a      	strb	r2, [r3, #0]
      break;
 8004d24:	e16b      	b.n	8004ffe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
      break;
 8004d2c:	e167      	b.n	8004ffe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004d34:	f103 020a 	add.w	r2, r3, #10
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004d3e:	200a      	movs	r0, #10
 8004d40:	f001 ff93 	bl	8006c6a <USBH_Delay>
      break;
 8004d44:	e15b      	b.n	8004ffe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d56:	2104      	movs	r1, #4
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004d5c:	2064      	movs	r0, #100	; 0x64
 8004d5e:	f001 ff84 	bl	8006c6a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fe5c 	bl	8006a20 <USBH_LL_GetSpeed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2205      	movs	r2, #5
 8004d76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 f8ed 	bl	8005f5a <USBH_AllocPipe>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f8e5 	bl	8005f5a <USBH_AllocPipe>
 8004d90:	4603      	mov	r3, r0
 8004d92:	461a      	mov	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7919      	ldrb	r1, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004dac:	b292      	uxth	r2, r2
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4603      	mov	r3, r0
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 f89e 	bl	8005efc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7959      	ldrb	r1, [r3, #5]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	9202      	str	r2, [sp, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4603      	mov	r3, r0
 8004de0:	2200      	movs	r2, #0
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 f88a 	bl	8005efc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004de8:	e109      	b.n	8004ffe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f90c 	bl	8005008 <USBH_HandleEnum>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004df4:	7bbb      	ldrb	r3, [r7, #14]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 80f3 	bne.w	8004fe4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d103      	bne.n	8004e18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2208      	movs	r2, #8
 8004e14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004e16:	e0e5      	b.n	8004fe4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2207      	movs	r2, #7
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e0e1      	b.n	8004fe4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80de 	beq.w	8004fe8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e32:	2101      	movs	r1, #1
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8004e3e:	e0d3      	b.n	8004fe8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fc20 	bl	8005690 <USBH_SetCfg>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 80ca 	bne.w	8004fec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2209      	movs	r2, #9
 8004e5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e5e:	e0c5      	b.n	8004fec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004e6e:	2101      	movs	r1, #1
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fc30 	bl	80056d6 <USBH_SetFeature>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f040 80b9 	bne.w	8004ff0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	220a      	movs	r2, #10
 8004e82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e84:	e0b4      	b.n	8004ff0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	220a      	movs	r2, #10
 8004e8a:	701a      	strb	r2, [r3, #0]
      break;
 8004e8c:	e0b0      	b.n	8004ff0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80ad 	beq.w	8004ff4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e016      	b.n	8004ed6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32de      	adds	r2, #222	; 0xde
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	791a      	ldrb	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d108      	bne.n	8004ed0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	32de      	adds	r2, #222	; 0xde
 8004ec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004ece:	e005      	b.n	8004edc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0e5      	beq.n	8004ea8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2206      	movs	r2, #6
 8004efc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f04:	2103      	movs	r1, #3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f0a:	e073      	b.n	8004ff4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	220d      	movs	r2, #13
 8004f10:	701a      	strb	r2, [r3, #0]
      break;
 8004f12:	e06f      	b.n	8004ff4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	220d      	movs	r2, #13
 8004f18:	701a      	strb	r2, [r3, #0]
      break;
 8004f1a:	e06b      	b.n	8004ff4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	220b      	movs	r2, #11
 8004f42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f44:	e058      	b.n	8004ff8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d154      	bne.n	8004ff8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	220d      	movs	r2, #13
 8004f52:	701a      	strb	r2, [r3, #0]
      break;
 8004f54:	e050      	b.n	8004ff8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	220d      	movs	r2, #13
 8004f5a:	701a      	strb	r2, [r3, #0]
      break;
 8004f5c:	e04c      	b.n	8004ff8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d049      	beq.n	8004ffc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
      }
      break;
 8004f74:	e042      	b.n	8004ffc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fd8e 	bl	8004aa0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fb2:	2105      	movs	r1, #5
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe2b 	bl	8004c28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004fd2:	e014      	b.n	8004ffe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 fced 	bl	80069b4 <USBH_LL_Start>
      break;
 8004fda:	e010      	b.n	8004ffe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8004fdc:	bf00      	nop
 8004fde:	e00e      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004fe0:	bf00      	nop
 8004fe2:	e00c      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004fe4:	bf00      	nop
 8004fe6:	e00a      	b.n	8004ffe <USBH_Process+0x3b6>
    break;
 8004fe8:	bf00      	nop
 8004fea:	e008      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004fec:	bf00      	nop
 8004fee:	e006      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004ff0:	bf00      	nop
 8004ff2:	e004      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004ff4:	bf00      	nop
 8004ff6:	e002      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <USBH_Process+0x3b6>
      break;
 8004ffc:	bf00      	nop
  }
  return USBH_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af04      	add	r7, sp, #16
 800500e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005014:	2301      	movs	r3, #1
 8005016:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b07      	cmp	r3, #7
 800501e:	f200 81c1 	bhi.w	80053a4 <USBH_HandleEnum+0x39c>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <USBH_HandleEnum+0x20>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	08005049 	.word	0x08005049
 800502c:	08005107 	.word	0x08005107
 8005030:	08005171 	.word	0x08005171
 8005034:	080051ff 	.word	0x080051ff
 8005038:	08005269 	.word	0x08005269
 800503c:	080052d9 	.word	0x080052d9
 8005040:	0800531f 	.word	0x0800531f
 8005044:	08005365 	.word	0x08005365
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005048:	2108      	movs	r1, #8
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa50 	bl	80054f0 <USBH_Get_DevDesc>
 8005050:	4603      	mov	r3, r0
 8005052:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005054:	7bbb      	ldrb	r3, [r7, #14]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d130      	bne.n	80050bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7919      	ldrb	r1, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800507e:	b292      	uxth	r2, r2
 8005080:	9202      	str	r2, [sp, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4603      	mov	r3, r0
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 ff35 	bl	8005efc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	7959      	ldrb	r1, [r3, #5]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80050a6:	b292      	uxth	r2, r2
 80050a8:	9202      	str	r2, [sp, #8]
 80050aa:	2200      	movs	r2, #0
 80050ac:	9201      	str	r2, [sp, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4603      	mov	r3, r0
 80050b2:	2200      	movs	r2, #0
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 ff21 	bl	8005efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80050ba:	e175      	b.n	80053a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	f040 8172 	bne.w	80053a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050ca:	3301      	adds	r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d903      	bls.n	80050e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	220d      	movs	r2, #13
 80050e2:	701a      	strb	r2, [r3, #0]
      break;
 80050e4:	e160      	b.n	80053a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	795b      	ldrb	r3, [r3, #5]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 ff55 	bl	8005f9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	791b      	ldrb	r3, [r3, #4]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 ff4f 	bl	8005f9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
      break;
 8005104:	e150      	b.n	80053a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005106:	2112      	movs	r1, #18
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9f1 	bl	80054f0 <USBH_Get_DevDesc>
 800510e:	4603      	mov	r3, r0
 8005110:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005112:	7bbb      	ldrb	r3, [r7, #14]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800511e:	e145      	b.n	80053ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	2b03      	cmp	r3, #3
 8005124:	f040 8142 	bne.w	80053ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800512e:	3301      	adds	r3, #1
 8005130:	b2da      	uxtb	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800513e:	2b03      	cmp	r3, #3
 8005140:	d903      	bls.n	800514a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	220d      	movs	r2, #13
 8005146:	701a      	strb	r2, [r3, #0]
      break;
 8005148:	e130      	b.n	80053ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	795b      	ldrb	r3, [r3, #5]
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 ff23 	bl	8005f9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	791b      	ldrb	r3, [r3, #4]
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 ff1d 	bl	8005f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
      break;
 800516e:	e11d      	b.n	80053ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005170:	2101      	movs	r1, #1
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa68 	bl	8005648 <USBH_SetAddress>
 8005178:	4603      	mov	r3, r0
 800517a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800517c:	7bbb      	ldrb	r3, [r7, #14]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d132      	bne.n	80051e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005182:	2002      	movs	r0, #2
 8005184:	f001 fd71 	bl	8006c6a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7919      	ldrb	r1, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80051aa:	b292      	uxth	r2, r2
 80051ac:	9202      	str	r2, [sp, #8]
 80051ae:	2200      	movs	r2, #0
 80051b0:	9201      	str	r2, [sp, #4]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4603      	mov	r3, r0
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fe9f 	bl	8005efc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7959      	ldrb	r1, [r3, #5]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80051d2:	b292      	uxth	r2, r2
 80051d4:	9202      	str	r2, [sp, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	9201      	str	r2, [sp, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	2200      	movs	r2, #0
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fe8b 	bl	8005efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80051e6:	e0e3      	b.n	80053b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	f040 80e0 	bne.w	80053b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	220d      	movs	r2, #13
 80051f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	705a      	strb	r2, [r3, #1]
      break;
 80051fc:	e0d8      	b.n	80053b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80051fe:	2109      	movs	r1, #9
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f99d 	bl	8005540 <USBH_Get_CfgDesc>
 8005206:	4603      	mov	r3, r0
 8005208:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005216:	e0cd      	b.n	80053b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	2b03      	cmp	r3, #3
 800521c:	f040 80ca 	bne.w	80053b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005226:	3301      	adds	r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005236:	2b03      	cmp	r3, #3
 8005238:	d903      	bls.n	8005242 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	220d      	movs	r2, #13
 800523e:	701a      	strb	r2, [r3, #0]
      break;
 8005240:	e0b8      	b.n	80053b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	795b      	ldrb	r3, [r3, #5]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fea7 	bl	8005f9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	791b      	ldrb	r3, [r3, #4]
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fea1 	bl	8005f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
      break;
 8005266:	e0a5      	b.n	80053b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f965 	bl	8005540 <USBH_Get_CfgDesc>
 8005276:	4603      	mov	r3, r0
 8005278:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2205      	movs	r2, #5
 8005284:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005286:	e097      	b.n	80053b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005288:	7bbb      	ldrb	r3, [r7, #14]
 800528a:	2b03      	cmp	r3, #3
 800528c:	f040 8094 	bne.w	80053b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005296:	3301      	adds	r3, #1
 8005298:	b2da      	uxtb	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d903      	bls.n	80052b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	220d      	movs	r2, #13
 80052ae:	701a      	strb	r2, [r3, #0]
      break;
 80052b0:	e082      	b.n	80053b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	795b      	ldrb	r3, [r3, #5]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fe6f 	bl	8005f9c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fe69 	bl	8005f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
      break;
 80052d6:	e06f      	b.n	80053b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d019      	beq.n	8005316 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80052ee:	23ff      	movs	r3, #255	; 0xff
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f949 	bl	8005588 <USBH_Get_StringDesc>
 80052f6:	4603      	mov	r3, r0
 80052f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80052fa:	7bbb      	ldrb	r3, [r7, #14]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d103      	bne.n	8005308 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2206      	movs	r2, #6
 8005304:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005306:	e059      	b.n	80053bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d156      	bne.n	80053bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2206      	movs	r2, #6
 8005312:	705a      	strb	r2, [r3, #1]
      break;
 8005314:	e052      	b.n	80053bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2206      	movs	r2, #6
 800531a:	705a      	strb	r2, [r3, #1]
      break;
 800531c:	e04e      	b.n	80053bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005334:	23ff      	movs	r3, #255	; 0xff
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f926 	bl	8005588 <USBH_Get_StringDesc>
 800533c:	4603      	mov	r3, r0
 800533e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2207      	movs	r2, #7
 800534a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800534c:	e038      	b.n	80053c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d135      	bne.n	80053c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2207      	movs	r2, #7
 8005358:	705a      	strb	r2, [r3, #1]
      break;
 800535a:	e031      	b.n	80053c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2207      	movs	r2, #7
 8005360:	705a      	strb	r2, [r3, #1]
      break;
 8005362:	e02d      	b.n	80053c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800536a:	2b00      	cmp	r3, #0
 800536c:	d017      	beq.n	800539e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800537a:	23ff      	movs	r3, #255	; 0xff
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f903 	bl	8005588 <USBH_Get_StringDesc>
 8005382:	4603      	mov	r3, r0
 8005384:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005386:	7bbb      	ldrb	r3, [r7, #14]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005390:	e018      	b.n	80053c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d115      	bne.n	80053c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e012      	b.n	80053c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
      break;
 80053a2:	e00f      	b.n	80053c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80053a4:	bf00      	nop
 80053a6:	e00e      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053a8:	bf00      	nop
 80053aa:	e00c      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053ac:	bf00      	nop
 80053ae:	e00a      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053b0:	bf00      	nop
 80053b2:	e008      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053b4:	bf00      	nop
 80053b6:	e006      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053b8:	bf00      	nop
 80053ba:	e004      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053bc:	bf00      	nop
 80053be:	e002      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <USBH_HandleEnum+0x3be>
      break;
 80053c4:	bf00      	nop
  }
  return Status;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f804 	bl	8005412 <USBH_HandleSof>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b0b      	cmp	r3, #11
 8005422:	d10a      	bne.n	800543a <USBH_HandleSof+0x28>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4798      	blx	r3
  }
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005452:	bf00      	nop
}
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800546e:	bf00      	nop
}
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 fa8e 	bl	80069ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	791b      	ldrb	r3, [r3, #4]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fd61 	bl	8005f9c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	795b      	ldrb	r3, [r3, #5]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fd5b 	bl	8005f9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	b29b      	uxth	r3, r3
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550e:	2100      	movs	r1, #0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f864 	bl	80055de <USBH_GetDescriptor>
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	b292      	uxth	r2, r2
 8005530:	4619      	mov	r1, r3
 8005532:	f000 f8f4 	bl	800571e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	331c      	adds	r3, #28
 8005550:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555c:	2100      	movs	r1, #0
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f83d 	bl	80055de <USBH_GetDescriptor>
 8005564:	4603      	mov	r3, r0
 8005566:	72fb      	strb	r3, [r7, #11]
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005574:	887a      	ldrh	r2, [r7, #2]
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f940 	bl	80057fe <USBH_ParseCfgDesc>
  }

  return status;
 800557e:	7afb      	ldrb	r3, [r7, #11]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	461a      	mov	r2, r3
 8005594:	460b      	mov	r3, r1
 8005596:	72fb      	strb	r3, [r7, #11]
 8005598:	4613      	mov	r3, r2
 800559a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800559c:	7afb      	ldrb	r3, [r7, #11]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80055a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80055ac:	893b      	ldrh	r3, [r7, #8]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	460b      	mov	r3, r1
 80055b2:	2100      	movs	r1, #0
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f812 	bl	80055de <USBH_GetDescriptor>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80055ca:	893a      	ldrh	r2, [r7, #8]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fa13 	bl	80059fa <USBH_ParseStringDesc>
  }

  return status;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	72fb      	strb	r3, [r7, #11]
 80055ec:	4613      	mov	r3, r2
 80055ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	789b      	ldrb	r3, [r3, #2]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d11c      	bne.n	8005632 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2206      	movs	r2, #6
 8005608:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	893a      	ldrh	r2, [r7, #8]
 800560e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800561a:	d104      	bne.n	8005626 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f240 4209 	movw	r2, #1033	; 0x409
 8005622:	829a      	strh	r2, [r3, #20]
 8005624:	e002      	b.n	800562c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8b3a      	ldrh	r2, [r7, #24]
 8005630:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005632:	8b3b      	ldrh	r3, [r7, #24]
 8005634:	461a      	mov	r2, r3
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa2c 	bl	8005a96 <USBH_CtlReq>
 800563e:	4603      	mov	r3, r0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	789b      	ldrb	r3, [r3, #2]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10f      	bne.n	800567c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2205      	movs	r2, #5
 8005666:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800567c:	2200      	movs	r2, #0
 800567e:	2100      	movs	r1, #0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa08 	bl	8005a96 <USBH_CtlReq>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10e      	bne.n	80056c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2209      	movs	r2, #9
 80056ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9e5 	bl	8005a96 <USBH_CtlReq>
 80056cc:	4603      	mov	r3, r0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	789b      	ldrb	r3, [r3, #2]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d10f      	bne.n	800570a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2203      	movs	r2, #3
 80056f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f9c1 	bl	8005a96 <USBH_CtlReq>
 8005714:	4603      	mov	r3, r0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785a      	ldrb	r2, [r3, #1]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3302      	adds	r3, #2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	3303      	adds	r3, #3
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	b29b      	uxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	791a      	ldrb	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	795a      	ldrb	r2, [r3, #5]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	799a      	ldrb	r2, [r3, #6]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	79da      	ldrb	r2, [r3, #7]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	2b08      	cmp	r3, #8
 800577c:	d939      	bls.n	80057f2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3308      	adds	r3, #8
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	b29a      	uxth	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3309      	adds	r3, #9
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	b29b      	uxth	r3, r3
 8005792:	4313      	orrs	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	330a      	adds	r3, #10
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	330b      	adds	r3, #11
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4313      	orrs	r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	330c      	adds	r3, #12
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	330d      	adds	r3, #13
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	7b9a      	ldrb	r2, [r3, #14]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	7bda      	ldrb	r2, [r3, #15]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	7c1a      	ldrb	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	7c5a      	ldrb	r2, [r3, #17]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	745a      	strb	r2, [r3, #17]
  }
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08a      	sub	sp, #40	; 0x28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	785a      	ldrb	r2, [r3, #1]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3302      	adds	r3, #2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3303      	adds	r3, #3
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	791a      	ldrb	r2, [r3, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	795a      	ldrb	r2, [r3, #5]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	799a      	ldrb	r2, [r3, #6]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	79da      	ldrb	r2, [r3, #7]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	7a1a      	ldrb	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	2b09      	cmp	r3, #9
 8005878:	d95f      	bls.n	800593a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800587a:	2309      	movs	r3, #9
 800587c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005882:	e051      	b.n	8005928 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005884:	f107 0316 	add.w	r3, r7, #22
 8005888:	4619      	mov	r1, r3
 800588a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800588c:	f000 f8e8 	bl	8005a60 <USBH_GetNextDesc>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d146      	bne.n	8005928 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800589a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800589e:	221a      	movs	r2, #26
 80058a0:	fb02 f303 	mul.w	r3, r2, r3
 80058a4:	3308      	adds	r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	3302      	adds	r3, #2
 80058ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80058ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058b0:	69f8      	ldr	r0, [r7, #28]
 80058b2:	f000 f846 	bl	8005942 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80058c0:	e022      	b.n	8005908 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80058c2:	f107 0316 	add.w	r3, r7, #22
 80058c6:	4619      	mov	r1, r3
 80058c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ca:	f000 f8c9 	bl	8005a60 <USBH_GetNextDesc>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d117      	bne.n	8005908 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80058d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80058e0:	3201      	adds	r2, #1
 80058e2:	00d2      	lsls	r2, r2, #3
 80058e4:	211a      	movs	r1, #26
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	3308      	adds	r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	3304      	adds	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	69b8      	ldr	r0, [r7, #24]
 80058fa:	f000 f851 	bl	80059a0 <USBH_ParseEPDesc>
            ep_ix++;
 80058fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005902:	3301      	adds	r3, #1
 8005904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	791b      	ldrb	r3, [r3, #4]
 800590c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005910:	429a      	cmp	r2, r3
 8005912:	d204      	bcs.n	800591e <USBH_ParseCfgDesc+0x120>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	885a      	ldrh	r2, [r3, #2]
 8005918:	8afb      	ldrh	r3, [r7, #22]
 800591a:	429a      	cmp	r2, r3
 800591c:	d8d1      	bhi.n	80058c2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800591e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005922:	3301      	adds	r3, #1
 8005924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800592c:	2b01      	cmp	r3, #1
 800592e:	d804      	bhi.n	800593a <USBH_ParseCfgDesc+0x13c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	885a      	ldrh	r2, [r3, #2]
 8005934:	8afb      	ldrh	r3, [r7, #22]
 8005936:	429a      	cmp	r2, r3
 8005938:	d8a4      	bhi.n	8005884 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800593a:	bf00      	nop
 800593c:	3728      	adds	r7, #40	; 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	785a      	ldrb	r2, [r3, #1]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	789a      	ldrb	r2, [r3, #2]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	78da      	ldrb	r2, [r3, #3]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	791a      	ldrb	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	795a      	ldrb	r2, [r3, #5]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	799a      	ldrb	r2, [r3, #6]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	79da      	ldrb	r2, [r3, #7]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	7a1a      	ldrb	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	721a      	strb	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	785a      	ldrb	r2, [r3, #1]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	789a      	ldrb	r2, [r3, #2]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	78da      	ldrb	r2, [r3, #3]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	3305      	adds	r3, #5
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	799a      	ldrb	r2, [r3, #6]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	719a      	strb	r2, [r3, #6]
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d120      	bne.n	8005a54 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	1e9a      	subs	r2, r3, #2
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bf28      	it	cs
 8005a1e:	4613      	movcs	r3, r2
 8005a20:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3302      	adds	r3, #2
 8005a26:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	82fb      	strh	r3, [r7, #22]
 8005a2c:	e00b      	b.n	8005a46 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005a2e:	8afb      	ldrh	r3, [r7, #22]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005a40:	8afb      	ldrh	r3, [r7, #22]
 8005a42:	3302      	adds	r3, #2
 8005a44:	82fb      	strh	r3, [r7, #22]
 8005a46:	8afa      	ldrh	r2, [r7, #22]
 8005a48:	8abb      	ldrh	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3ef      	bcc.n	8005a2e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
  }
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4413      	add	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	789b      	ldrb	r3, [r3, #2]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d002      	beq.n	8005ab6 <USBH_CtlReq+0x20>
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d00f      	beq.n	8005ad4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005ab4:	e027      	b.n	8005b06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2202      	movs	r2, #2
 8005acc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad2:	e018      	b.n	8005b06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f81b 	bl	8005b10 <USBH_HandleControl>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <USBH_CtlReq+0x54>
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d106      	bne.n	8005af8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	761a      	strb	r2, [r3, #24]
      break;
 8005af6:	e005      	b.n	8005b04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d102      	bne.n	8005b04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	709a      	strb	r2, [r3, #2]
      break;
 8005b04:	bf00      	nop
  }
  return status;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7e1b      	ldrb	r3, [r3, #24]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	2b0a      	cmp	r3, #10
 8005b28:	f200 8156 	bhi.w	8005dd8 <USBH_HandleControl+0x2c8>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <USBH_HandleControl+0x24>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	08005b7b 	.word	0x08005b7b
 8005b3c:	08005be5 	.word	0x08005be5
 8005b40:	08005c0b 	.word	0x08005c0b
 8005b44:	08005c43 	.word	0x08005c43
 8005b48:	08005c6d 	.word	0x08005c6d
 8005b4c:	08005cbf 	.word	0x08005cbf
 8005b50:	08005ce1 	.word	0x08005ce1
 8005b54:	08005d1d 	.word	0x08005d1d
 8005b58:	08005d43 	.word	0x08005d43
 8005b5c:	08005d81 	.word	0x08005d81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0110 	add.w	r1, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	795b      	ldrb	r3, [r3, #5]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f943 	bl	8005df8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	761a      	strb	r2, [r3, #24]
      break;
 8005b78:	e139      	b.n	8005dee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	795b      	ldrb	r3, [r3, #5]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 f821 	bl	8006bc8 <USBH_LL_GetURBState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11e      	bne.n	8005bce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7c1b      	ldrb	r3, [r3, #16]
 8005b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8adb      	ldrh	r3, [r3, #22]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005ba2:	7b7b      	ldrb	r3, [r7, #13]
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d103      	bne.n	8005bb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2203      	movs	r2, #3
 8005bac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005bae:	e115      	b.n	8005ddc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2205      	movs	r2, #5
 8005bb4:	761a      	strb	r2, [r3, #24]
      break;
 8005bb6:	e111      	b.n	8005ddc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005bb8:	7b7b      	ldrb	r3, [r7, #13]
 8005bba:	2b80      	cmp	r3, #128	; 0x80
 8005bbc:	d103      	bne.n	8005bc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2209      	movs	r2, #9
 8005bc2:	761a      	strb	r2, [r3, #24]
      break;
 8005bc4:	e10a      	b.n	8005ddc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2207      	movs	r2, #7
 8005bca:	761a      	strb	r2, [r3, #24]
      break;
 8005bcc:	e106      	b.n	8005ddc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d003      	beq.n	8005bdc <USBH_HandleControl+0xcc>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	f040 8100 	bne.w	8005ddc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	220b      	movs	r2, #11
 8005be0:	761a      	strb	r2, [r3, #24]
      break;
 8005be2:	e0fb      	b.n	8005ddc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6899      	ldr	r1, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	899a      	ldrh	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	791b      	ldrb	r3, [r3, #4]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f93a 	bl	8005e76 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	761a      	strb	r2, [r3, #24]
      break;
 8005c08:	e0f1      	b.n	8005dee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	791b      	ldrb	r3, [r3, #4]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 ffd9 	bl	8006bc8 <USBH_LL_GetURBState>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d102      	bne.n	8005c26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2209      	movs	r2, #9
 8005c24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	d102      	bne.n	8005c32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c30:	e0d6      	b.n	8005de0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	f040 80d3 	bne.w	8005de0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	220b      	movs	r2, #11
 8005c3e:	761a      	strb	r2, [r3, #24]
      break;
 8005c40:	e0ce      	b.n	8005de0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6899      	ldr	r1, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	899a      	ldrh	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	795b      	ldrb	r3, [r3, #5]
 8005c4e:	2001      	movs	r0, #1
 8005c50:	9000      	str	r0, [sp, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8ea 	bl	8005e2c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2206      	movs	r2, #6
 8005c68:	761a      	strb	r2, [r3, #24]
      break;
 8005c6a:	e0c0      	b.n	8005dee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	795b      	ldrb	r3, [r3, #5]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 ffa8 	bl	8006bc8 <USBH_LL_GetURBState>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d103      	bne.n	8005c8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2207      	movs	r2, #7
 8005c86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c88:	e0ac      	b.n	8005de4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d105      	bne.n	8005c9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	220c      	movs	r2, #12
 8005c94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005c96:	2303      	movs	r3, #3
 8005c98:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9a:	e0a3      	b.n	8005de4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	761a      	strb	r2, [r3, #24]
      break;
 8005ca8:	e09c      	b.n	8005de4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	f040 8099 	bne.w	8005de4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	220b      	movs	r2, #11
 8005cb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbc:	e092      	b.n	8005de4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	791b      	ldrb	r3, [r3, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8d5 	bl	8005e76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2208      	movs	r2, #8
 8005cdc:	761a      	strb	r2, [r3, #24]

      break;
 8005cde:	e086      	b.n	8005dee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 ff6e 	bl	8006bc8 <USBH_LL_GetURBState>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	220d      	movs	r2, #13
 8005cfa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d00:	e072      	b.n	8005de8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d103      	bne.n	8005d10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	220b      	movs	r2, #11
 8005d0c:	761a      	strb	r2, [r3, #24]
      break;
 8005d0e:	e06b      	b.n	8005de8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	2b05      	cmp	r3, #5
 8005d14:	d168      	bne.n	8005de8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005d16:	2303      	movs	r3, #3
 8005d18:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1a:	e065      	b.n	8005de8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	795b      	ldrb	r3, [r3, #5]
 8005d20:	2201      	movs	r2, #1
 8005d22:	9200      	str	r2, [sp, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2100      	movs	r1, #0
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f87f 	bl	8005e2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	220a      	movs	r2, #10
 8005d3e:	761a      	strb	r2, [r3, #24]
      break;
 8005d40:	e055      	b.n	8005dee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	795b      	ldrb	r3, [r3, #5]
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 ff3d 	bl	8006bc8 <USBH_LL_GetURBState>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	220d      	movs	r2, #13
 8005d60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d62:	e043      	b.n	8005dec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d103      	bne.n	8005d72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2209      	movs	r2, #9
 8005d6e:	761a      	strb	r2, [r3, #24]
      break;
 8005d70:	e03c      	b.n	8005dec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d139      	bne.n	8005dec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	220b      	movs	r2, #11
 8005d7c:	761a      	strb	r2, [r3, #24]
      break;
 8005d7e:	e035      	b.n	8005dec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7e5b      	ldrb	r3, [r3, #25]
 8005d84:	3301      	adds	r3, #1
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	765a      	strb	r2, [r3, #25]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	7e5b      	ldrb	r3, [r3, #25]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d806      	bhi.n	8005da2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005da0:	e025      	b.n	8005dee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005da8:	2106      	movs	r1, #6
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	795b      	ldrb	r3, [r3, #5]
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f8ee 	bl	8005f9c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	791b      	ldrb	r3, [r3, #4]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f8e8 	bl	8005f9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd6:	e00a      	b.n	8005dee <USBH_HandleControl+0x2de>

    default:
      break;
 8005dd8:	bf00      	nop
 8005dda:	e008      	b.n	8005dee <USBH_HandleControl+0x2de>
      break;
 8005ddc:	bf00      	nop
 8005dde:	e006      	b.n	8005dee <USBH_HandleControl+0x2de>
      break;
 8005de0:	bf00      	nop
 8005de2:	e004      	b.n	8005dee <USBH_HandleControl+0x2de>
      break;
 8005de4:	bf00      	nop
 8005de6:	e002      	b.n	8005dee <USBH_HandleControl+0x2de>
      break;
 8005de8:	bf00      	nop
 8005dea:	e000      	b.n	8005dee <USBH_HandleControl+0x2de>
      break;
 8005dec:	bf00      	nop
  }

  return status;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af04      	add	r7, sp, #16
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e06:	79f9      	ldrb	r1, [r7, #7]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9303      	str	r3, [sp, #12]
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	9302      	str	r3, [sp, #8]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	2300      	movs	r3, #0
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fea2 	bl	8006b66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af04      	add	r7, sp, #16
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	80fb      	strh	r3, [r7, #6]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e50:	7979      	ldrb	r1, [r7, #5]
 8005e52:	7e3b      	ldrb	r3, [r7, #24]
 8005e54:	9303      	str	r3, [sp, #12]
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	9302      	str	r3, [sp, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	2301      	movs	r3, #1
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	2200      	movs	r2, #0
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fe7d 	bl	8006b66 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af04      	add	r7, sp, #16
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	4611      	mov	r1, r2
 8005e82:	461a      	mov	r2, r3
 8005e84:	460b      	mov	r3, r1
 8005e86:	80fb      	strh	r3, [r7, #6]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e8c:	7979      	ldrb	r1, [r7, #5]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	9302      	str	r3, [sp, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 fe5f 	bl	8006b66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005ea8:	2300      	movs	r3, #0

}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b088      	sub	sp, #32
 8005eb6:	af04      	add	r7, sp, #16
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	80fb      	strh	r3, [r7, #6]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005ed6:	7979      	ldrb	r1, [r7, #5]
 8005ed8:	7e3b      	ldrb	r3, [r7, #24]
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	9302      	str	r3, [sp, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2302      	movs	r3, #2
 8005eea:	2200      	movs	r2, #0
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 fe3a 	bl	8006b66 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	70fb      	strb	r3, [r7, #3]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70bb      	strb	r3, [r7, #2]
 8005f12:	4613      	mov	r3, r2
 8005f14:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8005f16:	7878      	ldrb	r0, [r7, #1]
 8005f18:	78ba      	ldrb	r2, [r7, #2]
 8005f1a:	78f9      	ldrb	r1, [r7, #3]
 8005f1c:	8b3b      	ldrh	r3, [r7, #24]
 8005f1e:	9302      	str	r3, [sp, #8]
 8005f20:	7d3b      	ldrb	r3, [r7, #20]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	7c3b      	ldrb	r3, [r7, #16]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fdcd 	bl	8006aca <USBH_LL_OpenPipe>

  return USBH_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fdec 	bl	8006b28 <USBH_LL_ClosePipe>

  return USBH_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f836 	bl	8005fd8 <USBH_GetFreePipe>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00a      	beq.n	8005f90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	89fb      	ldrh	r3, [r7, #14]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	33e0      	adds	r3, #224	; 0xe0
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	b2db      	uxtb	r3, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b0a      	cmp	r3, #10
 8005fac:	d80d      	bhi.n	8005fca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	33e0      	adds	r3, #224	; 0xe0
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	33e0      	adds	r3, #224	; 0xe0
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
 8005fe8:	e00f      	b.n	800600a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	33e0      	adds	r3, #224	; 0xe0
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	b29b      	uxth	r3, r3
 8006002:	e007      	b.n	8006014 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	3301      	adds	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b0a      	cmp	r3, #10
 800600e:	d9ec      	bls.n	8005fea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006010:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBH_PRT_InterfaceInit>:
//}PRT_HandleTypeDef;

#define PRT_BOOT_CODE 1


static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af04      	add	r7, sp, #16
 8006026:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800602e:	2020      	movs	r0, #32
 8006030:	f000 fe7c 	bl	8006d2c <malloc>
 8006034:	4603      	mov	r3, r0
 8006036:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 8006042:	2220      	movs	r2, #32
 8006044:	2100      	movs	r1, #0
 8006046:	68b8      	ldr	r0, [r7, #8]
 8006048:	f000 fe80 	bl	8006d4c <memset>

	PRT_Handle->num = 0;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	709a      	strb	r2, [r3, #2]
	 PRT_Handle->poll = 10;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	220a      	movs	r2, #10
 8006056:	729a      	strb	r2, [r3, #10]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800605e:	7919      	ldrb	r1, [r3, #4]
 8006060:	23ff      	movs	r3, #255	; 0xff
 8006062:	2201      	movs	r2, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe fd99 	bl	8004b9c <USBH_FindInterface>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	4619      	mov	r1, r3
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	231a      	movs	r3, #26
 800607c:	fb03 f301 	mul.w	r3, r3, r1
 8006080:	4413      	add	r3, r2
 8006082:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	4619      	mov	r1, r3
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	231a      	movs	r3, #26
 8006096:	fb03 f301 	mul.w	r3, r3, r1
 800609a:	4413      	add	r3, r2
 800609c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	4619      	mov	r1, r3
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	231a      	movs	r3, #26
 80060b0:	fb03 f301 	mul.w	r3, r3, r1
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	799b      	ldrb	r3, [r3, #6]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff ff47 	bl	8005f5a <USBH_AllocPipe>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	4619      	mov	r1, r3
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	231a      	movs	r3, #26
 80060de:	fb03 f301 	mul.w	r3, r3, r1
 80060e2:	4413      	add	r3, r2
 80060e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	795b      	ldrb	r3, [r3, #5]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff30 	bl	8005f5a <USBH_AllocPipe>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006108:	791b      	ldrb	r3, [r3, #4]
 800610a:	2b07      	cmp	r3, #7
 800610c:	d107      	bne.n	800611e <USBH_PRT_InterfaceInit+0xfe>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 500);
 800610e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006112:	2210      	movs	r2, #16
 8006114:	4932      	ldr	r1, [pc, #200]	; (80061e0 <USBH_PRT_InterfaceInit+0x1c0>)
 8006116:	4833      	ldr	r0, [pc, #204]	; (80061e4 <USBH_PRT_InterfaceInit+0x1c4>)
 8006118:	f7fd f961 	bl	80033de <HAL_UART_Transmit>
 800611c:	e006      	b.n	800612c <USBH_PRT_InterfaceInit+0x10c>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 500);
 800611e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006122:	2214      	movs	r2, #20
 8006124:	4930      	ldr	r1, [pc, #192]	; (80061e8 <USBH_PRT_InterfaceInit+0x1c8>)
 8006126:	482f      	ldr	r0, [pc, #188]	; (80061e4 <USBH_PRT_InterfaceInit+0x1c4>)
 8006128:	f7fd f959 	bl	80033de <HAL_UART_Transmit>


	//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e04d      	b.n	80061ce <USBH_PRT_InterfaceInit+0x1ae>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	4618      	mov	r0, r3
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3301      	adds	r3, #1
 800613e:	00d9      	lsls	r1, r3, #3
 8006140:	231a      	movs	r3, #26
 8006142:	fb03 f300 	mul.w	r3, r3, r0
 8006146:	440b      	add	r3, r1
 8006148:	4413      	add	r3, r2
 800614a:	f203 3346 	addw	r3, r3, #838	; 0x346
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b25b      	sxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	da1c      	bge.n	8006190 <USBH_PRT_InterfaceInit+0x170>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	7919      	ldrb	r1, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	7998      	ldrb	r0, [r3, #6]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	8912      	ldrh	r2, [r2, #8]
 800616e:	9202      	str	r2, [sp, #8]
 8006170:	2202      	movs	r2, #2
 8006172:	9201      	str	r2, [sp, #4]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4623      	mov	r3, r4
 8006178:	4602      	mov	r2, r0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff febe 	bl	8005efc <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	791b      	ldrb	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fd3e 	bl	8006c0a <USBH_LL_SetToggle>
 800618e:	e01b      	b.n	80061c8 <USBH_PRT_InterfaceInit+0x1a8>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	78d9      	ldrb	r1, [r3, #3]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	7958      	ldrb	r0, [r3, #5]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	8912      	ldrh	r2, [r2, #8]
 80061a8:	9202      	str	r2, [sp, #8]
 80061aa:	2202      	movs	r2, #2
 80061ac:	9201      	str	r2, [sp, #4]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4623      	mov	r3, r4
 80061b2:	4602      	mov	r2, r0
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fea1 	bl	8005efc <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	78db      	ldrb	r3, [r3, #3]
 80061be:	2200      	movs	r2, #0
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fd21 	bl	8006c0a <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	ddae      	ble.n	8006132 <USBH_PRT_InterfaceInit+0x112>

		  }
     }

return USBH_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd90      	pop	{r4, r7, pc}
 80061de:	bf00      	nop
 80061e0:	08006f08 	.word	0x08006f08
 80061e4:	200000c0 	.word	0x200000c0
 80061e8:	08006f1c 	.word	0x08006f1c

080061ec <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	791b      	ldrb	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fe94 	bl	8005f3a <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff febf 	bl	8005f9c <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	78db      	ldrb	r3, [r3, #3]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	78db      	ldrb	r3, [r3, #3]
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fe81 	bl	8005f3a <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff feac 	bl	8005f9c <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fd6c 	bl	8006d3c <free>
	    phost->pActiveClass->pData = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]





return USBH_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 8006278:	b580      	push	{r7, lr}
 800627a:	b0a8      	sub	sp, #160	; 0xa0
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	2296      	movs	r2, #150	; 0x96
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fd5f 	bl	8006d4c <memset>

// some printers required these cammands and some are not. these commands give us some usefull infomation only.
// Although that infomation we don't required any where in this Driver.

	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 800628e:	bf00      	nop
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	2296      	movs	r2, #150	; 0x96
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa06 	bl	80066aa <USBH_PRT_Get_Device_Id>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f5      	bne.n	8006290 <USBH_PRT_ClassRequest+0x18>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
 80062a4:	f107 0108 	add.w	r1, r7, #8
 80062a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80062ac:	2264      	movs	r2, #100	; 0x64
 80062ae:	4814      	ldr	r0, [pc, #80]	; (8006300 <USBH_PRT_ClassRequest+0x88>)
 80062b0:	f7fd f895 	bl	80033de <HAL_UART_Transmit>
	memset(buff,0,150);
 80062b4:	f107 0308 	add.w	r3, r7, #8
 80062b8:	2296      	movs	r2, #150	; 0x96
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fd45 	bl	8006d4c <memset>

	while( USBH_PRT_Get_Port_Status(phost, buff, 150) != USBH_OK);
 80062c2:	bf00      	nop
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	2296      	movs	r2, #150	; 0x96
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fa0d 	bl	80066ec <USBH_PRT_Get_Port_Status>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f5      	bne.n	80062c4 <USBH_PRT_ClassRequest+0x4c>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
 80062d8:	f107 0108 	add.w	r1, r7, #8
 80062dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80062e0:	2264      	movs	r2, #100	; 0x64
 80062e2:	4807      	ldr	r0, [pc, #28]	; (8006300 <USBH_PRT_ClassRequest+0x88>)
 80062e4:	f7fd f87b 	bl	80033de <HAL_UART_Transmit>
	memset(buff,0,150);
 80062e8:	f107 0308 	add.w	r3, r7, #8
 80062ec:	2296      	movs	r2, #150	; 0x96
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd2b 	bl	8006d4c <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
//	memset(buff,0,150);

	return USBH_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	37a0      	adds	r7, #160	; 0xa0
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200000c0 	.word	0x200000c0

08006304 <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost){
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 800630a:	b08f      	sub	sp, #60	; 0x3c
 800630c:	af02      	add	r7, sp, #8
 800630e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006312:	3b2c      	subs	r3, #44	; 0x2c
 8006314:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 8006316:	2300      	movs	r3, #0
 8006318:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800631c:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8006320:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];

	 USBH_StatusTypeDef status = USBH_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006328:	f102 0221 	add.w	r2, r2, #33	; 0x21
 800632c:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 800632e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006332:	3b2c      	subs	r3, #44	; 0x2c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006340:	f102 021c 	add.w	r2, r2, #28
 8006344:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 8006346:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800634a:	f103 031c 	add.w	r3, r3, #28
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fcfa 	bl	8006d4c <memset>

	 PRT_Handle->poll = 10;
 8006358:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800635c:	f103 031c 	add.w	r3, r3, #28
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	220a      	movs	r2, #10
 8006364:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state){
 8006366:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800636a:	f103 031c 	add.w	r3, r3, #28
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b03      	cmp	r3, #3
 8006374:	f200 816c 	bhi.w	8006650 <USBH_PRT_Process+0x34c>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBH_PRT_Process+0x7c>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006391 	.word	0x08006391
 8006384:	080063a1 	.word	0x080063a1
 8006388:	0800640d 	.word	0x0800640d
 800638c:	080065c3 	.word	0x080065c3

	case PRT_INIT:
		PRT_Handle->state = PRT_SYNC;
 8006390:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006394:	f103 031c 	add.w	r3, r3, #28
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
					break;
 800639e:	e15a      	b.n	8006656 <USBH_PRT_Process+0x352>

	 case PRT_SYNC:
	      /* Sync with start of Even Frame */

		 if (phost->Timer & 1U)
 80063a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a4:	3b2c      	subs	r3, #44	; 0x2c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d006      	beq.n	80063c2 <USBH_PRT_Process+0xbe>
	      {
	        PRT_Handle->state = PRT_GET_DATA;
 80063b4:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80063b8:	f103 031c 	add.w	r3, r3, #28
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2202      	movs	r2, #2
 80063c0:	701a      	strb	r2, [r3, #0]
	      }

		 memset(buff,0,SIZE_BUFF);
 80063c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063c6:	3b24      	subs	r3, #36	; 0x24
 80063c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fcbc 	bl	8006d4c <memset>
		 while(strlen(buff) < 10)
 80063d4:	e009      	b.n	80063ea <USBH_PRT_Process+0xe6>
			 HAL_UART_Receive(&huart2, buff, SIZE_BUFF,1000);
 80063d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80063da:	3924      	subs	r1, #36	; 0x24
 80063dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80063e4:	489f      	ldr	r0, [pc, #636]	; (8006664 <USBH_PRT_Process+0x360>)
 80063e6:	f7fd f88c 	bl	8003502 <HAL_UART_Receive>
		 while(strlen(buff) < 10)
 80063ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ee:	3b24      	subs	r3, #36	; 0x24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7f9 fee9 	bl	80001c8 <strlen>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b09      	cmp	r3, #9
 80063fa:	d9ec      	bls.n	80063d6 <USBH_PRT_Process+0xd2>

		 PRT_Handle->state = PRT_GET_DATA;
 80063fc:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006400:	f103 031c 	add.w	r3, r3, #28
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2202      	movs	r2, #2
 8006408:	701a      	strb	r2, [r3, #0]
	      break;
 800640a:	e124      	b.n	8006656 <USBH_PRT_Process+0x352>

	 case PRT_GET_DATA:
		 pktcnt=0;
 800640c:	2300      	movs	r3, #0
 800640e:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006412:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006416:	7013      	strb	r3, [r2, #0]
		 XferSize = strlen(buff)+1;
 8006418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800641c:	3b24      	subs	r3, #36	; 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f7f9 fed2 	bl	80001c8 <strlen>
 8006424:	4603      	mov	r3, r0
 8006426:	b29b      	uxth	r3, r3
 8006428:	3301      	adds	r3, #1
 800642a:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800642e:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8006432:	8013      	strh	r3, [r2, #0]
		 // Number of packets are important because the max packet size is decided and can not send more than that.
		 // Here in this case is 64 bytes. It is already decided by device/configuration structures.
	for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8006434:	2300      	movs	r3, #0
 8006436:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800643a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e08d      	b.n	800655e <USBH_PRT_Process+0x25a>
	{
		 for(int j=0; j < PRT_Handle->length; j++)
 8006442:	2300      	movs	r3, #0
 8006444:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006448:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e025      	b.n	800649c <USBH_PRT_Process+0x198>
		 {
				 temp[j] = buff[i+j];
 8006450:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006454:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800645e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	441a      	add	r2, r3
 8006466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800646a:	3b24      	subs	r3, #36	; 0x24
 800646c:	5c99      	ldrb	r1, [r3, r2]
 800646e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8006472:	f102 021c 	add.w	r2, r2, #28
 8006476:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800647a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4413      	add	r3, r2
 8006482:	460a      	mov	r2, r1
 8006484:	701a      	strb	r2, [r3, #0]
		 for(int j=0; j < PRT_Handle->length; j++)
 8006486:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800648a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006496:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064a0:	f103 031c 	add.w	r3, r3, #28
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	891b      	ldrh	r3, [r3, #8]
 80064a8:	461a      	mov	r2, r3
 80064aa:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064ae:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4293      	cmp	r3, r2
 80064b6:	dbcb      	blt.n	8006450 <USBH_PRT_Process+0x14c>
		 }//for(j)

		 PRT_Handle->buff = temp;
 80064b8:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064bc:	f103 031c 	add.w	r3, r3, #28
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80064c6:	f102 021c 	add.w	r2, r2, #28
 80064ca:	615a      	str	r2, [r3, #20]
		 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->OutPipe, 0);
 80064cc:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064d0:	f103 031c 	add.w	r3, r3, #28
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6959      	ldr	r1, [r3, #20]
 80064d8:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064dc:	f103 031c 	add.w	r3, r3, #28
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	891a      	ldrh	r2, [r3, #8]
 80064e4:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064e8:	f103 031c 	add.w	r3, r3, #28
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	78db      	ldrb	r3, [r3, #3]
 80064f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80064f4:	382c      	subs	r0, #44	; 0x2c
 80064f6:	2400      	movs	r4, #0
 80064f8:	9400      	str	r4, [sp, #0]
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	f7ff fcd9 	bl	8005eb2 <USBH_BulkSendData>
 8006500:	4603      	mov	r3, r0
 8006502:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006506:	f102 0221 	add.w	r2, r2, #33	; 0x21
 800650a:	7013      	strb	r3, [r2, #0]
		 memset(temp,0,64);
 800650c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8006510:	f103 031c 	add.w	r3, r3, #28
 8006514:	2240      	movs	r2, #64	; 0x40
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fc17 	bl	8006d4c <memset>
		 USBH_Delay(10);
 800651e:	200a      	movs	r0, #10
 8006520:	f000 fba3 	bl	8006c6a <USBH_Delay>
		 pktcnt++;
 8006524:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006528:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006534:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 8006538:	7013      	strb	r3, [r2, #0]
	for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 800653a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800653e:	f103 031c 	add.w	r3, r3, #28
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	891b      	ldrh	r3, [r3, #8]
 8006546:	461a      	mov	r2, r3
 8006548:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800654c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4413      	add	r3, r2
 8006554:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006558:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006562:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800656e:	f103 031c 	add.w	r3, r3, #28
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	891b      	ldrh	r3, [r3, #8]
 8006576:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 800657a:	f101 0122 	add.w	r1, r1, #34	; 0x22
 800657e:	8809      	ldrh	r1, [r1, #0]
 8006580:	fbb1 f3f3 	udiv	r3, r1, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	429a      	cmp	r2, r3
 8006588:	f67f af5b 	bls.w	8006442 <USBH_PRT_Process+0x13e>

	}

	 PRT_Handle->state = PRT_POLL;
 800658c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006590:	f103 031c 	add.w	r3, r3, #28
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2203      	movs	r2, #3
 8006598:	701a      	strb	r2, [r3, #0]
	 PRT_Handle->timer = phost->Timer;
 800659a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800659e:	3b2c      	subs	r3, #44	; 0x2c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80065a6:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065aa:	f103 031c 	add.w	r3, r3, #28
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
	 PRT_Handle->DataReady = 0U;
 80065b2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065b6:	f103 031c 	add.w	r3, r3, #28
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	741a      	strb	r2, [r3, #16]
	 break;
 80065c0:	e049      	b.n	8006656 <USBH_PRT_Process+0x352>

	 case PRT_POLL:

		 if(USBH_LL_GetURBState(phost, PRT_Handle->OutPipe) == USBH_URB_DONE){
 80065c2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065c6:	f103 031c 	add.w	r3, r3, #28
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	78da      	ldrb	r2, [r3, #3]
 80065ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065d2:	3b2c      	subs	r3, #44	; 0x2c
 80065d4:	4611      	mov	r1, r2
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	f000 faf6 	bl	8006bc8 <USBH_LL_GetURBState>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d138      	bne.n	8006654 <USBH_PRT_Process+0x350>

			 status = USBH_LL_GetURBState(phost, PRT_Handle->OutPipe);
 80065e2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065e6:	f103 031c 	add.w	r3, r3, #28
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	78da      	ldrb	r2, [r3, #3]
 80065ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065f2:	3b2c      	subs	r3, #44	; 0x2c
 80065f4:	4611      	mov	r1, r2
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	f000 fae6 	bl	8006bc8 <USBH_LL_GetURBState>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006602:	f102 0221 	add.w	r2, r2, #33	; 0x21
 8006606:	7013      	strb	r3, [r2, #0]
			 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->OutPipe);
 8006608:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800660c:	f103 031c 	add.w	r3, r3, #28
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	78da      	ldrb	r2, [r3, #3]
 8006614:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006618:	3b2c      	subs	r3, #44	; 0x2c
 800661a:	4611      	mov	r1, r2
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f000 fa41 	bl	8006aa4 <USBH_LL_GetLastXferSize>
 8006622:	4603      	mov	r3, r0
 8006624:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006628:	f102 0222 	add.w	r2, r2, #34	; 0x22
 800662c:	8013      	strh	r3, [r2, #0]
			 PRT_Handle->state = PRT_INIT;
 800662e:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006632:	f103 031c 	add.w	r3, r3, #28
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
			 USBH_Delay( PRT_Handle->poll);
 800663c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006640:	f103 031c 	add.w	r3, r3, #28
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	7a9b      	ldrb	r3, [r3, #10]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fb0e 	bl	8006c6a <USBH_Delay>
		 }

		 break;
 800664e:	e001      	b.n	8006654 <USBH_PRT_Process+0x350>

	 default:
		break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <USBH_PRT_Process+0x352>
		 break;
 8006654:	bf00      	nop

	}



	return USBH_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	f507 571d 	add.w	r7, r7, #10048	; 0x2740
 800665e:	3734      	adds	r7, #52	; 0x34
 8006660:	46bd      	mov	sp, r7
 8006662:	bd90      	pop	{r4, r7, pc}
 8006664:	200000c0 	.word	0x200000c0

08006668 <USBH_PRT_SOFProcess>:
static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d10c      	bne.n	800669c <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	7a92      	ldrb	r2, [r2, #10]
 8006692:	4293      	cmp	r3, r2
 8006694:	d302      	bcc.n	800669c <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USBH_PRT_Get_Device_Id>:



static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	22a1      	movs	r2, #161	; 0xa1
 80066bc:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff f9da 	bl	8005a96 <USBH_CtlReq>
 80066e2:	4603      	mov	r3, r0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBH_PRT_Get_Port_Status>:


static USBH_StatusTypeDef USBH_PRT_Get_Port_Status(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22a1      	movs	r2, #161	; 0xa1
 80066fe:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_PORT_STATUS;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff f9b9 	bl	8005a96 <USBH_CtlReq>
 8006724:	4603      	mov	r3, r0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006734:	2201      	movs	r2, #1
 8006736:	490e      	ldr	r1, [pc, #56]	; (8006770 <MX_USB_HOST_Init+0x40>)
 8006738:	480e      	ldr	r0, [pc, #56]	; (8006774 <MX_USB_HOST_Init+0x44>)
 800673a:	f7fe f977 	bl	8004a2c <USBH_Init>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006744:	f7f9 ffaa 	bl	800069c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 8006748:	490b      	ldr	r1, [pc, #44]	; (8006778 <MX_USB_HOST_Init+0x48>)
 800674a:	480a      	ldr	r0, [pc, #40]	; (8006774 <MX_USB_HOST_Init+0x44>)
 800674c:	f7fe f9fc 	bl	8004b48 <USBH_RegisterClass>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006756:	f7f9 ffa1 	bl	800069c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800675a:	4806      	ldr	r0, [pc, #24]	; (8006774 <MX_USB_HOST_Init+0x44>)
 800675c:	f7fe fa64 	bl	8004c28 <USBH_Start>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006766:	f7f9 ff99 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	08006791 	.word	0x08006791
 8006774:	20000128 	.word	0x20000128
 8006778:	2000000c 	.word	0x2000000c

0800677c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006780:	4802      	ldr	r0, [pc, #8]	; (800678c <MX_USB_HOST_Process+0x10>)
 8006782:	f7fe fa61 	bl	8004c48 <USBH_Process>
}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000128 	.word	0x20000128

08006790 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d819      	bhi.n	80067d8 <USBH_UserProcess+0x48>
 80067a4:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <USBH_UserProcess+0x1c>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067c1 	.word	0x080067c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <USBH_UserProcess+0x58>)
 80067c2:	2203      	movs	r2, #3
 80067c4:	701a      	strb	r2, [r3, #0]
  break;
 80067c6:	e008      	b.n	80067da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <USBH_UserProcess+0x58>)
 80067ca:	2202      	movs	r2, #2
 80067cc:	701a      	strb	r2, [r3, #0]
  break;
 80067ce:	e004      	b.n	80067da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <USBH_UserProcess+0x58>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
  break;
 80067d6:	e000      	b.n	80067da <USBH_UserProcess+0x4a>

  default:
  break;
 80067d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	200000b0 	.word	0x200000b0

080067ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800680c:	d13a      	bne.n	8006884 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <HAL_HCD_MspInit+0xa0>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4a1d      	ldr	r2, [pc, #116]	; (800688c <HAL_HCD_MspInit+0xa0>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6313      	str	r3, [r2, #48]	; 0x30
 800681e:	4b1b      	ldr	r3, [pc, #108]	; (800688c <HAL_HCD_MspInit+0xa0>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800682a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800682e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006830:	2302      	movs	r3, #2
 8006832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006834:	2300      	movs	r3, #0
 8006836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006838:	2303      	movs	r3, #3
 800683a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800683c:	230a      	movs	r3, #10
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006840:	f107 0314 	add.w	r3, r7, #20
 8006844:	4619      	mov	r1, r3
 8006846:	4812      	ldr	r0, [pc, #72]	; (8006890 <HAL_HCD_MspInit+0xa4>)
 8006848:	f7fa f9ee 	bl	8000c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <HAL_HCD_MspInit+0xa0>)
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	4a0e      	ldr	r2, [pc, #56]	; (800688c <HAL_HCD_MspInit+0xa0>)
 8006852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006856:	6353      	str	r3, [r2, #52]	; 0x34
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_HCD_MspInit+0xa0>)
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_HCD_MspInit+0xa0>)
 8006862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006866:	6453      	str	r3, [r2, #68]	; 0x44
 8006868:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_HCD_MspInit+0xa0>)
 800686a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006874:	2200      	movs	r2, #0
 8006876:	2100      	movs	r1, #0
 8006878:	2043      	movs	r0, #67	; 0x43
 800687a:	f7fa f99e 	bl	8000bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800687e:	2043      	movs	r0, #67	; 0x43
 8006880:	f7fa f9b7 	bl	8000bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006884:	bf00      	nop
 8006886:	3728      	adds	r7, #40	; 0x28
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	40020000 	.word	0x40020000

08006894 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fda3 	bl	80053ee <USBH_LL_IncTimer>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fddb 	bl	800547a <USBH_LL_Connect>
}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fde4 	bl	80054a8 <USBH_LL_Disconnect>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
 80068f4:	4613      	mov	r3, r2
 80068f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fd95 	bl	8005442 <USBH_LL_PortEnabled>
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fd95 	bl	800545e <USBH_LL_PortDisabled>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12a      	bne.n	80069a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <USBH_LL_Init+0x74>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a15      	ldr	r2, [pc, #84]	; (80069b0 <USBH_LL_Init+0x74>)
 800695a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <USBH_LL_Init+0x74>)
 8006960:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006964:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <USBH_LL_Init+0x74>)
 8006968:	2208      	movs	r2, #8
 800696a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800696c:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <USBH_LL_Init+0x74>)
 800696e:	2201      	movs	r2, #1
 8006970:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <USBH_LL_Init+0x74>)
 8006974:	2200      	movs	r2, #0
 8006976:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <USBH_LL_Init+0x74>)
 800697a:	2202      	movs	r2, #2
 800697c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800697e:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <USBH_LL_Init+0x74>)
 8006980:	2201      	movs	r2, #1
 8006982:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006984:	480a      	ldr	r0, [pc, #40]	; (80069b0 <USBH_LL_Init+0x74>)
 8006986:	f7fa fb04 	bl	8000f92 <HAL_HCD_Init>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006990:	f7f9 fe84 	bl	800069c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006994:	4806      	ldr	r0, [pc, #24]	; (80069b0 <USBH_LL_Init+0x74>)
 8006996:	f7fa fee1 	bl	800175c <HAL_HCD_GetCurrentFrame>
 800699a:	4603      	mov	r3, r0
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fe fd16 	bl	80053d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000500 	.word	0x20000500

080069b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fa fe50 	bl	8001670 <HAL_HCD_Start>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f952 	bl	8006c80 <USBH_Get_USB_Status>
 80069dc:	4603      	mov	r3, r0
 80069de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fa fe58 	bl	80016b6 <HAL_HCD_Stop>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f937 	bl	8006c80 <USBH_Get_USB_Status>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fa fea0 	bl	8001778 <HAL_HCD_GetCurrentSpeed>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d00c      	beq.n	8006a58 <USBH_LL_GetSpeed+0x38>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d80d      	bhi.n	8006a5e <USBH_LL_GetSpeed+0x3e>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <USBH_LL_GetSpeed+0x2c>
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d003      	beq.n	8006a52 <USBH_LL_GetSpeed+0x32>
 8006a4a:	e008      	b.n	8006a5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a50:	e008      	b.n	8006a64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
    break;
 8006a56:	e005      	b.n	8006a64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a5c:	e002      	b.n	8006a64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	73fb      	strb	r3, [r7, #15]
    break;
 8006a62:	bf00      	nop
  }
  return  speed;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fa fe33 	bl	80016f0 <HAL_HCD_ResetPort>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f8f5 	bl	8006c80 <USBH_Get_USB_Status>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fa fe3a 	bl	8001734 <HAL_HCD_HC_GetXferCount>
 8006ac0:	4603      	mov	r3, r0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006aca:	b590      	push	{r4, r7, lr}
 8006acc:	b089      	sub	sp, #36	; 0x24
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4603      	mov	r3, r0
 8006ada:	70fb      	strb	r3, [r7, #3]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70bb      	strb	r3, [r7, #2]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006af2:	787c      	ldrb	r4, [r7, #1]
 8006af4:	78ba      	ldrb	r2, [r7, #2]
 8006af6:	78f9      	ldrb	r1, [r7, #3]
 8006af8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4623      	mov	r3, r4
 8006b0a:	f7fa faa4 	bl	8001056 <HAL_HCD_HC_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 f8b3 	bl	8006c80 <USBH_Get_USB_Status>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}

08006b28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b42:	78fa      	ldrb	r2, [r7, #3]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fa fb14 	bl	8001174 <HAL_HCD_HC_Halt>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 f894 	bl	8006c80 <USBH_Get_USB_Status>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b66:	b590      	push	{r4, r7, lr}
 8006b68:	b089      	sub	sp, #36	; 0x24
 8006b6a:	af04      	add	r7, sp, #16
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	461a      	mov	r2, r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	70fb      	strb	r3, [r7, #3]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70bb      	strb	r3, [r7, #2]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b8e:	787c      	ldrb	r4, [r7, #1]
 8006b90:	78ba      	ldrb	r2, [r7, #2]
 8006b92:	78f9      	ldrb	r1, [r7, #3]
 8006b94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b98:	9303      	str	r3, [sp, #12]
 8006b9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b9c:	9302      	str	r3, [sp, #8]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4623      	mov	r3, r4
 8006baa:	f7fa fb07 	bl	80011bc <HAL_HCD_HC_SubmitRequest>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f863 	bl	8006c80 <USBH_Get_USB_Status>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd90      	pop	{r4, r7, pc}

08006bc8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fa fd94 	bl	800170c <HAL_HCD_HC_GetURBState>
 8006be4:	4603      	mov	r3, r0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8006bfa:	20c8      	movs	r0, #200	; 0xc8
 8006bfc:	f7f9 fede 	bl	80009bc <HAL_Delay>
  return USBH_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
 8006c16:	4613      	mov	r3, r2
 8006c18:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006c20:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	212c      	movs	r1, #44	; 0x2c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	333b      	adds	r3, #59	; 0x3b
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	212c      	movs	r1, #44	; 0x2c
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	4413      	add	r3, r2
 8006c42:	3354      	adds	r3, #84	; 0x54
 8006c44:	78ba      	ldrb	r2, [r7, #2]
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e008      	b.n	8006c5c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	212c      	movs	r1, #44	; 0x2c
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	3355      	adds	r3, #85	; 0x55
 8006c58:	78ba      	ldrb	r2, [r7, #2]
 8006c5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7f9 fea2 	bl	80009bc <HAL_Delay>
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d817      	bhi.n	8006cc4 <USBH_Get_USB_Status+0x44>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_Get_USB_Status+0x1c>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cb3 	.word	0x08006cb3
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cbf 	.word	0x08006cbf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	e00b      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb6:	e008      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
    break;
 8006cbc:	e005      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc2:	e002      	b.n	8006cca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc8:	bf00      	nop
  }
  return usb_status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	2000002c 	.word	0x2000002c

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4d0d      	ldr	r5, [pc, #52]	; (8006d1c <__libc_init_array+0x38>)
 8006ce8:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	4d0b      	ldr	r5, [pc, #44]	; (8006d24 <__libc_init_array+0x40>)
 8006cf6:	4c0c      	ldr	r4, [pc, #48]	; (8006d28 <__libc_init_array+0x44>)
 8006cf8:	f000 f8f8 	bl	8006eec <_init>
 8006cfc:	1b64      	subs	r4, r4, r5
 8006cfe:	10a4      	asrs	r4, r4, #2
 8006d00:	2600      	movs	r6, #0
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08006f54 	.word	0x08006f54
 8006d20:	08006f54 	.word	0x08006f54
 8006d24:	08006f54 	.word	0x08006f54
 8006d28:	08006f58 	.word	0x08006f58

08006d2c <malloc>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <malloc+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f000 b863 	b.w	8006dfc <_malloc_r>
 8006d36:	bf00      	nop
 8006d38:	2000002c 	.word	0x2000002c

08006d3c <free>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <free+0xc>)
 8006d3e:	4601      	mov	r1, r0
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f000 b80b 	b.w	8006d5c <_free_r>
 8006d46:	bf00      	nop
 8006d48:	2000002c 	.word	0x2000002c

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <_free_r>:
 8006d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d048      	beq.n	8006df4 <_free_r+0x98>
 8006d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d66:	9001      	str	r0, [sp, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d6e:	bfb8      	it	lt
 8006d70:	18e4      	addlt	r4, r4, r3
 8006d72:	f000 f8ad 	bl	8006ed0 <__malloc_lock>
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <_free_r+0x9c>)
 8006d78:	9801      	ldr	r0, [sp, #4]
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	4615      	mov	r5, r2
 8006d7e:	b933      	cbnz	r3, 8006d8e <_free_r+0x32>
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6014      	str	r4, [r2, #0]
 8006d84:	b003      	add	sp, #12
 8006d86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d8a:	f000 b8a7 	b.w	8006edc <__malloc_unlock>
 8006d8e:	42a3      	cmp	r3, r4
 8006d90:	d90b      	bls.n	8006daa <_free_r+0x4e>
 8006d92:	6821      	ldr	r1, [r4, #0]
 8006d94:	1862      	adds	r2, r4, r1
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bf04      	itt	eq
 8006d9a:	681a      	ldreq	r2, [r3, #0]
 8006d9c:	685b      	ldreq	r3, [r3, #4]
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	bf04      	itt	eq
 8006da2:	1852      	addeq	r2, r2, r1
 8006da4:	6022      	streq	r2, [r4, #0]
 8006da6:	602c      	str	r4, [r5, #0]
 8006da8:	e7ec      	b.n	8006d84 <_free_r+0x28>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x58>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x4e>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1855      	adds	r5, r2, r1
 8006db8:	42a5      	cmp	r5, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x78>
 8006dbc:	6824      	ldr	r4, [r4, #0]
 8006dbe:	4421      	add	r1, r4
 8006dc0:	1854      	adds	r4, r2, r1
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1dd      	bne.n	8006d84 <_free_r+0x28>
 8006dc8:	681c      	ldr	r4, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	4421      	add	r1, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	e7d7      	b.n	8006d84 <_free_r+0x28>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x80>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	e7d3      	b.n	8006d84 <_free_r+0x28>
 8006ddc:	6825      	ldr	r5, [r4, #0]
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf04      	itt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	bf04      	itt	eq
 8006dec:	1949      	addeq	r1, r1, r5
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	6054      	str	r4, [r2, #4]
 8006df2:	e7c7      	b.n	8006d84 <_free_r+0x28>
 8006df4:	b003      	add	sp, #12
 8006df6:	bd30      	pop	{r4, r5, pc}
 8006df8:	200000b4 	.word	0x200000b4

08006dfc <_malloc_r>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	1ccd      	adds	r5, r1, #3
 8006e00:	f025 0503 	bic.w	r5, r5, #3
 8006e04:	3508      	adds	r5, #8
 8006e06:	2d0c      	cmp	r5, #12
 8006e08:	bf38      	it	cc
 8006e0a:	250c      	movcc	r5, #12
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	4606      	mov	r6, r0
 8006e10:	db01      	blt.n	8006e16 <_malloc_r+0x1a>
 8006e12:	42a9      	cmp	r1, r5
 8006e14:	d903      	bls.n	8006e1e <_malloc_r+0x22>
 8006e16:	230c      	movs	r3, #12
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1e:	f000 f857 	bl	8006ed0 <__malloc_lock>
 8006e22:	4921      	ldr	r1, [pc, #132]	; (8006ea8 <_malloc_r+0xac>)
 8006e24:	680a      	ldr	r2, [r1, #0]
 8006e26:	4614      	mov	r4, r2
 8006e28:	b99c      	cbnz	r4, 8006e52 <_malloc_r+0x56>
 8006e2a:	4f20      	ldr	r7, [pc, #128]	; (8006eac <_malloc_r+0xb0>)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	b923      	cbnz	r3, 8006e3a <_malloc_r+0x3e>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 f83c 	bl	8006eb0 <_sbrk_r>
 8006e38:	6038      	str	r0, [r7, #0]
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 f837 	bl	8006eb0 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d123      	bne.n	8006e8e <_malloc_r+0x92>
 8006e46:	230c      	movs	r3, #12
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f000 f846 	bl	8006edc <__malloc_unlock>
 8006e50:	e7e3      	b.n	8006e1a <_malloc_r+0x1e>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	1b5b      	subs	r3, r3, r5
 8006e56:	d417      	bmi.n	8006e88 <_malloc_r+0x8c>
 8006e58:	2b0b      	cmp	r3, #11
 8006e5a:	d903      	bls.n	8006e64 <_malloc_r+0x68>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	441c      	add	r4, r3
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	e004      	b.n	8006e6e <_malloc_r+0x72>
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	42a2      	cmp	r2, r4
 8006e68:	bf0c      	ite	eq
 8006e6a:	600b      	streq	r3, [r1, #0]
 8006e6c:	6053      	strne	r3, [r2, #4]
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f834 	bl	8006edc <__malloc_unlock>
 8006e74:	f104 000b 	add.w	r0, r4, #11
 8006e78:	1d23      	adds	r3, r4, #4
 8006e7a:	f020 0007 	bic.w	r0, r0, #7
 8006e7e:	1ac2      	subs	r2, r0, r3
 8006e80:	d0cc      	beq.n	8006e1c <_malloc_r+0x20>
 8006e82:	1a1b      	subs	r3, r3, r0
 8006e84:	50a3      	str	r3, [r4, r2]
 8006e86:	e7c9      	b.n	8006e1c <_malloc_r+0x20>
 8006e88:	4622      	mov	r2, r4
 8006e8a:	6864      	ldr	r4, [r4, #4]
 8006e8c:	e7cc      	b.n	8006e28 <_malloc_r+0x2c>
 8006e8e:	1cc4      	adds	r4, r0, #3
 8006e90:	f024 0403 	bic.w	r4, r4, #3
 8006e94:	42a0      	cmp	r0, r4
 8006e96:	d0e3      	beq.n	8006e60 <_malloc_r+0x64>
 8006e98:	1a21      	subs	r1, r4, r0
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 f808 	bl	8006eb0 <_sbrk_r>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d1dd      	bne.n	8006e60 <_malloc_r+0x64>
 8006ea4:	e7cf      	b.n	8006e46 <_malloc_r+0x4a>
 8006ea6:	bf00      	nop
 8006ea8:	200000b4 	.word	0x200000b4
 8006eac:	200000b8 	.word	0x200000b8

08006eb0 <_sbrk_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4d06      	ldr	r5, [pc, #24]	; (8006ecc <_sbrk_r+0x1c>)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	f7f9 fc9a 	bl	80007f4 <_sbrk>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_sbrk_r+0x1a>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_sbrk_r+0x1a>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000804 	.word	0x20000804

08006ed0 <__malloc_lock>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__malloc_lock+0x8>)
 8006ed2:	f000 b809 	b.w	8006ee8 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	2000080c 	.word	0x2000080c

08006edc <__malloc_unlock>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__malloc_unlock+0x8>)
 8006ede:	f000 b804 	b.w	8006eea <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	2000080c 	.word	0x2000080c

08006ee8 <__retarget_lock_acquire_recursive>:
 8006ee8:	4770      	bx	lr

08006eea <__retarget_lock_release_recursive>:
 8006eea:	4770      	bx	lr

08006eec <_init>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr

08006ef8 <_fini>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr
