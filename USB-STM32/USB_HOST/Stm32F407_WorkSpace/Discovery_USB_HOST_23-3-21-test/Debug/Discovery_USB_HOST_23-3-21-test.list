
Discovery_USB_HOST_23-3-21-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ee0  08007ee0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee8  08007ee8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  20000090  08007f80  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fa4  08007f80  00020fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4cf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e78  00000000  00000000  0003c58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000411e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b4  00000000  00000000  00041e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a8d  00000000  00000000  000664f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8acf  00000000  00000000  00078f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141a50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a34  00000000  00000000  00141aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d08 	.word	0x08007d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007d08 	.word	0x08007d08

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
  * @brief  The application entry point.
  * @retval int
  */
#define SIZE_BUFF 5000
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	f5ad 5d9c 	sub.w	sp, sp, #4992	; 0x1380
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	 uint8_t buff[SIZE_BUFF];
	 int max;
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa0f 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f81f 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8b3 	bl	8000660 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004fa:	f006 ffe5 	bl	80074c8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_115200);
 80004fe:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000502:	f000 f881 	bl	8000608 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x48>)
 800050e:	f000 fd65 	bl	8000fdc <HAL_GPIO_WritePin>
//  HAL_Delay(5000);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x48>)
 800051a:	f000 fd5f 	bl	8000fdc <HAL_GPIO_WritePin>

  USBH_HID_KeybdInit(&hUsbHostFS);
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x4c>)
 8000520:	f004 fdec 	bl	80050fc <USBH_HID_KeybdInit>
//  }

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000524:	f006 fff6 	bl	8007514 <MX_USB_HOST_Process>
 8000528:	e7fc      	b.n	8000524 <main+0x40>
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000
 8000530:	200008f8 	.word	0x200008f8

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 faea 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	; 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fa1b 	bl	80029f4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f874 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc74 	bl	8002ed4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f85d 	bl	80006b0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000630:	220c      	movs	r2, #12
 8000632:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_USART2_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x50>)
 8000642:	f002 fe43 	bl	80032cc <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800064c:	f000 f830 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c4 	.word	0x200000c4
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_GPIO_Init+0x4c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x4c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x4c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <HAL_UART_MspInit+0x94>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d133      	bne.n	800079a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <HAL_UART_MspInit+0x98>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_UART_MspInit+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077a:	2307      	movs	r3, #7
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_UART_MspInit+0x9c>)
 8000786:	f000 fa8d 	bl	8000ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	2026      	movs	r0, #38	; 0x26
 8000790:	f000 fa2f 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000794:	2026      	movs	r0, #38	; 0x26
 8000796:	f000 fa48 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  MX_USB_HOST_Process();
 80007c2:	f006 fea7 	bl	8007514 <MX_USB_HOST_Process>
  {
 80007c6:	e7fc      	b.n	80007c2 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f8d4 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <OTG_FS_IRQHandler+0x10>)
 8000816:	f000 fe89 	bl	800152c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000cd0 	.word	0x20000cd0

08000824 <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */
extern UART_HandleTypeDef huart2;

void USART2_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

HAL_UART_IRQHandler(&huart2);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <USART2_IRQHandler+0x10>)
 800082a:	f002 fedb 	bl	80035e4 <HAL_UART_IRQHandler>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c4 	.word	0x200000c4

08000838 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <_sbrk+0x50>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x16>
		heap_end = &end;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <_sbrk+0x50>)
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <_sbrk+0x54>)
 800084c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <_sbrk+0x50>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <_sbrk+0x50>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	466a      	mov	r2, sp
 800085e:	4293      	cmp	r3, r2
 8000860:	d907      	bls.n	8000872 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000862:	f007 f921 	bl	8007aa8 <__errno>
 8000866:	4603      	mov	r3, r0
 8000868:	220c      	movs	r2, #12
 800086a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	e006      	b.n	8000880 <_sbrk+0x48>
	}

	heap_end += incr;
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <_sbrk+0x50>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <_sbrk+0x50>)
 800087c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000ac 	.word	0x200000ac
 800088c:	20000fa8 	.word	0x20000fa8

08000890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <SystemInit+0x28>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <SystemInit+0x28>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SystemInit+0x28>)
 80008a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008aa:	609a      	str	r2, [r3, #8]
#endif
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008c2:	e003      	b.n	80008cc <LoopCopyDataInit>

080008c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ca:	3104      	adds	r1, #4

080008cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008d4:	d3f6      	bcc.n	80008c4 <CopyDataInit>
  ldr  r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008d8:	e002      	b.n	80008e0 <LoopFillZerobss>

080008da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008dc:	f842 3b04 	str.w	r3, [r2], #4

080008e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008e4:	d3f9      	bcc.n	80008da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008e6:	f7ff ffd3 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f007 f8e3 	bl	8007ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fdf9 	bl	80004e4 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008f8:	08007ef0 	.word	0x08007ef0
  ldr  r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000900:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000904:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000908:	20000fa4 	.word	0x20000fa4

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_Init+0x40>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_Init+0x40>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x40>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f94f 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff febc 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f967 	bl	8000c46 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f92f 	bl	8000bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000104 	.word	0x20000104

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000104 	.word	0x20000104

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffde 	bl	80009dc <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f7ff ff8e 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff29 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff3e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff8e 	bl	8000b30 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff31 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa2 	bl	8000b98 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d004      	beq.n	8000c7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e00c      	b.n	8000c96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2205      	movs	r2, #5
 8000c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e16b      	b.n	8000f98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	f040 815a 	bne.w	8000f92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d00b      	beq.n	8000cfe <HAL_GPIO_Init+0x5a>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d007      	beq.n	8000cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf2:	2b11      	cmp	r3, #17
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0xfc>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b12      	cmp	r3, #18
 8000d9e:	d123      	bne.n	8000de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3208      	adds	r2, #8
 8000de2:	69b9      	ldr	r1, [r7, #24]
 8000de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0203 	and.w	r2, r3, #3
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80b4 	beq.w	8000f92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <HAL_GPIO_Init+0x30c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a5f      	ldr	r2, [pc, #380]	; (8000fb0 <HAL_GPIO_Init+0x30c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_GPIO_Init+0x30c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e46:	4a5b      	ldr	r2, [pc, #364]	; (8000fb4 <HAL_GPIO_Init+0x310>)
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <HAL_GPIO_Init+0x314>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d02b      	beq.n	8000eca <HAL_GPIO_Init+0x226>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a51      	ldr	r2, [pc, #324]	; (8000fbc <HAL_GPIO_Init+0x318>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d025      	beq.n	8000ec6 <HAL_GPIO_Init+0x222>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a50      	ldr	r2, [pc, #320]	; (8000fc0 <HAL_GPIO_Init+0x31c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d01f      	beq.n	8000ec2 <HAL_GPIO_Init+0x21e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <HAL_GPIO_Init+0x320>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d019      	beq.n	8000ebe <HAL_GPIO_Init+0x21a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	; (8000fc8 <HAL_GPIO_Init+0x324>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0x216>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4d      	ldr	r2, [pc, #308]	; (8000fcc <HAL_GPIO_Init+0x328>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d00d      	beq.n	8000eb6 <HAL_GPIO_Init+0x212>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <HAL_GPIO_Init+0x32c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x20e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <HAL_GPIO_Init+0x330>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_GPIO_Init+0x20a>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00e      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e00c      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e00a      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x228>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x310>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0e:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <HAL_GPIO_Init+0x334>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f ae90 	bls.w	8000cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40021c00 	.word	0x40021c00
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800100e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001010:	b08f      	sub	sp, #60	; 0x3c
 8001012:	af0a      	add	r7, sp, #40	; 0x28
 8001014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e054      	b.n	80010ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f006 faa2 	bl	8007584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2203      	movs	r2, #3
 8001044:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f003 f958 	bl	8004314 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	687e      	ldr	r6, [r7, #4]
 800106c:	466d      	mov	r5, sp
 800106e:	f106 0410 	add.w	r4, r6, #16
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800107e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001082:	1d33      	adds	r3, r6, #4
 8001084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f003 f8d2 	bl	8004230 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f003 f94f 	bl	8004336 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	687e      	ldr	r6, [r7, #4]
 80010a0:	466d      	mov	r5, sp
 80010a2:	f106 0410 	add.w	r4, r6, #16
 80010a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010b6:	1d33      	adds	r3, r6, #4
 80010b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f003 fa62 	bl	8004584 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b089      	sub	sp, #36	; 0x24
 80010d6:	af04      	add	r7, sp, #16
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	4608      	mov	r0, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	461a      	mov	r2, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70bb      	strb	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_HCD_HC_Init+0x28>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e07f      	b.n	80011fa <HAL_HCD_HC_Init+0x128>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	333d      	adds	r3, #61	; 0x3d
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001116:	78fa      	ldrb	r2, [r7, #3]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3338      	adds	r3, #56	; 0x38
 8001126:	787a      	ldrb	r2, [r7, #1]
 8001128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800112a:	78fa      	ldrb	r2, [r7, #3]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3340      	adds	r3, #64	; 0x40
 800113a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800113c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800113e:	78fa      	ldrb	r2, [r7, #3]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3339      	adds	r3, #57	; 0x39
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	333f      	adds	r3, #63	; 0x3f
 8001162:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	78bb      	ldrb	r3, [r7, #2]
 800116c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	333a      	adds	r3, #58	; 0x3a
 8001180:	4602      	mov	r2, r0
 8001182:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001188:	2b00      	cmp	r3, #0
 800118a:	da0a      	bge.n	80011a2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800118c:	78fa      	ldrb	r2, [r7, #3]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	333b      	adds	r3, #59	; 0x3b
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e009      	b.n	80011b6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80011a2:	78fa      	ldrb	r2, [r7, #3]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	333b      	adds	r3, #59	; 0x3b
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	333c      	adds	r3, #60	; 0x3c
 80011c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	787c      	ldrb	r4, [r7, #1]
 80011d2:	78ba      	ldrb	r2, [r7, #2]
 80011d4:	78f9      	ldrb	r1, [r7, #3]
 80011d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4623      	mov	r3, r4
 80011e8:	f003 fb4e 	bl	8004888 <USB_HC_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}

08001202 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_HCD_HC_Halt+0x1e>
 800121c:	2302      	movs	r3, #2
 800121e:	e00f      	b.n	8001240 <HAL_HCD_HC_Halt+0x3e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	78fa      	ldrb	r2, [r7, #3]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fd86 	bl	8004d42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	70fb      	strb	r3, [r7, #3]
 800125a:	460b      	mov	r3, r1
 800125c:	70bb      	strb	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001262:	78fa      	ldrb	r2, [r7, #3]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	333b      	adds	r3, #59	; 0x3b
 8001272:	78ba      	ldrb	r2, [r7, #2]
 8001274:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	333f      	adds	r3, #63	; 0x3f
 8001286:	787a      	ldrb	r2, [r7, #1]
 8001288:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800128a:	7c3b      	ldrb	r3, [r7, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d114      	bne.n	80012ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	3342      	adds	r3, #66	; 0x42
 80012a0:	2203      	movs	r2, #3
 80012a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80012a4:	78fa      	ldrb	r2, [r7, #3]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	333d      	adds	r3, #61	; 0x3d
 80012b4:	7f3a      	ldrb	r2, [r7, #28]
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e009      	b.n	80012ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	3342      	adds	r3, #66	; 0x42
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80012ce:	787b      	ldrb	r3, [r7, #1]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	f200 80d6 	bhi.w	8001482 <HAL_HCD_HC_SubmitRequest+0x23a>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	0800146d 	.word	0x0800146d
 80012e4:	08001359 	.word	0x08001359
 80012e8:	080013e3 	.word	0x080013e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80012ec:	7c3b      	ldrb	r3, [r7, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	f040 80c9 	bne.w	8001486 <HAL_HCD_HC_SubmitRequest+0x23e>
 80012f4:	78bb      	ldrb	r3, [r7, #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80c5 	bne.w	8001486 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80012fc:	8b3b      	ldrh	r3, [r7, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3351      	adds	r3, #81	; 0x51
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	3351      	adds	r3, #81	; 0x51
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	3342      	adds	r3, #66	; 0x42
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001340:	e0a1      	b.n	8001486 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001342:	78fa      	ldrb	r2, [r7, #3]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	440b      	add	r3, r1
 8001350:	3342      	adds	r3, #66	; 0x42
 8001352:	2202      	movs	r2, #2
 8001354:	701a      	strb	r2, [r3, #0]
      break;
 8001356:	e096      	b.n	8001486 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001358:	78bb      	ldrb	r3, [r7, #2]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d120      	bne.n	80013a0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	3351      	adds	r3, #81	; 0x51
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10a      	bne.n	800138a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	3342      	adds	r3, #66	; 0x42
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001388:	e07e      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800138a:	78fa      	ldrb	r2, [r7, #3]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3342      	adds	r3, #66	; 0x42
 800139a:	2202      	movs	r2, #2
 800139c:	701a      	strb	r2, [r3, #0]
      break;
 800139e:	e073      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3350      	adds	r3, #80	; 0x50
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10a      	bne.n	80013cc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3342      	adds	r3, #66	; 0x42
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
      break;
 80013ca:	e05d      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013cc:	78fa      	ldrb	r2, [r7, #3]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3342      	adds	r3, #66	; 0x42
 80013dc:	2202      	movs	r2, #2
 80013de:	701a      	strb	r2, [r3, #0]
      break;
 80013e0:	e052      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d120      	bne.n	800142a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3351      	adds	r3, #81	; 0x51
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10a      	bne.n	8001414 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	3342      	adds	r3, #66	; 0x42
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001412:	e039      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3342      	adds	r3, #66	; 0x42
 8001424:	2202      	movs	r2, #2
 8001426:	701a      	strb	r2, [r3, #0]
      break;
 8001428:	e02e      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3350      	adds	r3, #80	; 0x50
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10a      	bne.n	8001456 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3342      	adds	r3, #66	; 0x42
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
      break;
 8001454:	e018      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	3342      	adds	r3, #66	; 0x42
 8001466:	2202      	movs	r2, #2
 8001468:	701a      	strb	r2, [r3, #0]
      break;
 800146a:	e00d      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3342      	adds	r3, #66	; 0x42
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
      break;
 8001480:	e002      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001482:	bf00      	nop
 8001484:	e000      	b.n	8001488 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001486:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001488:	78fa      	ldrb	r2, [r7, #3]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3344      	adds	r3, #68	; 0x44
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	8b39      	ldrh	r1, [r7, #24]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4403      	add	r3, r0
 80014ac:	3348      	adds	r3, #72	; 0x48
 80014ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	335c      	adds	r3, #92	; 0x5c
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	334c      	adds	r3, #76	; 0x4c
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3339      	adds	r3, #57	; 0x39
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	335d      	adds	r3, #93	; 0x5d
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	3338      	adds	r3, #56	; 0x38
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	f003 fabe 	bl	8004a9c <USB_HC_StartXfer>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop

0800152c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 ffdb 	bl	80044fe <USB_GetMode>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	f040 80ef 	bne.w	800172e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 ffbf 	bl	80044d8 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80e5 	beq.w	800172c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f002 ffb6 	bl	80044d8 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001576:	d104      	bne.n	8001582 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f002 ffa6 	bl	80044d8 <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001596:	d104      	bne.n	80015a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 ff96 	bl	80044d8 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015b6:	d104      	bne.n	80015c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 ff86 	bl	80044d8 <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d103      	bne.n	80015de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 ff78 	bl	80044d8 <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015f2:	d115      	bne.n	8001620 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015fc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 f828 	bl	8007664 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f003 f86e 	bl	80046fc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f002 ff57 	bl	80044d8 <USB_ReadInterrupts>
 800162a:	4603      	mov	r3, r0
 800162c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d102      	bne.n	800163c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f001 f968 	bl	800290c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 ff49 	bl	80044d8 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d106      	bne.n	800165e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f005 ffeb 	bl	800762c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2208      	movs	r2, #8
 800165c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 ff38 	bl	80044d8 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001672:	d138      	bne.n	80016e6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fb51 	bl	8004d20 <USB_HC_ReadInterrupt>
 800167e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e025      	b.n	80016d2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d018      	beq.n	80016cc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016b0:	d106      	bne.n	80016c0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8cf 	bl	800185c <HCD_HC_IN_IRQHandler>
 80016be:	e005      	b.n	80016cc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fcfd 	bl	80020c6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3d4      	bcc.n	8001686 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fef4 	bl	80044d8 <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d101      	bne.n	80016fe <HAL_HCD_IRQHandler+0x1d2>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_HCD_IRQHandler+0x1d4>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d014      	beq.n	800172e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0210 	bic.w	r2, r2, #16
 8001712:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f001 f84b 	bl	80027b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0210 	orr.w	r2, r2, #16
 8001728:	619a      	str	r2, [r3, #24]
 800172a:	e000      	b.n	800172e <HAL_HCD_IRQHandler+0x202>
      return;
 800172c:	bf00      	nop
    }
  }
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_HCD_Start+0x16>
 8001746:	2302      	movs	r3, #2
 8001748:	e013      	b.n	8001772 <HAL_HCD_Start+0x3e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fdcb 	bl	80042f2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	4618      	mov	r0, r3
 8001764:	f003 f82e 	bl	80047c4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_HCD_Stop+0x16>
 800178c:	2302      	movs	r3, #2
 800178e:	e00d      	b.n	80017ac <HAL_HCD_Stop+0x32>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fc0b 	bl	8004fb8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 ffd5 	bl	8004770 <USB_ResetPort>
 80017c6:	4603      	mov	r3, r0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	335c      	adds	r3, #92	; 0x5c
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	334c      	adds	r3, #76	; 0x4c
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f817 	bl	8004864 <USB_GetCurrentFrame>
 8001836:	4603      	mov	r3, r0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fff2 	bl	8004836 <USB_GetHostSpeed>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4413      	add	r3, r2
 800187e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b04      	cmp	r3, #4
 800188a:	d119      	bne.n	80018c0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4413      	add	r3, r2
 8001894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001898:	461a      	mov	r2, r3
 800189a:	2304      	movs	r3, #4
 800189c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	0151      	lsls	r1, r2, #5
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	440a      	add	r2, r1
 80018b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	60d3      	str	r3, [r2, #12]
 80018be:	e0ce      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d6:	d12c      	bne.n	8001932 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e4:	461a      	mov	r2, r3
 80018e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	335d      	adds	r3, #93	; 0x5d
 80018fc:	2207      	movs	r2, #7
 80018fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	0151      	lsls	r1, r2, #5
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	440a      	add	r2, r1
 8001916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fa09 	bl	8004d42 <USB_HC_Halt>
 8001930:	e095      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4413      	add	r3, r2
 800193a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d109      	bne.n	800195c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001954:	461a      	mov	r2, r3
 8001956:	2320      	movs	r3, #32
 8001958:	6093      	str	r3, [r2, #8]
 800195a:	e080      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4413      	add	r3, r2
 8001964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b08      	cmp	r3, #8
 8001970:	d134      	bne.n	80019dc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	0151      	lsls	r1, r2, #5
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	440a      	add	r2, r1
 8001988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	335d      	adds	r3, #93	; 0x5d
 80019a2:	2205      	movs	r2, #5
 80019a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b2:	461a      	mov	r2, r3
 80019b4:	2310      	movs	r3, #16
 80019b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c4:	461a      	mov	r2, r3
 80019c6:	2308      	movs	r3, #8
 80019c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 f9b4 	bl	8004d42 <USB_HC_Halt>
 80019da:	e040      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f2:	d134      	bne.n	8001a5e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	0151      	lsls	r1, r2, #5
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	440a      	add	r2, r1
 8001a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 f98f 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a30:	461a      	mov	r2, r3
 8001a32:	2310      	movs	r3, #16
 8001a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	335d      	adds	r3, #93	; 0x5d
 8001a46:	2208      	movs	r2, #8
 8001a48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	461a      	mov	r2, r3
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a74:	d122      	bne.n	8001abc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	0151      	lsls	r1, r2, #5
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	440a      	add	r2, r1
 8001a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 f94e 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001aba:	e300      	b.n	80020be <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80fd 	bne.w	8001cce <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3348      	adds	r3, #72	; 0x48
 8001aec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0159      	lsls	r1, r3, #5
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	440b      	add	r3, r1
 8001af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001b00:	1ad1      	subs	r1, r2, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4403      	add	r3, r0
 8001b10:	334c      	adds	r3, #76	; 0x4c
 8001b12:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	335d      	adds	r3, #93	; 0x5d
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3358      	adds	r3, #88	; 0x58
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	333f      	adds	r3, #63	; 0x3f
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	333f      	adds	r3, #63	; 0x3f
 8001b74:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d121      	bne.n	8001bbe <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	015a      	lsls	r2, r3, #5
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	0151      	lsls	r1, r2, #5
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	440a      	add	r2, r1
 8001b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 f8cc 	bl	8004d42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2310      	movs	r3, #16
 8001bba:	6093      	str	r3, [r2, #8]
 8001bbc:	e070      	b.n	8001ca0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333f      	adds	r3, #63	; 0x3f
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d12a      	bne.n	8001c2a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bf2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	335c      	adds	r3, #92	; 0x5c
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	335c      	adds	r3, #92	; 0x5c
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4601      	mov	r1, r0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f005 fd2c 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c28:	e03a      	b.n	8001ca0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	333f      	adds	r3, #63	; 0x3f
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d12f      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	335c      	adds	r3, #92	; 0x5c
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	3350      	adds	r3, #80	; 0x50
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	f083 0301 	eor.w	r3, r3, #1
 8001c6a:	b2d8      	uxtb	r0, r3
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	3350      	adds	r3, #80	; 0x50
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	b2d8      	uxtb	r0, r3
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	335c      	adds	r3, #92	; 0x5c
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	4601      	mov	r1, r0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f005 fcf0 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3350      	adds	r3, #80	; 0x50
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2d8      	uxtb	r0, r3
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3350      	adds	r3, #80	; 0x50
 8001cc8:	4602      	mov	r2, r0
 8001cca:	701a      	strb	r2, [r3, #0]
}
 8001ccc:	e1f7      	b.n	80020be <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	f040 811a 	bne.w	8001f1a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	0151      	lsls	r1, r2, #5
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	440a      	add	r2, r1
 8001cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	335d      	adds	r3, #93	; 0x5d
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d10a      	bne.n	8001d32 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	335c      	adds	r3, #92	; 0x5c
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e0d9      	b.n	8001ee6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	335d      	adds	r3, #93	; 0x5d
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d10a      	bne.n	8001d5e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	335c      	adds	r3, #92	; 0x5c
 8001d58:	2205      	movs	r2, #5
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e0c3      	b.n	8001ee6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	335d      	adds	r3, #93	; 0x5d
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b06      	cmp	r3, #6
 8001d72:	d00a      	beq.n	8001d8a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	335d      	adds	r3, #93	; 0x5d
 8001d84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d156      	bne.n	8001e38 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	3358      	adds	r3, #88	; 0x58
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1c59      	adds	r1, r3, #1
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4403      	add	r3, r0
 8001dac:	3358      	adds	r3, #88	; 0x58
 8001dae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3358      	adds	r3, #88	; 0x58
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d914      	bls.n	8001df0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3358      	adds	r3, #88	; 0x58
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	335c      	adds	r3, #92	; 0x5c
 8001dea:	2204      	movs	r2, #4
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e009      	b.n	8001e04 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	335c      	adds	r3, #92	; 0x5c
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e056      	b.n	8001ee6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335d      	adds	r3, #93	; 0x5d
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d123      	bne.n	8001e96 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	335c      	adds	r3, #92	; 0x5c
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e78:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e80:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e027      	b.n	8001ee6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	335d      	adds	r3, #93	; 0x5d
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	d11c      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	3358      	adds	r3, #88	; 0x58
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4403      	add	r3, r0
 8001ece:	3358      	adds	r3, #88	; 0x58
 8001ed0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	335c      	adds	r3, #92	; 0x5c
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2d8      	uxtb	r0, r3
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	335c      	adds	r3, #92	; 0x5c
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4601      	mov	r1, r0
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f005 fbb4 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f18:	e0d1      	b.n	80020be <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d13e      	bne.n	8001fae <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	0151      	lsls	r1, r2, #5
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	440a      	add	r2, r1
 8001f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3358      	adds	r3, #88	; 0x58
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1c59      	adds	r1, r3, #1
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4403      	add	r3, r0
 8001f72:	3358      	adds	r3, #88	; 0x58
 8001f74:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	335d      	adds	r3, #93	; 0x5d
 8001f86:	2206      	movs	r2, #6
 8001f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fed4 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	6093      	str	r3, [r2, #8]
}
 8001fac:	e087      	b.n	80020be <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d17c      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333f      	adds	r3, #63	; 0x3f
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d122      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3358      	adds	r3, #88	; 0x58
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	0151      	lsls	r1, r2, #5
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	440a      	add	r2, r1
 8002004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fe92 	bl	8004d42 <USB_HC_Halt>
 800201e:	e045      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	333f      	adds	r3, #63	; 0x3f
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	333f      	adds	r3, #63	; 0x3f
 8002046:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002048:	2b02      	cmp	r3, #2
 800204a:	d12f      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3358      	adds	r3, #88	; 0x58
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d121      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	335d      	adds	r3, #93	; 0x5d
 8002078:	2203      	movs	r2, #3
 800207a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	0151      	lsls	r1, r2, #5
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	440a      	add	r2, r1
 8002092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fe4b 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	6093      	str	r3, [r2, #8]
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d119      	bne.n	800212a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2304      	movs	r3, #4
 8002106:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002128:	e33e      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b20      	cmp	r3, #32
 800213e:	d141      	bne.n	80021c4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	461a      	mov	r2, r3
 800214e:	2320      	movs	r3, #32
 8002150:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	333d      	adds	r3, #61	; 0x3d
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 831f 	bne.w	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	333d      	adds	r3, #61	; 0x3d
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	335c      	adds	r3, #92	; 0x5c
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	0151      	lsls	r1, r2, #5
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	440a      	add	r2, r1
 80021a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fdc0 	bl	8004d42 <USB_HC_Halt>
}
 80021c2:	e2f1      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d13f      	bne.n	800225a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	335d      	adds	r3, #93	; 0x5d
 80021ea:	2204      	movs	r2, #4
 80021ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	333d      	adds	r3, #61	; 0x3d
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3358      	adds	r3, #88	; 0x58
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	440a      	add	r2, r1
 800222c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fd7e 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	6093      	str	r3, [r2, #8]
}
 8002258:	e2a6      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d122      	bne.n	80022b8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	0151      	lsls	r1, r2, #5
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	440a      	add	r2, r1
 8002288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fd50 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	6093      	str	r3, [r2, #8]
}
 80022b6:	e277      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d135      	bne.n	800233a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3358      	adds	r3, #88	; 0x58
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	0151      	lsls	r1, r2, #5
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	440a      	add	r2, r1
 80022f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fd18 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	2301      	movs	r3, #1
 8002322:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	335d      	adds	r3, #93	; 0x5d
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
}
 8002338:	e236      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d12b      	bne.n	80023a8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2308      	movs	r3, #8
 8002360:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fcd8 	bl	8004d42 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	335d      	adds	r3, #93	; 0x5d
 80023a2:	2205      	movs	r2, #5
 80023a4:	701a      	strb	r2, [r3, #0]
}
 80023a6:	e1ff      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d155      	bne.n	800246a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	3358      	adds	r3, #88	; 0x58
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	335d      	adds	r3, #93	; 0x5d
 80023e2:	2203      	movs	r2, #3
 80023e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	333d      	adds	r3, #61	; 0x3d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	333c      	adds	r3, #60	; 0x3c
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	333d      	adds	r3, #61	; 0x3d
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	0151      	lsls	r1, r2, #5
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	440a      	add	r2, r1
 800243c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f002 fc76 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2310      	movs	r3, #16
 8002466:	6093      	str	r3, [r2, #8]
}
 8002468:	e19e      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b80      	cmp	r3, #128	; 0x80
 800247e:	d12b      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	0151      	lsls	r1, r2, #5
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	440a      	add	r2, r1
 8002496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fc49 	bl	8004d42 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	335d      	adds	r3, #93	; 0x5d
 80024c0:	2206      	movs	r2, #6
 80024c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	6093      	str	r3, [r2, #8]
}
 80024d6:	e167      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d135      	bne.n	800255c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fc11 	bl	8004d42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	461a      	mov	r2, r3
 800252e:	2310      	movs	r3, #16
 8002530:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	335d      	adds	r3, #93	; 0x5d
 8002556:	2208      	movs	r2, #8
 8002558:	701a      	strb	r2, [r3, #0]
}
 800255a:	e125      	b.n	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	f040 811a 	bne.w	80027a8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	0151      	lsls	r1, r2, #5
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	440a      	add	r2, r1
 800258a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258e:	f023 0302 	bic.w	r3, r3, #2
 8002592:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	335d      	adds	r3, #93	; 0x5d
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d137      	bne.n	800261a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	335c      	adds	r3, #92	; 0x5c
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	440b      	add	r3, r1
 80025cc:	333f      	adds	r3, #63	; 0x3f
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d00b      	beq.n	80025ec <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	440b      	add	r3, r1
 80025e2:	333f      	adds	r3, #63	; 0x3f
 80025e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	f040 80c5 	bne.w	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3351      	adds	r3, #81	; 0x51
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2d8      	uxtb	r0, r3
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3351      	adds	r3, #81	; 0x51
 8002614:	4602      	mov	r2, r0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e0ad      	b.n	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	335d      	adds	r3, #93	; 0x5d
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d10a      	bne.n	8002646 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e097      	b.n	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	335d      	adds	r3, #93	; 0x5d
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d10a      	bne.n	8002672 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	335c      	adds	r3, #92	; 0x5c
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e081      	b.n	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	335d      	adds	r3, #93	; 0x5d
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10a      	bne.n	800269e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2205      	movs	r2, #5
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e06b      	b.n	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	335d      	adds	r3, #93	; 0x5d
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d00a      	beq.n	80026ca <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	335d      	adds	r3, #93	; 0x5d
 80026c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d155      	bne.n	8002776 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3358      	adds	r3, #88	; 0x58
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4403      	add	r3, r0
 80026ec:	3358      	adds	r3, #88	; 0x58
 80026ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3358      	adds	r3, #88	; 0x58
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d914      	bls.n	8002730 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	3358      	adds	r3, #88	; 0x58
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	2204      	movs	r2, #4
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e009      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800275a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002762:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	2302      	movs	r3, #2
 8002786:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	b2d8      	uxtb	r0, r3
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	335c      	adds	r3, #92	; 0x5c
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4601      	mov	r1, r0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f004 ff6c 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	0c5b      	lsrs	r3, r3, #17
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d004      	beq.n	80027f6 <HCD_RXQLVL_IRQHandler+0x46>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	f000 8082 	beq.w	80028f8 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027f4:	e083      	b.n	80028fe <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d07f      	beq.n	80028fc <HCD_RXQLVL_IRQHandler+0x14c>
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3344      	adds	r3, #68	; 0x44
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d074      	beq.n	80028fc <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	3344      	adds	r3, #68	; 0x44
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	b292      	uxth	r2, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f001 fe2a 	bl	8004486 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	3344      	adds	r3, #68	; 0x44
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	18d1      	adds	r1, r2, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4403      	add	r3, r0
 8002856:	3344      	adds	r3, #68	; 0x44
 8002858:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	334c      	adds	r3, #76	; 0x4c
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	18d1      	adds	r1, r2, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4403      	add	r3, r0
 800287e:	334c      	adds	r3, #76	; 0x4c
 8002880:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HCD_RXQLVL_IRQHandler+0x158>)
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3350      	adds	r3, #80	; 0x50
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f083 0301 	eor.w	r3, r3, #1
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3350      	adds	r3, #80	; 0x50
 80028f2:	4602      	mov	r2, r0
 80028f4:	701a      	strb	r2, [r3, #0]
      break;
 80028f6:	e001      	b.n	80028fc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80028fc:	bf00      	nop
  }
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	1ff80000 	.word	0x1ff80000

0800290c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002938:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d10b      	bne.n	800295c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f004 fe7a 	bl	8007648 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d132      	bne.n	80029cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d126      	bne.n	80029c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d113      	bne.n	80029a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800298a:	d106      	bne.n	800299a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 feb2 	bl	80046fc <USB_InitFSLSPClkSel>
 8002998:	e011      	b.n	80029be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 feab 	bl	80046fc <USB_InitFSLSPClkSel>
 80029a6:	e00a      	b.n	80029be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b6:	461a      	mov	r2, r3
 80029b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f004 fe6c 	bl	800769c <HAL_HCD_PortEnabled_Callback>
 80029c4:	e002      	b.n	80029cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f004 fe76 	bl	80076b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d103      	bne.n	80029de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0320 	orr.w	r3, r3, #32
 80029dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6013      	str	r3, [r2, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e25b      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d075      	beq.n	8002afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a12:	4ba3      	ldr	r3, [pc, #652]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b99      	ldr	r3, [pc, #612]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e236      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x74>
 8002a5a:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a90      	ldr	r2, [pc, #576]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a8a      	ldr	r2, [pc, #552]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a87      	ldr	r2, [pc, #540]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a83      	ldr	r2, [pc, #524]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b81      	ldr	r3, [pc, #516]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fd ff96 	bl	80009dc <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fd ff92 	bl	80009dc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1fb      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fd ff82 	bl	80009dc <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fd ff7e 	bl	80009dc <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1e7      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b5f      	ldr	r3, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1bb      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4952      	ldr	r1, [pc, #328]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <HAL_RCC_OscConfig+0x2b0>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fd ff37 	bl	80009dc <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fd ff33 	bl	80009dc <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e19c      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4940      	ldr	r1, [pc, #256]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_OscConfig+0x2b0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fd ff16 	bl	80009dc <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fd ff12 	bl	80009dc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e17b      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d030      	beq.n	8002c40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <HAL_RCC_OscConfig+0x2b4>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fd fef6 	bl	80009dc <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fd fef2 	bl	80009dc <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e15b      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x200>
 8002c12:	e015      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_OscConfig+0x2b4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fd fedf 	bl	80009dc <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fd fedb 	bl	80009dc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e144      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a0 	beq.w	8002d8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_OscConfig+0x2b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d121      	bne.n	8002cce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <HAL_RCC_OscConfig+0x2b8>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fd fea1 	bl	80009dc <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e011      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2ce>
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470000 	.word	0x42470000
 8002ca8:	42470e80 	.word	0x42470e80
 8002cac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb0:	f7fd fe94 	bl	80009dc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0fd      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x2f0>
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a7c      	ldr	r2, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x32a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x312>
 8002cec:	4b77      	ldr	r3, [pc, #476]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a76      	ldr	r2, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	4b74      	ldr	r3, [pc, #464]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x32a>
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a70      	ldr	r2, [pc, #448]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a6d      	ldr	r2, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fd fe59 	bl	80009dc <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fd fe55 	bl	80009dc <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0bc      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x33a>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fd fe43 	bl	80009dc <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fe3f 	bl	80009dc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0a6      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a51      	ldr	r2, [pc, #324]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8092 	beq.w	8002ebc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d05c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d141      	bne.n	8002e30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <HAL_RCC_OscConfig+0x4dc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fd fe13 	bl	80009dc <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fd fe0f 	bl	80009dc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e078      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	019b      	lsls	r3, r3, #6
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	4933      	ldr	r1, [pc, #204]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <HAL_RCC_OscConfig+0x4dc>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fd fde8 	bl	80009dc <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fd fde4 	bl	80009dc <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04d      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x41c>
 8002e2e:	e045      	b.n	8002ebc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x4dc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fd fdd1 	bl	80009dc <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fd fdcd 	bl	80009dc <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x44a>
 8002e5c:	e02e      	b.n	8002ebc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e029      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_OscConfig+0x4d8>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d115      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470060 	.word	0x42470060

08002ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0cc      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b68      	ldr	r3, [pc, #416]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d90c      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d044      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e067      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4934      	ldr	r1, [pc, #208]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fd fd0a 	bl	80009dc <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fd fd06 	bl	80009dc <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e04f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20c      	bcs.n	800301c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fc6a 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	08007ec8 	.word	0x08007ec8
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	2300      	movs	r3, #0
 80030b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b8:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x40>
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	f200 80bd 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x3a>
 80030d2:	e0b7      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030d6:	60bb      	str	r3, [r7, #8]
       break;
 80030d8:	e0b7      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030da:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030dc:	60bb      	str	r3, [r7, #8]
      break;
 80030de:	e0b4      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e0:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04d      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	461a      	mov	r2, r3
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	ea02 0800 	and.w	r8, r2, r0
 800310e:	ea03 0901 	and.w	r9, r3, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	014b      	lsls	r3, r1, #5
 8003120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003124:	0142      	lsls	r2, r0, #5
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	ebb0 0008 	subs.w	r0, r0, r8
 800312e:	eb61 0109 	sbc.w	r1, r1, r9
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	018b      	lsls	r3, r1, #6
 800313c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003140:	0182      	lsls	r2, r0, #6
 8003142:	1a12      	subs	r2, r2, r0
 8003144:	eb63 0301 	sbc.w	r3, r3, r1
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	00d9      	lsls	r1, r3, #3
 8003152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003156:	00d0      	lsls	r0, r2, #3
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	eb12 0208 	adds.w	r2, r2, r8
 8003160:	eb43 0309 	adc.w	r3, r3, r9
 8003164:	f04f 0000 	mov.w	r0, #0
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	0259      	lsls	r1, r3, #9
 800316e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003172:	0250      	lsls	r0, r2, #9
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f7fd f832 	bl	80001ec <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e04a      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	ea02 0400 	and.w	r4, r2, r0
 80031aa:	ea03 0501 	and.w	r5, r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	014b      	lsls	r3, r1, #5
 80031bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031c0:	0142      	lsls	r2, r0, #5
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	1b00      	subs	r0, r0, r4
 80031c8:	eb61 0105 	sbc.w	r1, r1, r5
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	018b      	lsls	r3, r1, #6
 80031d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031da:	0182      	lsls	r2, r0, #6
 80031dc:	1a12      	subs	r2, r2, r0
 80031de:	eb63 0301 	sbc.w	r3, r3, r1
 80031e2:	f04f 0000 	mov.w	r0, #0
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	00d9      	lsls	r1, r3, #3
 80031ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031f0:	00d0      	lsls	r0, r2, #3
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	1912      	adds	r2, r2, r4
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0299      	lsls	r1, r3, #10
 8003206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800320a:	0290      	lsls	r0, r2, #10
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	f7fc ffe6 	bl	80001ec <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	60bb      	str	r3, [r7, #8]
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003246:	60bb      	str	r3, [r7, #8]
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	68bb      	ldr	r3, [r7, #8]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_GetHCLKFreq+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff0 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08007ed8 	.word	0x08007ed8

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffdc 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0b5b      	lsrs	r3, r3, #13
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	08007ed8 	.word	0x08007ed8

080032cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e03f      	b.n	800335e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fa0c 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fbf1 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b088      	sub	sp, #32
 800336a:	af02      	add	r7, sp, #8
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 8083 	bne.w	800348e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_UART_Transmit+0x2e>
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07b      	b.n	8003490 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Transmit+0x40>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e074      	b.n	8003490 <HAL_UART_Transmit+0x12a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033bc:	f7fd fb0e 	bl	80009dc <HAL_GetTick>
 80033c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033d6:	e042      	b.n	800345e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d122      	bne.n	8003436 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa10 	bl	8003820 <UART_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e042      	b.n	8003490 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3302      	adds	r3, #2
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	e017      	b.n	800345e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3301      	adds	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	e013      	b.n	800345e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f9ed 	bl	8003820 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e01f      	b.n	8003490 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	60ba      	str	r2, [r7, #8]
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1b7      	bne.n	80033d8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2200      	movs	r2, #0
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f9d4 	bl	8003820 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e006      	b.n	8003490 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	f040 8090 	bne.w	80035da <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_UART_Receive+0x2e>
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e088      	b.n	80035dc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Receive+0x40>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e081      	b.n	80035dc <HAL_UART_Receive+0x144>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2222      	movs	r2, #34	; 0x22
 80034ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ee:	f7fd fa75 	bl	80009dc <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003508:	e05c      	b.n	80035c4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d12b      	bne.n	800357a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2120      	movs	r1, #32
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f977 	bl	8003820 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e04f      	b.n	80035dc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10c      	bne.n	8003562 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003554:	b29a      	uxth	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3302      	adds	r3, #2
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	e030      	b.n	80035c4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	b29b      	uxth	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	b29a      	uxth	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	e024      	b.n	80035c4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2120      	movs	r1, #32
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f94b 	bl	8003820 <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e023      	b.n	80035dc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d108      	bne.n	80035ae <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	b2ca      	uxtb	r2, r1
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e00a      	b.n	80035c4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1c59      	adds	r1, r3, #1
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d19d      	bne.n	800350a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x52>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9e0 	bl	80039f4 <UART_Receive_IT>
      return;
 8003634:	e0d0      	b.n	80037d8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80b0 	beq.w	800379e <HAL_UART_IRQHandler+0x1ba>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_UART_IRQHandler+0x70>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80a5 	beq.w	800379e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_UART_IRQHandler+0x90>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_UART_IRQHandler+0xb0>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	f043 0202 	orr.w	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_UART_IRQHandler+0xd0>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00f      	beq.n	80036de <HAL_UART_IRQHandler+0xfa>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <HAL_UART_IRQHandler+0xee>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	f043 0208 	orr.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d077      	beq.n	80037d6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_UART_IRQHandler+0x11c>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f97a 	bl	80039f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_UART_IRQHandler+0x144>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d031      	beq.n	800378c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8c3 	bl	80038b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d123      	bne.n	8003784 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_UART_IRQHandler+0x1fc>)
 800375a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fa7c 	bl	8000c5e <HAL_DMA_Abort_IT>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d016      	beq.n	800379a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003776:	4610      	mov	r0, r2
 8003778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377a:	e00e      	b.n	800379a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f845 	bl	800380c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003782:	e00a      	b.n	800379a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f841 	bl	800380c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378a:	e006      	b.n	800379a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f83d 	bl	800380c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003798:	e01d      	b.n	80037d6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379a:	bf00      	nop
    return;
 800379c:	e01b      	b.n	80037d6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_UART_IRQHandler+0x1d6>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8b0 	bl	8003918 <UART_Transmit_IT>
    return;
 80037b8:	e00e      	b.n	80037d8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <HAL_UART_IRQHandler+0x1f4>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8f8 	bl	80039c4 <UART_EndTransmit_IT>
    return;
 80037d4:	e000      	b.n	80037d8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80037d6:	bf00      	nop
  }
}
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	080038f1 	.word	0x080038f1

080037e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003830:	e02c      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d028      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x30>
 8003840:	f7fd f8cc 	bl	80009dc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	d21d      	bcs.n	800388c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800385e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695a      	ldr	r2, [r3, #20]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e00f      	b.n	80038ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d0c3      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff ff7e 	bl	800380c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b21      	cmp	r3, #33	; 0x21
 800392a:	d144      	bne.n	80039b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d11a      	bne.n	800396c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	1c9a      	adds	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	621a      	str	r2, [r3, #32]
 800395e:	e00e      	b.n	800397e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	621a      	str	r2, [r3, #32]
 800396a:	e008      	b.n	800397e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6211      	str	r1, [r2, #32]
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4619      	mov	r1, r3
 800398c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fefd 	bl	80037e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b22      	cmp	r3, #34	; 0x22
 8003a06:	d171      	bne.n	8003aec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a10:	d123      	bne.n	8003a5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10e      	bne.n	8003a3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	1c9a      	adds	r2, r3, #2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a3c:	e029      	b.n	8003a92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
 8003a58:	e01b      	b.n	8003a92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6858      	ldr	r0, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	1c59      	adds	r1, r3, #1
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6291      	str	r1, [r2, #40]	; 0x28
 8003a72:	b2c2      	uxtb	r2, r0
 8003a74:	701a      	strb	r2, [r3, #0]
 8003a76:	e00c      	b.n	8003a92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	1c58      	adds	r0, r3, #1
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	6288      	str	r0, [r1, #40]	; 0x28
 8003a8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d120      	bne.n	8003ae8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0220 	bic.w	r2, r2, #32
 8003ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fe8a 	bl	80037f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e002      	b.n	8003aee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	b0bd      	sub	sp, #244	; 0xf4
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	ea40 0301 	orr.w	r3, r0, r1
 8003b7e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8a:	f040 81a5 	bne.w	8003ed8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4bcd      	ldr	r3, [pc, #820]	; (8003ecc <UART_SetConfig+0x3d4>)
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d006      	beq.n	8003ba8 <UART_SetConfig+0xb0>
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4bcb      	ldr	r3, [pc, #812]	; (8003ed0 <UART_SetConfig+0x3d8>)
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	f040 80cb 	bne.w	8003d3e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba8:	f7ff fb7c 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8003bac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003bb4:	461c      	mov	r4, r3
 8003bb6:	f04f 0500 	mov.w	r5, #0
 8003bba:	4622      	mov	r2, r4
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bce:	1912      	adds	r2, r2, r4
 8003bd0:	eb45 0303 	adc.w	r3, r5, r3
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	00d9      	lsls	r1, r3, #3
 8003bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be2:	00d0      	lsls	r0, r2, #3
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	1911      	adds	r1, r2, r4
 8003bea:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003bee:	416b      	adcs	r3, r5
 8003bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003c06:	415b      	adcs	r3, r3
 8003c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003c10:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003c14:	f7fc faea 	bl	80001ec <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4bad      	ldr	r3, [pc, #692]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	011e      	lsls	r6, r3, #4
 8003c26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c2a:	461c      	mov	r4, r3
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	4622      	mov	r2, r4
 8003c32:	462b      	mov	r3, r5
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	67b9      	str	r1, [r7, #120]	; 0x78
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003c40:	1912      	adds	r2, r2, r4
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	00d9      	lsls	r1, r3, #3
 8003c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c54:	00d0      	lsls	r0, r2, #3
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	1911      	adds	r1, r2, r4
 8003c5c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003c60:	416b      	adcs	r3, r5
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	1891      	adds	r1, r2, r2
 8003c74:	6739      	str	r1, [r7, #112]	; 0x70
 8003c76:	415b      	adcs	r3, r3
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
 8003c7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c7e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003c82:	f7fc fab3 	bl	80001ec <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4b92      	ldr	r3, [pc, #584]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	2164      	movs	r1, #100	; 0x64
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3332      	adds	r3, #50	; 0x32
 8003c9e:	4a8d      	ldr	r2, [pc, #564]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cac:	441e      	add	r6, r3
 8003cae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	1894      	adds	r4, r2, r2
 8003cbe:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003cc8:	1812      	adds	r2, r2, r0
 8003cca:	eb41 0303 	adc.w	r3, r1, r3
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	f04f 0500 	mov.w	r5, #0
 8003cd6:	00dd      	lsls	r5, r3, #3
 8003cd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cdc:	00d4      	lsls	r4, r2, #3
 8003cde:	4622      	mov	r2, r4
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	1814      	adds	r4, r2, r0
 8003ce4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003ce8:	414b      	adcs	r3, r1
 8003cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	1891      	adds	r1, r2, r2
 8003cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8003cfe:	415b      	adcs	r3, r3
 8003d00:	667b      	str	r3, [r7, #100]	; 0x64
 8003d02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003d06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d0a:	f7fc fa6f 	bl	80001ec <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4b70      	ldr	r3, [pc, #448]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003d14:	fba3 1302 	umull	r1, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	2164      	movs	r1, #100	; 0x64
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	3332      	adds	r3, #50	; 0x32
 8003d26:	4a6b      	ldr	r2, [pc, #428]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	f003 0207 	and.w	r2, r3, #7
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4432      	add	r2, r6
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e26d      	b.n	800421a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7ff fa9d 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8003d42:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d4a:	461c      	mov	r4, r3
 8003d4c:	f04f 0500 	mov.w	r5, #0
 8003d50:	4622      	mov	r2, r4
 8003d52:	462b      	mov	r3, r5
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d60:	1912      	adds	r2, r2, r4
 8003d62:	eb45 0303 	adc.w	r3, r5, r3
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	00d9      	lsls	r1, r3, #3
 8003d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d74:	00d0      	lsls	r0, r2, #3
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	1911      	adds	r1, r2, r4
 8003d7c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003d80:	416b      	adcs	r3, r5
 8003d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	6539      	str	r1, [r7, #80]	; 0x50
 8003d96:	415b      	adcs	r3, r3
 8003d98:	657b      	str	r3, [r7, #84]	; 0x54
 8003d9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d9e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003da2:	f7fc fa23 	bl	80001ec <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003dac:	fba3 2302 	umull	r2, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	011e      	lsls	r6, r3, #4
 8003db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003db8:	461c      	mov	r4, r3
 8003dba:	f04f 0500 	mov.w	r5, #0
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dce:	1912      	adds	r2, r2, r4
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	00d9      	lsls	r1, r3, #3
 8003dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de2:	00d0      	lsls	r0, r2, #3
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	1911      	adds	r1, r2, r4
 8003dea:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8003dee:	416b      	adcs	r3, r5
 8003df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	6439      	str	r1, [r7, #64]	; 0x40
 8003e04:	415b      	adcs	r3, r3
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
 8003e08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003e10:	f7fc f9ec 	bl	80001ec <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2164      	movs	r1, #100	; 0x64
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e3a:	441e      	add	r6, r3
 8003e3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e40:	4618      	mov	r0, r3
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	1894      	adds	r4, r2, r2
 8003e4c:	63bc      	str	r4, [r7, #56]	; 0x38
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e56:	1812      	adds	r2, r2, r0
 8003e58:	eb41 0303 	adc.w	r3, r1, r3
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	f04f 0500 	mov.w	r5, #0
 8003e64:	00dd      	lsls	r5, r3, #3
 8003e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e6a:	00d4      	lsls	r4, r2, #3
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	462b      	mov	r3, r5
 8003e70:	1814      	adds	r4, r2, r0
 8003e72:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003e76:	414b      	adcs	r3, r1
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	6339      	str	r1, [r7, #48]	; 0x30
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e94:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e98:	f7fc f9a8 	bl	80001ec <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2164      	movs	r1, #100	; 0x64
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <UART_SetConfig+0x3dc>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 0207 	and.w	r2, r3, #7
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4432      	add	r2, r6
 8003ec8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003eca:	e1a6      	b.n	800421a <UART_SetConfig+0x722>
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4bd1      	ldr	r3, [pc, #836]	; (8004224 <UART_SetConfig+0x72c>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d006      	beq.n	8003ef2 <UART_SetConfig+0x3fa>
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4bcf      	ldr	r3, [pc, #828]	; (8004228 <UART_SetConfig+0x730>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	f040 80ca 	bne.w	8004086 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef2:	f7ff f9d7 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8003ef6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003efa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003efe:	461c      	mov	r4, r3
 8003f00:	f04f 0500 	mov.w	r5, #0
 8003f04:	4622      	mov	r2, r4
 8003f06:	462b      	mov	r3, r5
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f14:	1912      	adds	r2, r2, r4
 8003f16:	eb45 0303 	adc.w	r3, r5, r3
 8003f1a:	f04f 0000 	mov.w	r0, #0
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	00d9      	lsls	r1, r3, #3
 8003f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f28:	00d0      	lsls	r0, r2, #3
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	eb12 0a04 	adds.w	sl, r2, r4
 8003f32:	eb43 0b05 	adc.w	fp, r3, r5
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	008b      	lsls	r3, r1, #2
 8003f4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f50:	0082      	lsls	r2, r0, #2
 8003f52:	4650      	mov	r0, sl
 8003f54:	4659      	mov	r1, fp
 8003f56:	f7fc f949 	bl	80001ec <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4bb3      	ldr	r3, [pc, #716]	; (800422c <UART_SetConfig+0x734>)
 8003f60:	fba3 2302 	umull	r2, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	011e      	lsls	r6, r3, #4
 8003f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f04f 0100 	mov.w	r1, #0
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	1894      	adds	r4, r2, r2
 8003f78:	623c      	str	r4, [r7, #32]
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f82:	1812      	adds	r2, r2, r0
 8003f84:	eb41 0303 	adc.w	r3, r1, r3
 8003f88:	f04f 0400 	mov.w	r4, #0
 8003f8c:	f04f 0500 	mov.w	r5, #0
 8003f90:	00dd      	lsls	r5, r3, #3
 8003f92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f96:	00d4      	lsls	r4, r2, #3
 8003f98:	4622      	mov	r2, r4
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	1814      	adds	r4, r2, r0
 8003f9e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003fa2:	414b      	adcs	r3, r1
 8003fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	008b      	lsls	r3, r1, #2
 8003fbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fc2:	0082      	lsls	r2, r0, #2
 8003fc4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003fc8:	f7fc f910 	bl	80001ec <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b96      	ldr	r3, [pc, #600]	; (800422c <UART_SetConfig+0x734>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a91      	ldr	r2, [pc, #580]	; (800422c <UART_SetConfig+0x734>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff0:	441e      	add	r6, r3
 8003ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	1894      	adds	r4, r2, r2
 8004002:	61bc      	str	r4, [r7, #24]
 8004004:	415b      	adcs	r3, r3
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	1812      	adds	r2, r2, r0
 800400e:	eb41 0303 	adc.w	r3, r1, r3
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	f04f 0500 	mov.w	r5, #0
 800401a:	00dd      	lsls	r5, r3, #3
 800401c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004020:	00d4      	lsls	r4, r2, #3
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	1814      	adds	r4, r2, r0
 8004028:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800402c:	414b      	adcs	r3, r1
 800402e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	008b      	lsls	r3, r1, #2
 8004048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800404c:	0082      	lsls	r2, r0, #2
 800404e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004052:	f7fc f8cb 	bl	80001ec <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <UART_SetConfig+0x734>)
 800405c:	fba3 1302 	umull	r1, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2164      	movs	r1, #100	; 0x64
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a6f      	ldr	r2, [pc, #444]	; (800422c <UART_SetConfig+0x734>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4432      	add	r2, r6
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	e0c9      	b.n	800421a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004086:	f7ff f8f9 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 800408a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800408e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004092:	461c      	mov	r4, r3
 8004094:	f04f 0500 	mov.w	r5, #0
 8004098:	4622      	mov	r2, r4
 800409a:	462b      	mov	r3, r5
 800409c:	1891      	adds	r1, r2, r2
 800409e:	6139      	str	r1, [r7, #16]
 80040a0:	415b      	adcs	r3, r3
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040a8:	1912      	adds	r2, r2, r4
 80040aa:	eb45 0303 	adc.w	r3, r5, r3
 80040ae:	f04f 0000 	mov.w	r0, #0
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	00d9      	lsls	r1, r3, #3
 80040b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040bc:	00d0      	lsls	r0, r2, #3
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	eb12 0804 	adds.w	r8, r2, r4
 80040c6:	eb43 0905 	adc.w	r9, r3, r5
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040e4:	0082      	lsls	r2, r0, #2
 80040e6:	4640      	mov	r0, r8
 80040e8:	4649      	mov	r1, r9
 80040ea:	f7fc f87f 	bl	80001ec <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b4e      	ldr	r3, [pc, #312]	; (800422c <UART_SetConfig+0x734>)
 80040f4:	fba3 2302 	umull	r2, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	011e      	lsls	r6, r3, #4
 80040fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004100:	4618      	mov	r0, r3
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	1894      	adds	r4, r2, r2
 800410c:	60bc      	str	r4, [r7, #8]
 800410e:	415b      	adcs	r3, r3
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004116:	1812      	adds	r2, r2, r0
 8004118:	eb41 0303 	adc.w	r3, r1, r3
 800411c:	f04f 0400 	mov.w	r4, #0
 8004120:	f04f 0500 	mov.w	r5, #0
 8004124:	00dd      	lsls	r5, r3, #3
 8004126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800412a:	00d4      	lsls	r4, r2, #3
 800412c:	4622      	mov	r2, r4
 800412e:	462b      	mov	r3, r5
 8004130:	1814      	adds	r4, r2, r0
 8004132:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004136:	414b      	adcs	r3, r1
 8004138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4618      	mov	r0, r3
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	008b      	lsls	r3, r1, #2
 8004152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004156:	0082      	lsls	r2, r0, #2
 8004158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800415c:	f7fc f846 	bl	80001ec <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <UART_SetConfig+0x734>)
 8004166:	fba3 1302 	umull	r1, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2164      	movs	r1, #100	; 0x64
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	3332      	adds	r3, #50	; 0x32
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <UART_SetConfig+0x734>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004184:	441e      	add	r6, r3
 8004186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800418a:	4618      	mov	r0, r3
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	1894      	adds	r4, r2, r2
 8004196:	603c      	str	r4, [r7, #0]
 8004198:	415b      	adcs	r3, r3
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a0:	1812      	adds	r2, r2, r0
 80041a2:	eb41 0303 	adc.w	r3, r1, r3
 80041a6:	f04f 0400 	mov.w	r4, #0
 80041aa:	f04f 0500 	mov.w	r5, #0
 80041ae:	00dd      	lsls	r5, r3, #3
 80041b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041b4:	00d4      	lsls	r4, r2, #3
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	1814      	adds	r4, r2, r0
 80041bc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80041c0:	414b      	adcs	r3, r1
 80041c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041e0:	0082      	lsls	r2, r0, #2
 80041e2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80041e6:	f7fc f801 	bl	80001ec <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <UART_SetConfig+0x734>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <UART_SetConfig+0x734>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4432      	add	r2, r6
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	e7ff      	b.n	800421a <UART_SetConfig+0x722>
 800421a:	bf00      	nop
 800421c:	37f4      	adds	r7, #244	; 0xf4
 800421e:	46bd      	mov	sp, r7
 8004220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004224:	40011000 	.word	0x40011000
 8004228:	40011400 	.word	0x40011400
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004230:	b084      	sub	sp, #16
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	f107 001c 	add.w	r0, r7, #28
 800423e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d122      	bne.n	800428e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f94a 	bl	800451c <USB_CoreReset>
 8004288:	4603      	mov	r3, r0
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e01a      	b.n	80042c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f93e 	bl	800451c <USB_CoreReset>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
 80042b6:	e005      	b.n	80042c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10b      	bne.n	80042e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f043 0206 	orr.w	r2, r3, #6
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ee:	b004      	add	sp, #16
 80042f0:	4770      	bx	lr

080042f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f043 0201 	orr.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e00b      	b.n	800437a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e001      	b.n	800437a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e003      	b.n	8004382 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800437a:	2032      	movs	r0, #50	; 0x32
 800437c:	f7fc fb3a 	bl	80009f4 <HAL_Delay>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <USB_FlushTxFifo+0x48>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e006      	b.n	80043c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d0f0      	beq.n	80043a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	00030d40 	.word	0x00030d40

080043d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2210      	movs	r2, #16
 80043e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3301      	adds	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a09      	ldr	r2, [pc, #36]	; (8004418 <USB_FlushRxFifo+0x40>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e006      	b.n	800440a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d0f0      	beq.n	80043ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	00030d40 	.word	0x00030d40

0800441c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	460b      	mov	r3, r1
 800442c:	71fb      	strb	r3, [r7, #7]
 800442e:	4613      	mov	r3, r2
 8004430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800443a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004442:	88bb      	ldrh	r3, [r7, #4]
 8004444:	3303      	adds	r3, #3
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e00f      	b.n	8004470 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	031a      	lsls	r2, r3, #12
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445c:	461a      	mov	r2, r3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3304      	adds	r3, #4
 8004468:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3301      	adds	r3, #1
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d3eb      	bcc.n	8004450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004486:	b480      	push	{r7}
 8004488:	b089      	sub	sp, #36	; 0x24
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	4613      	mov	r3, r2
 8004492:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	3303      	adds	r3, #3
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e00b      	b.n	80044c2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3304      	adds	r3, #4
 80044ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3301      	adds	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3ef      	bcc.n	80044aa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80044ca:	69fb      	ldr	r3, [r7, #28]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044f0:	68fb      	ldr	r3, [r7, #12]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0301 	and.w	r3, r3, #1
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a13      	ldr	r2, [pc, #76]	; (8004580 <USB_CoreReset+0x64>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e01b      	b.n	8004572 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	daf2      	bge.n	8004528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a09      	ldr	r2, [pc, #36]	; (8004580 <USB_CoreReset+0x64>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d0f0      	beq.n	8004552 <USB_CoreReset+0x36>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	00030d40 	.word	0x00030d40

08004584 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004584:	b084      	sub	sp, #16
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	f107 001c 	add.w	r0, r7, #28
 8004592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045a0:	461a      	mov	r2, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d018      	beq.n	8004608 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10a      	bne.n	80045f2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	e014      	b.n	800461c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e009      	b.n	800461c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004616:	f023 0304 	bic.w	r3, r3, #4
 800461a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800461c:	2110      	movs	r1, #16
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff feb4 	bl	800438c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fed7 	bl	80043d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e015      	b.n	800465c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2300      	movs	r3, #0
 8004654:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d3e5      	bcc.n	8004630 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004664:	2101      	movs	r1, #1
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8ac 	bl	80047c4 <USB_DriveVbus>

  HAL_Delay(200U);
 800466c:	20c8      	movs	r0, #200	; 0xc8
 800466e:	f7fc f9c1 	bl	80009f4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <USB_HostInit+0x164>)
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a13      	ldr	r2, [pc, #76]	; (80046ec <USB_HostInit+0x168>)
 800469e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80046a2:	e009      	b.n	80046b8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <USB_HostInit+0x16c>)
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <USB_HostInit+0x170>)
 80046b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f043 0210 	orr.w	r2, r3, #16
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <USB_HostInit+0x174>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046e2:	b004      	add	sp, #16
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	01000200 	.word	0x01000200
 80046ec:	00e00300 	.word	0x00e00300
 80046f0:	00600080 	.word	0x00600080
 80046f4:	004000e0 	.word	0x004000e0
 80046f8:	a3200008 	.word	0xa3200008

080046fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d107      	bne.n	800474e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004744:	461a      	mov	r2, r3
 8004746:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800474a:	6053      	str	r3, [r2, #4]
 800474c:	e009      	b.n	8004762 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d106      	bne.n	8004762 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475a:	461a      	mov	r2, r3
 800475c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004760:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004790:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800479a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80047a0:	2064      	movs	r0, #100	; 0x64
 80047a2:	f7fc f927 	bl	80009f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80047ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80047b4:	200a      	movs	r0, #10
 80047b6:	f7fc f91d 	bl	80009f4 <HAL_Delay>

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <USB_DriveVbus+0x44>
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d106      	bne.n	8004808 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004806:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d109      	bne.n	8004828 <USB_DriveVbus+0x64>
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004826:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	0c5b      	lsrs	r3, r3, #17
 8004854:	f003 0303 	and.w	r3, r3, #3
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	b29b      	uxth	r3, r3
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4603      	mov	r3, r0
 8004898:	70fb      	strb	r3, [r7, #3]
 800489a:	460b      	mov	r3, r1
 800489c:	70bb      	strb	r3, [r7, #2]
 800489e:	4613      	mov	r3, r2
 80048a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80048be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d87e      	bhi.n	80049c4 <USB_HC_Init+0x13c>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <USB_HC_Init+0x44>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	08004987 	.word	0x08004987
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	08004949 	.word	0x08004949
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80048ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80048f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da10      	bge.n	800491a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	440a      	add	r2, r1
 800490e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004918:	e057      	b.n	80049ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d051      	beq.n	80049ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	440a      	add	r2, r1
 800493c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004940:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004944:	60d3      	str	r3, [r2, #12]
      break;
 8004946:	e040      	b.n	80049ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004954:	461a      	mov	r2, r3
 8004956:	f240 639d 	movw	r3, #1693	; 0x69d
 800495a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800495c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da34      	bge.n	80049ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	440a      	add	r2, r1
 800497a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004984:	e023      	b.n	80049ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	461a      	mov	r2, r3
 8004994:	f240 2325 	movw	r3, #549	; 0x225
 8004998:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800499a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da17      	bge.n	80049d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80049c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80049c2:	e006      	b.n	80049d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      break;
 80049c8:	e004      	b.n	80049d4 <USB_HC_Init+0x14c>
      break;
 80049ca:	bf00      	nop
 80049cc:	e002      	b.n	80049d4 <USB_HC_Init+0x14c>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <USB_HC_Init+0x14c>
      break;
 80049d2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ee:	4313      	orrs	r3, r2
 80049f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80049fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da03      	bge.n	8004a0e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e001      	b.n	8004a12 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e001      	b.n	8004a26 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a26:	787b      	ldrb	r3, [r7, #1]
 8004a28:	059b      	lsls	r3, r3, #22
 8004a2a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a2e:	78bb      	ldrb	r3, [r7, #2]
 8004a30:	02db      	lsls	r3, r3, #11
 8004a32:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a36:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a3c:	049b      	lsls	r3, r3, #18
 8004a3e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004a42:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004a4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	0159      	lsls	r1, r3, #5
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	440b      	add	r3, r1
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004a62:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d10f      	bne.n	8004a8c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop

08004a9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08c      	sub	sp, #48	; 0x30
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <USB_HC_StartXfer+0x7c>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	791b      	ldrb	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d124      	bne.n	8004b18 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <USB_HC_StartXfer+0x50>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	795b      	ldrb	r3, [r3, #5]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa2c 	bl	8004f40 <USB_DoPing>
      return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e111      	b.n	8004d10 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d112      	bne.n	8004b18 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004b10:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d018      	beq.n	8004b52 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	8912      	ldrh	r2, [r2, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	8912      	ldrh	r2, [r2, #8]
 8004b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b34:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004b36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90b      	bls.n	8004b56 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004b3e:	8b7b      	ldrh	r3, [r7, #26]
 8004b40:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	8912      	ldrh	r2, [r2, #8]
 8004b48:	fb02 f203 	mul.w	r2, r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	e001      	b.n	8004b56 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004b52:	2301      	movs	r3, #1
 8004b54:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	78db      	ldrb	r3, [r3, #3]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	8912      	ldrh	r2, [r2, #8]
 8004b64:	fb02 f203 	mul.w	r2, r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b76:	04d9      	lsls	r1, r3, #19
 8004b78:	4b67      	ldr	r3, [pc, #412]	; (8004d18 <USB_HC_StartXfer+0x27c>)
 8004b7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	7a9b      	ldrb	r3, [r3, #10]
 8004b82:	075b      	lsls	r3, r3, #29
 8004b84:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	0148      	lsls	r0, r1, #5
 8004b8c:	6a39      	ldr	r1, [r7, #32]
 8004b8e:	4401      	add	r1, r0
 8004b90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004b94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004b96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68d9      	ldr	r1, [r3, #12]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bae:	460a      	mov	r2, r1
 8004bb0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004be8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	7e7b      	ldrb	r3, [r7, #25]
 8004bfa:	075b      	lsls	r3, r3, #29
 8004bfc:	69f9      	ldr	r1, [r7, #28]
 8004bfe:	0148      	lsls	r0, r1, #5
 8004c00:	6a39      	ldr	r1, [r7, #32]
 8004c02:	4401      	add	r1, r0
 8004c04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a40      	ldr	r2, [pc, #256]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c1c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c26:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c28:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e005      	b.n	8004c4c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c40:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c48:	4a34      	ldr	r2, [pc, #208]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c4a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c4c:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c54:	4a31      	ldr	r2, [pc, #196]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c56:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <USB_HC_StartXfer+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d14d      	bne.n	8004d0e <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	78db      	ldrb	r3, [r3, #3]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d149      	bne.n	8004d0e <USB_HC_StartXfer+0x272>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d045      	beq.n	8004d0e <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	79db      	ldrb	r3, [r3, #7]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d830      	bhi.n	8004cec <USB_HC_StartXfer+0x250>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <USB_HC_StartXfer+0x1f4>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004cc5 	.word	0x08004cc5
 8004c98:	08004ca1 	.word	0x08004ca1
 8004c9c:	08004cc5 	.word	0x08004cc5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	3303      	adds	r3, #3
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004caa:	8afa      	ldrh	r2, [r7, #22]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d91c      	bls.n	8004cf0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f043 0220 	orr.w	r2, r3, #32
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	619a      	str	r2, [r3, #24]
          }
          break;
 8004cc2:	e015      	b.n	8004cf0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	3303      	adds	r3, #3
 8004cca:	089b      	lsrs	r3, r3, #2
 8004ccc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004cce:	8afa      	ldrh	r2, [r7, #22]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d90a      	bls.n	8004cf4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	619a      	str	r2, [r3, #24]
          }
          break;
 8004cea:	e003      	b.n	8004cf4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004cec:	bf00      	nop
 8004cee:	e002      	b.n	8004cf6 <USB_HC_StartXfer+0x25a>
          break;
 8004cf0:	bf00      	nop
 8004cf2:	e000      	b.n	8004cf6 <USB_HC_StartXfer+0x25a>
          break;
 8004cf4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	68d9      	ldr	r1, [r3, #12]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785a      	ldrb	r2, [r3, #1]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2000      	movs	r0, #0
 8004d06:	9000      	str	r0, [sp, #0]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fb87 	bl	800441c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	1ff80000 	.word	0x1ff80000
 8004d1c:	200000b0 	.word	0x200000b0

08004d20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	b29b      	uxth	r3, r3
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0c9b      	lsrs	r3, r3, #18
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <USB_HC_Halt+0x3a>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d16c      	bne.n	8004e56 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d9a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d143      	bne.n	8004e30 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004de6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e06:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	d81d      	bhi.n	8004e52 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e2c:	d0ec      	beq.n	8004e08 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e2e:	e080      	b.n	8004f32 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e50:	e06f      	b.n	8004f32 <USB_HC_Halt+0x1f0>
          break;
 8004e52:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e54:	e06d      	b.n	8004f32 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e74:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d143      	bne.n	8004f0e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ea4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	0151      	lsls	r1, r2, #5
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	440a      	add	r2, r1
 8004ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ee4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef2:	d81d      	bhi.n	8004f30 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0a:	d0ec      	beq.n	8004ee6 <USB_HC_Halt+0x1a4>
 8004f0c:	e011      	b.n	8004f32 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e000      	b.n	8004f32 <USB_HC_Halt+0x1f0>
          break;
 8004f30:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004f54:	2301      	movs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	04da      	lsls	r2, r3, #19
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <USB_DoPing+0x74>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f88:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	1ff80000 	.word	0x1ff80000

08004fb8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff f9a3 	bl	8004314 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004fce:	2110      	movs	r1, #16
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff f9db 	bl	800438c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff f9fe 	bl	80043d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e01f      	b.n	8005022 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005000:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005008:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3301      	adds	r3, #1
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d9dc      	bls.n	8004fe2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	e034      	b.n	8005098 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005044:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800504c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005054:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3301      	adds	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005074:	d80c      	bhi.n	8005090 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508c:	d0ec      	beq.n	8005068 <USB_StopHost+0xb0>
 800508e:	e000      	b.n	8005092 <USB_StopHost+0xda>
        break;
 8005090:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d9c7      	bls.n	800502e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a4:	461a      	mov	r2, r3
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff f91c 	bl	80042f2 <USB_EnableGlobalInt>

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005110:	2200      	movs	r2, #0
 8005112:	709a      	strb	r2, [r3, #2]
 8005114:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005116:	789a      	ldrb	r2, [r3, #2]
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 800511a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 800511e:	2200      	movs	r2, #0
 8005120:	711a      	strb	r2, [r3, #4]
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005124:	791a      	ldrb	r2, [r3, #4]
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005128:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 800512c:	2200      	movs	r2, #0
 800512e:	719a      	strb	r2, [r3, #6]
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005132:	799a      	ldrb	r2, [r3, #6]
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005136:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005138:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 800513a:	2200      	movs	r2, #0
 800513c:	721a      	strb	r2, [r3, #8]
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005140:	7a1a      	ldrb	r2, [r3, #8]
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <USBH_HID_KeybdInit+0xa4>)
 8005144:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e00c      	b.n	8005166 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <USBH_HID_KeybdInit+0xa8>)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2100      	movs	r1, #0
 8005152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005156:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <USBH_HID_KeybdInit+0xac>)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2100      	movs	r1, #0
 800515c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d9ef      	bls.n	800514c <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	8b1b      	ldrh	r3, [r3, #24]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d902      	bls.n	800517a <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2208      	movs	r2, #8
 8005178:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <USBH_HID_KeybdInit+0xac>)
 800517e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f103 0008 	add.w	r0, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800518c:	2250      	movs	r2, #80	; 0x50
 800518e:	4619      	mov	r1, r3
 8005190:	f7ff ff98 	bl	80050c4 <USBH_HID_FifoInit>

  return USBH_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000118 	.word	0x20000118
 80051a4:	20000108 	.word	0x20000108
 80051a8:	20000110 	.word	0x20000110

080051ac <USBH_PRT_InterfaceInit>:
  USBH_PRT_Process,
  USBH_PRT_SOFProcess,
  NULL,
};

static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b089      	sub	sp, #36	; 0x24
 80051b0:	af04      	add	r7, sp, #16
 80051b2:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80051ba:	2020      	movs	r0, #32
 80051bc:	f002 fc9e 	bl	8007afc <malloc>
 80051c0:	4603      	mov	r3, r0
 80051c2:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 80051ce:	2220      	movs	r2, #32
 80051d0:	2100      	movs	r1, #0
 80051d2:	68b8      	ldr	r0, [r7, #8]
 80051d4:	f002 fca2 	bl	8007b1c <memset>

	PRT_Handle->num = 0;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	709a      	strb	r2, [r3, #2]
	PRT_Handle->Budrate = Bud_9600;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80051e4:	61da      	str	r2, [r3, #28]
	PRT_Handle->poll = 10;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	220a      	movs	r2, #10
 80051ea:	729a      	strb	r2, [r3, #10]
	PRT_Handle->vID = phost->device.DevDesc.idVendor;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 232e 	ldrh.w	r2, [r3, #814]	; 0x32e
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	831a      	strh	r2, [r3, #24]
	PRT_Handle->pID = phost->device.DevDesc.idProduct;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 2330 	ldrh.w	r2, [r3, #816]	; 0x330
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	835a      	strh	r2, [r3, #26]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005206:	7919      	ldrb	r1, [r3, #4]
 8005208:	23ff      	movs	r3, #255	; 0xff
 800520a:	2201      	movs	r2, #1
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff19 	bl	8006044 <USBH_FindInterface>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	4619      	mov	r1, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	231a      	movs	r3, #26
 8005224:	fb03 f301 	mul.w	r3, r3, r1
 8005228:	4413      	add	r3, r2
 800522a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	4619      	mov	r1, r3
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	231a      	movs	r3, #26
 800523e:	fb03 f301 	mul.w	r3, r3, r1
 8005242:	4413      	add	r3, r2
 8005244:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	4619      	mov	r1, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	231a      	movs	r3, #26
 8005258:	fb03 f301 	mul.w	r3, r3, r1
 800525c:	4413      	add	r3, r2
 800525e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	799b      	ldrb	r3, [r3, #6]
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f002 f8c7 	bl	8007402 <USBH_AllocPipe>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	4619      	mov	r1, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	231a      	movs	r3, #26
 8005286:	fb03 f301 	mul.w	r3, r3, r1
 800528a:	4413      	add	r3, r2
 800528c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	795b      	ldrb	r3, [r3, #5]
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f002 f8b0 	bl	8007402 <USBH_AllocPipe>
 80052a2:	4603      	mov	r3, r0
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052b0:	791b      	ldrb	r3, [r3, #4]
 80052b2:	2b07      	cmp	r3, #7
 80052b4:	d107      	bne.n	80052c6 <USBH_PRT_InterfaceInit+0x11a>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 500);
 80052b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052ba:	2210      	movs	r2, #16
 80052bc:	4932      	ldr	r1, [pc, #200]	; (8005388 <USBH_PRT_InterfaceInit+0x1dc>)
 80052be:	4833      	ldr	r0, [pc, #204]	; (800538c <USBH_PRT_InterfaceInit+0x1e0>)
 80052c0:	f7fe f851 	bl	8003366 <HAL_UART_Transmit>
 80052c4:	e006      	b.n	80052d4 <USBH_PRT_InterfaceInit+0x128>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 500);
 80052c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80052ca:	2214      	movs	r2, #20
 80052cc:	4930      	ldr	r1, [pc, #192]	; (8005390 <USBH_PRT_InterfaceInit+0x1e4>)
 80052ce:	482f      	ldr	r0, [pc, #188]	; (800538c <USBH_PRT_InterfaceInit+0x1e0>)
 80052d0:	f7fe f849 	bl	8003366 <HAL_UART_Transmit>
   }

	//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e04d      	b.n	8005376 <USBH_PRT_InterfaceInit+0x1ca>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	4618      	mov	r0, r3
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	00d9      	lsls	r1, r3, #3
 80052e8:	231a      	movs	r3, #26
 80052ea:	fb03 f300 	mul.w	r3, r3, r0
 80052ee:	440b      	add	r3, r1
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 3346 	addw	r3, r3, #838	; 0x346
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b25b      	sxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da1c      	bge.n	8005338 <USBH_PRT_InterfaceInit+0x18c>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	7919      	ldrb	r1, [r3, #4]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	7998      	ldrb	r0, [r3, #6]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	8912      	ldrh	r2, [r2, #8]
 8005316:	9202      	str	r2, [sp, #8]
 8005318:	2202      	movs	r2, #2
 800531a:	9201      	str	r2, [sp, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4623      	mov	r3, r4
 8005320:	4602      	mov	r2, r0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 f83e 	bl	80073a4 <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f002 fb4f 	bl	80079d4 <USBH_LL_SetToggle>
 8005336:	e01b      	b.n	8005370 <USBH_PRT_InterfaceInit+0x1c4>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	78d9      	ldrb	r1, [r3, #3]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	7958      	ldrb	r0, [r3, #5]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	8912      	ldrh	r2, [r2, #8]
 8005350:	9202      	str	r2, [sp, #8]
 8005352:	2202      	movs	r2, #2
 8005354:	9201      	str	r2, [sp, #4]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4623      	mov	r3, r4
 800535a:	4602      	mov	r2, r0
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f002 f821 	bl	80073a4 <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2200      	movs	r2, #0
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f002 fb32 	bl	80079d4 <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	ddae      	ble.n	80052da <USBH_PRT_InterfaceInit+0x12e>

		  }
     }

return USBH_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	08007d24 	.word	0x08007d24
 800538c:	200000c4 	.word	0x200000c4
 8005390:	08007d38 	.word	0x08007d38

08005394 <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	791b      	ldrb	r3, [r3, #4]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f002 f814 	bl	80073e2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	791b      	ldrb	r3, [r3, #4]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f002 f83f 	bl	8007444 <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	78db      	ldrb	r3, [r3, #3]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f002 f801 	bl	80073e2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	78db      	ldrb	r3, [r3, #3]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f002 f82c 	bl	8007444 <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4618      	mov	r0, r3
 8005408:	f002 fb80 	bl	8007b0c <free>
	    phost->pActiveClass->pData = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005412:	2200      	movs	r2, #0
 8005414:	61da      	str	r2, [r3, #28]
	  }

return USBH_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 8005420:	b580      	push	{r7, lr}
 8005422:	b0a8      	sub	sp, #160	; 0xa0
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 8005428:	f107 0308 	add.w	r3, r7, #8
 800542c:	2296      	movs	r2, #150	; 0x96
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f002 fb73 	bl	8007b1c <memset>
//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 8005436:	bf00      	nop
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	2296      	movs	r2, #150	; 0x96
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f99a 	bl	800577a <USBH_PRT_Get_Device_Id>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f5      	bne.n	8005438 <USBH_PRT_ClassRequest+0x18>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)strlen(buff) ,( uint32_t)100);
	memset(buff,0,150);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	2296      	movs	r2, #150	; 0x96
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fb61 	bl	8007b1c <memset>

	while( USBH_PRT_Get_Port_Status(phost, buff, 150) != USBH_OK);
 800545a:	bf00      	nop
 800545c:	f107 0308 	add.w	r3, r7, #8
 8005460:	2296      	movs	r2, #150	; 0x96
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f9a9 	bl	80057bc <USBH_PRT_Get_Port_Status>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f5      	bne.n	800545c <USBH_PRT_ClassRequest+0x3c>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)10);
	memset(buff,0,150);
 8005470:	f107 0308 	add.w	r3, r7, #8
 8005474:	2296      	movs	r2, #150	; 0x96
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f002 fb4f 	bl	8007b1c <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)1000);
//	memset(buff,0,150);

	return USBH_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	37a0      	adds	r7, #160	; 0xa0
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	f5ad 5dfc 	sub.w	sp, sp, #8064	; 0x1f80
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	f107 0318 	add.w	r3, r7, #24
 8005496:	3b14      	subs	r3, #20
 8005498:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 800549a:	2300      	movs	r3, #0
 800549c:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80054a0:	f102 0216 	add.w	r2, r2, #22
 80054a4:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];
	 int8_t stat_flag = -1;
 80054a6:	23ff      	movs	r3, #255	; 0xff
 80054a8:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80054ac:	f102 0215 	add.w	r2, r2, #21
 80054b0:	7013      	strb	r3, [r2, #0]
	 USBH_StatusTypeDef status = USBH_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80054b8:	f102 0214 	add.w	r2, r2, #20
 80054bc:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	3b14      	subs	r3, #20
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80054d0:	f102 0210 	add.w	r2, r2, #16
 80054d4:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 80054d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80054da:	f103 030c 	add.w	r3, r3, #12
 80054de:	2240      	movs	r2, #64	; 0x40
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f002 fb1a 	bl	8007b1c <memset>
	 memset(buff,0, sizeof(buff));
 80054e8:	f107 0318 	add.w	r3, r7, #24
 80054ec:	3b0c      	subs	r3, #12
 80054ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f002 fb11 	bl	8007b1c <memset>
	 PRT_Handle->poll = 10;
 80054fa:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80054fe:	f103 0310 	add.w	r3, r3, #16
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	220a      	movs	r2, #10
 8005506:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state)
 8005508:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800550c:	f103 0310 	add.w	r3, r3, #16
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b03      	cmp	r3, #3
 8005516:	f200 80f6 	bhi.w	8005706 <USBH_PRT_Process+0x27e>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <USBH_PRT_Process+0x98>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005531 	.word	0x08005531
 8005524:	08005541 	.word	0x08005541
 8005528:	08005573 	.word	0x08005573
 800552c:	0800566b 	.word	0x0800566b
	 {

			case PRT_INIT:
				PRT_Handle->state = PRT_SYNC;
 8005530:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005534:	f103 0310 	add.w	r3, r3, #16
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]
				break;
 800553e:	e0ec      	b.n	800571a <USBH_PRT_Process+0x292>

			 case PRT_SYNC:
				  /* Sync with start of Even Frame */
				if (phost->Timer & 1U)
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	3b14      	subs	r3, #20
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <USBH_PRT_Process+0xda>
				 {
					PRT_Handle->state = PRT_GET_DATA;
 8005554:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005558:	f103 0310 	add.w	r3, r3, #16
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2202      	movs	r2, #2
 8005560:	701a      	strb	r2, [r3, #0]
				 }
				 PRT_Handle->state = PRT_GET_DATA;
 8005562:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005566:	f103 0310 	add.w	r3, r3, #16
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2202      	movs	r2, #2
 800556e:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Receive_IT(&huart2, (uint8_t *)buff, (uint16_t)2000);
				 break;
 8005570:	e0d3      	b.n	800571a <USBH_PRT_Process+0x292>
				  * 	(#) VIDPID
				  * 	(#) BAUDRATE : Default-->9600
				  * 	(#) CHN_BAUDRATE
				  *
				  */
				 memset(buff,0,strlen(buff));
 8005572:	f107 0318 	add.w	r3, r7, #24
 8005576:	3b0c      	subs	r3, #12
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa fe2f 	bl	80001dc <strlen>
 800557e:	4602      	mov	r2, r0
 8005580:	f107 0318 	add.w	r3, r7, #24
 8005584:	3b0c      	subs	r3, #12
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f002 fac7 	bl	8007b1c <memset>
				 HAL_UART_Receive(&huart2, (uint8_t *)buff, (uint16_t)SIZE_BUFF, 2000);
 800558e:	f107 0118 	add.w	r1, r7, #24
 8005592:	390c      	subs	r1, #12
 8005594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005598:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800559c:	4862      	ldr	r0, [pc, #392]	; (8005728 <USBH_PRT_Process+0x2a0>)
 800559e:	f7fd ff7b 	bl	8003498 <HAL_UART_Receive>
				  *	OR
				  *	make it as external interrupt but in that case  SendDataOnPrinter(phost,PRT_Handle, buff);
				  *	should not work.
				  *
				  */
				 if(strlen(buff) > 16)
 80055a2:	f107 0318 	add.w	r3, r7, #24
 80055a6:	3b0c      	subs	r3, #12
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa fe17 	bl	80001dc <strlen>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	f240 80af 	bls.w	8005714 <USBH_PRT_Process+0x28c>
				 {
					 HAL_UART_Transmit(&huart2, (uint8_t *)"Data Received\r\n",(uint16_t)strlen("Data Received\r\n") ,( uint32_t)50);
 80055b6:	2332      	movs	r3, #50	; 0x32
 80055b8:	220f      	movs	r2, #15
 80055ba:	495c      	ldr	r1, [pc, #368]	; (800572c <USBH_PRT_Process+0x2a4>)
 80055bc:	485a      	ldr	r0, [pc, #360]	; (8005728 <USBH_PRT_Process+0x2a0>)
 80055be:	f7fd fed2 	bl	8003366 <HAL_UART_Transmit>
					 CommandOperation(PRT_Handle,buff);
 80055c2:	f107 0318 	add.w	r3, r7, #24
 80055c6:	3b0c      	subs	r3, #12
 80055c8:	4619      	mov	r1, r3
 80055ca:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80055ce:	f103 0310 	add.w	r3, r3, #16
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	f000 f9e8 	bl	80059a8 <CommandOperation>

					 if( printReport() )
 80055d8:	f000 fac4 	bl	8005b64 <printReport>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01a      	beq.n	8005618 <USBH_PRT_Process+0x190>
					 {
						 uint8_t *POSreport;
						 POSreport = PRT_Report(buff);
 80055e2:	f107 0318 	add.w	r3, r7, #24
 80055e6:	3b0c      	subs	r3, #12
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fac3 	bl	8005b74 <PRT_Report>
 80055ee:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80055f2:	f103 030c 	add.w	r3, r3, #12
 80055f6:	6018      	str	r0, [r3, #0]
						 SendDataOnPrinter(phost,PRT_Handle, POSreport);
 80055f8:	f107 0318 	add.w	r3, r7, #24
 80055fc:	3b14      	subs	r3, #20
 80055fe:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8005602:	f102 020c 	add.w	r2, r2, #12
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 800560c:	f101 0110 	add.w	r1, r1, #16
 8005610:	6809      	ldr	r1, [r1, #0]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	f000 fb92 	bl	8005d3c <SendDataOnPrinter>
					 }

					 // Send Data on printer After choping into specified length.
					 SendDataOnPrinter(phost,PRT_Handle, buff);
 8005618:	f107 0218 	add.w	r2, r7, #24
 800561c:	3a0c      	subs	r2, #12
 800561e:	f107 0318 	add.w	r3, r7, #24
 8005622:	3b14      	subs	r3, #20
 8005624:	f507 51fc 	add.w	r1, r7, #8064	; 0x1f80
 8005628:	f101 0110 	add.w	r1, r1, #16
 800562c:	6809      	ldr	r1, [r1, #0]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	f000 fb84 	bl	8005d3c <SendDataOnPrinter>

					 PRT_Handle->state = PRT_POLL;
 8005634:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005638:	f103 0310 	add.w	r3, r3, #16
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
					 PRT_Handle->timer = phost->Timer;
 8005642:	f107 0318 	add.w	r3, r7, #24
 8005646:	3b14      	subs	r3, #20
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800564e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8005652:	f103 0310 	add.w	r3, r3, #16
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60da      	str	r2, [r3, #12]
					 PRT_Handle->DataReady = 0U;
 800565a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800565e:	f103 0310 	add.w	r3, r3, #16
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	741a      	strb	r2, [r3, #16]
	 	 	 	 }
				 break;
 8005668:	e054      	b.n	8005714 <USBH_PRT_Process+0x28c>

			 case PRT_POLL:

				 if(USBH_LL_GetURBState(phost, PRT_Handle->InPipe) == USBH_URB_DONE)
 800566a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800566e:	f103 0310 	add.w	r3, r3, #16
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	791a      	ldrb	r2, [r3, #4]
 8005676:	f107 0318 	add.w	r3, r7, #24
 800567a:	3b14      	subs	r3, #20
 800567c:	4611      	mov	r1, r2
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	f002 f96e 	bl	8007960 <USBH_LL_GetURBState>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d146      	bne.n	8005718 <USBH_PRT_Process+0x290>
				 {

					 status = USBH_LL_GetURBState(phost, PRT_Handle->InPipe);
 800568a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 800568e:	f103 0310 	add.w	r3, r3, #16
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	791a      	ldrb	r2, [r3, #4]
 8005696:	f107 0318 	add.w	r3, r7, #24
 800569a:	3b14      	subs	r3, #20
 800569c:	4611      	mov	r1, r2
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	f002 f95e 	bl	8007960 <USBH_LL_GetURBState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80056aa:	f102 0214 	add.w	r2, r2, #20
 80056ae:	7013      	strb	r3, [r2, #0]
				//	 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll received status\r\n",(uint16_t)strlen("PRT Poll received status\r\n") ,( uint32_t)5);
					 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->InPipe);
 80056b0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80056b4:	f103 0310 	add.w	r3, r3, #16
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	791a      	ldrb	r2, [r3, #4]
 80056bc:	f107 0318 	add.w	r3, r7, #24
 80056c0:	3b14      	subs	r3, #20
 80056c2:	4611      	mov	r1, r2
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f002 f8b9 	bl	800783c <USBH_LL_GetLastXferSize>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 80056d0:	f102 0216 	add.w	r2, r2, #22
 80056d4:	8013      	strh	r3, [r2, #0]
					 PRT_Handle->state = PRT_GET_DATA;
 80056d6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80056da:	f103 0310 	add.w	r3, r3, #16
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
				//	 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll got polled data\r\n",(uint16_t)strlen("PRT Poll got polled data\r\n") ,( uint32_t)5);

					 USBH_Delay( (PRT_Handle->poll)*2);
 80056e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80056e8:	f103 0310 	add.w	r3, r3, #16
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	7a9b      	ldrb	r3, [r3, #10]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 f9a1 	bl	8007a3a <USBH_Delay>
					 HAL_UART_Transmit(&huart2, (uint8_t *)"PRT Poll done\r\n",(uint16_t)strlen("PRT Poll done\r\n") ,( uint32_t)50);
 80056f8:	2332      	movs	r3, #50	; 0x32
 80056fa:	220f      	movs	r2, #15
 80056fc:	490c      	ldr	r1, [pc, #48]	; (8005730 <USBH_PRT_Process+0x2a8>)
 80056fe:	480a      	ldr	r0, [pc, #40]	; (8005728 <USBH_PRT_Process+0x2a0>)
 8005700:	f7fd fe31 	bl	8003366 <HAL_UART_Transmit>

				 }

				 break;
 8005704:	e008      	b.n	8005718 <USBH_PRT_Process+0x290>

			 default:
				 HAL_UART_Transmit(&huart2, (uint8_t *)"Nothing to do...\r\n",(uint16_t)strlen("Nothing to do...\r\n") ,( uint32_t)50);
 8005706:	2332      	movs	r3, #50	; 0x32
 8005708:	2212      	movs	r2, #18
 800570a:	490a      	ldr	r1, [pc, #40]	; (8005734 <USBH_PRT_Process+0x2ac>)
 800570c:	4806      	ldr	r0, [pc, #24]	; (8005728 <USBH_PRT_Process+0x2a0>)
 800570e:	f7fd fe2a 	bl	8003366 <HAL_UART_Transmit>
				 break;
 8005712:	e002      	b.n	800571a <USBH_PRT_Process+0x292>
				 break;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <USBH_PRT_Process+0x292>
				 break;
 8005718:	bf00      	nop

	}



	return USBH_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	f507 57fc 	add.w	r7, r7, #8064	; 0x1f80
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	200000c4 	.word	0x200000c4
 800572c:	08007d50 	.word	0x08007d50
 8005730:	08007d60 	.word	0x08007d60
 8005734:	08007d70 	.word	0x08007d70

08005738 <USBH_PRT_SOFProcess>:

static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d10c      	bne.n	800576c <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	7a92      	ldrb	r2, [r2, #10]
 8005762:	4293      	cmp	r3, r2
 8005764:	d302      	bcc.n	800576c <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USBH_PRT_Get_Device_Id>:


static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	22a1      	movs	r2, #161	; 0xa1
 800578c:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	461a      	mov	r2, r3
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 fbc6 	bl	8006f3e <USBH_CtlReq>
 80057b2:	4603      	mov	r3, r0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBH_PRT_Get_Port_Status>:


static USBH_StatusTypeDef USBH_PRT_Get_Port_Status(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	22a1      	movs	r2, #161	; 0xa1
 80057ce:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_PORT_STATUS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	461a      	mov	r2, r3
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 fba5 	bl	8006f3e <USBH_CtlReq>
 80057f4:	4603      	mov	r3, r0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <CheckCMD>:
/* @ checkCMD : Check command
 *
 */


int CheckCMD(const uint8_t *cmd){
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

	if( !strcmp(cmd,"VIDPID") )
 8005808:	4914      	ldr	r1, [pc, #80]	; (800585c <CheckCMD+0x5c>)
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fa fcdc 	bl	80001c8 <strcmp>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <CheckCMD+0x1a>
	{
		return 1;
 8005816:	2301      	movs	r3, #1
 8005818:	e01b      	b.n	8005852 <CheckCMD+0x52>
	}else if(!strcmp(cmd,"BAUDRATE") )
 800581a:	4911      	ldr	r1, [pc, #68]	; (8005860 <CheckCMD+0x60>)
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fa fcd3 	bl	80001c8 <strcmp>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <CheckCMD+0x2c>
	{
		return 2;
 8005828:	2302      	movs	r3, #2
 800582a:	e012      	b.n	8005852 <CheckCMD+0x52>
	}else if(!strcmp(cmd,"CHN_BAUDRATE"))
 800582c:	490d      	ldr	r1, [pc, #52]	; (8005864 <CheckCMD+0x64>)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fa fcca 	bl	80001c8 <strcmp>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <CheckCMD+0x3e>
	{
		return 3;
 800583a:	2303      	movs	r3, #3
 800583c:	e009      	b.n	8005852 <CheckCMD+0x52>
	}
	if( !strcmp(cmd,"PRINTREPORT"))
 800583e:	490a      	ldr	r1, [pc, #40]	; (8005868 <CheckCMD+0x68>)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fa fcc1 	bl	80001c8 <strcmp>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <CheckCMD+0x50>
	{
		return 4;
 800584c:	2304      	movs	r3, #4
 800584e:	e000      	b.n	8005852 <CheckCMD+0x52>
	}

	return 0;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	08007d84 	.word	0x08007d84
 8005860:	08007d8c 	.word	0x08007d8c
 8005864:	08007d98 	.word	0x08007d98
 8005868:	08007da8 	.word	0x08007da8

0800586c <reverse>:
/* @ reverse : Reverse the String
 * @ temp : string address
 */


void reverse(uint8_t * temp){
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(temp)-1;
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fa fcb1 	bl	80001dc <strlen>
 800587a:	4603      	mov	r3, r0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 8005882:	2300      	movs	r3, #0
 8005884:	73bb      	strb	r3, [r7, #14]
	uint8_t j=0;
 8005886:	2300      	movs	r3, #0
 8005888:	737b      	strb	r3, [r7, #13]
	while(i < len){
 800588a:	e017      	b.n	80058bc <reverse+0x50>
		j = temp[i];
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	737b      	strb	r3, [r7, #13]
		temp[i++] = temp[len];
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	441a      	add	r2, r3
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	73b9      	strb	r1, [r7, #14]
 80058a2:	4619      	mov	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	440b      	add	r3, r1
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	701a      	strb	r2, [r3, #0]
		temp[len--] = j;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	1e5a      	subs	r2, r3, #1
 80058b0:	73fa      	strb	r2, [r7, #15]
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	7b7a      	ldrb	r2, [r7, #13]
 80058ba:	701a      	strb	r2, [r3, #0]
	while(i < len){
 80058bc:	7bba      	ldrb	r2, [r7, #14]
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d3e3      	bcc.n	800588c <reverse+0x20>

		//i++;//
		//len--;//
	}

}//end-reverse
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <I2A>:
/* @ I2A : Change Integer into ASCii
 * @ temp : Destination buffer of String
 * @ num : Integer
 */

void I2A(uint8_t *temp, uint32_t num){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
	while(num){
 80058de:	e019      	b.n	8005914 <I2A+0x44>
		temp[i++] = num%10+48;
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <I2A+0x58>)
 80058e4:	fba3 2301 	umull	r2, r3, r3, r1
 80058e8:	08da      	lsrs	r2, r3, #3
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	1aca      	subs	r2, r1, r3
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	1c59      	adds	r1, r3, #1
 80058fa:	73f9      	strb	r1, [r7, #15]
 80058fc:	4619      	mov	r1, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	440b      	add	r3, r1
 8005902:	3230      	adds	r2, #48	; 0x30
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
		num /= 10;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <I2A+0x58>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	603b      	str	r3, [r7, #0]
	while(num){
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e2      	bne.n	80058e0 <I2A+0x10>
	}

	reverse(temp);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffa6 	bl	800586c <reverse>
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	cccccccd 	.word	0xcccccccd

0800592c <A2I>:
 * @ temp   : String buffer
 * @ return : converted Integer
 */

uint32_t A2I(uint8_t *temp)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

	uint32_t num = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

	for(int i=0; i < strlen(temp); i++)
 8005938:	2300      	movs	r3, #0
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	e00f      	b.n	800595e <A2I+0x32>
	{
		num = num*10 + (temp[i]-48);
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4619      	mov	r1, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4413      	add	r3, r2
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	440b      	add	r3, r1
 8005954:	3b30      	subs	r3, #48	; 0x30
 8005956:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < strlen(temp); i++)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3301      	adds	r3, #1
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fa fc3c 	bl	80001dc <strlen>
 8005964:	4602      	mov	r2, r0
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	d8e8      	bhi.n	800593e <A2I+0x12>

	}

	return num;
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <checkBudrate>:
 * @ temp : source buffer
 * @return : integer value or Baudrate
 */

uint32_t  checkBudrate(uint8_t *temp)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
	return A2I(temp);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffd4 	bl	800592c <A2I>
 8005984:	4603      	mov	r3, r0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <ChangeBaudrate>:
/* @ ChangeBaudrate : It is used to change baudrate at run time.
 * @ Baudrate : This is desired baudrate
 */

static uint8_t ChangeBaudrate( uint32_t Baudrate )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]

	MX_USART2_UART_Init(Baudrate);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fa fe36 	bl	8000608 <MX_USART2_UART_Init>

	return 1;
 800599c:	2301      	movs	r3, #1
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <CommandOperation>:
 * @ PRT_Handle : Printer Handler Structure
 * @ return : Use as per requirement
 */

int CommandOperation( PRT_HandleTypeDef *PRT_Handle , uint8_t *buff)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b094      	sub	sp, #80	; 0x50
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	//flag = 0 ; Command Not Found
	//flag = 1 ; Command  Found

	uint8_t temp[64],pktcnt,flag;
	uint16_t XferSize = strlen(buff);
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f7fa fc12 	bl	80001dc <strlen>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	 pktcnt=flag=0;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80059c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80059c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	 memset(temp,0,64);
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	2240      	movs	r2, #64	; 0x40
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 f8a1 	bl	8007b1c <memset>

	 if( (XferSize == 0))
 80059da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <CommandOperation+0x3e>
		 return 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0b2      	b.n	8005b4c <CommandOperation+0x1a4>

	 if( (XferSize > 15) )
 80059e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d901      	bls.n	80059f2 <CommandOperation+0x4a>
		 return 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e0ac      	b.n	8005b4c <CommandOperation+0x1a4>

	 pktcnt = CheckCMD(buff);
 80059f2:	6838      	ldr	r0, [r7, #0]
 80059f4:	f7ff ff04 	bl	8005800 <CheckCMD>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	 switch( pktcnt )
 80059fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	f200 8094 	bhi.w	8005b32 <CommandOperation+0x18a>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <CommandOperation+0x68>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005aa1 	.word	0x08005aa1
 8005a18:	08005ad5 	.word	0x08005ad5
 8005a1c:	08005b2d 	.word	0x08005b2d
		 {
		 case VIDPID:// Get Vid, Pid od device
			 I2A(temp,PRT_Handle->vID);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8b1b      	ldrh	r3, [r3, #24]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff4f 	bl	80058d0 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fa fbd0 	bl	80001dc <strlen>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f107 0108 	add.w	r1, r7, #8
 8005a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a48:	4842      	ldr	r0, [pc, #264]	; (8005b54 <CommandOperation+0x1ac>)
 8005a4a:	f7fd fc8c 	bl	8003366 <HAL_UART_Transmit>
			 I2A(temp,PRT_Handle->pID);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8b5b      	ldrh	r3, [r3, #26]
 8005a52:	461a      	mov	r2, r3
 8005a54:	f107 0308 	add.w	r3, r7, #8
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff ff38 	bl	80058d0 <I2A>
			 HAL_UART_Transmit(&huart2, ",", strlen(","),1000);
 8005a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a64:	2201      	movs	r2, #1
 8005a66:	493c      	ldr	r1, [pc, #240]	; (8005b58 <CommandOperation+0x1b0>)
 8005a68:	483a      	ldr	r0, [pc, #232]	; (8005b54 <CommandOperation+0x1ac>)
 8005a6a:	f7fd fc7c 	bl	8003366 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, &temp, strlen( temp),1000);
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fbb2 	bl	80001dc <strlen>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f107 0108 	add.w	r1, r7, #8
 8005a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a84:	4833      	ldr	r0, [pc, #204]	; (8005b54 <CommandOperation+0x1ac>)
 8005a86:	f7fd fc6e 	bl	8003366 <HAL_UART_Transmit>
			 memset(temp,0,64);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 f842 	bl	8007b1c <memset>
			 flag = 1; //flag = 1 ; Command Found
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 8005a9e:	e053      	b.n	8005b48 <CommandOperation+0x1a0>

		 case BAUDRATE:// Get current baudrate default 9600
			 I2A(temp,PRT_Handle->Budrate);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ff10 	bl	80058d0 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 8005ab0:	f107 0308 	add.w	r3, r7, #8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fb91 	bl	80001dc <strlen>
 8005aba:	4603      	mov	r3, r0
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f107 0108 	add.w	r1, r7, #8
 8005ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ac6:	4823      	ldr	r0, [pc, #140]	; (8005b54 <CommandOperation+0x1ac>)
 8005ac8:	f7fd fc4d 	bl	8003366 <HAL_UART_Transmit>
		 	 flag = 1; //flag = 1 ; Command Found
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 	 break;
 8005ad2:	e039      	b.n	8005b48 <CommandOperation+0x1a0>

		 case CHN_BAUDRATE:// Change baudrate

			 HAL_UART_Transmit(&huart2, "Waiting for modified baudrate\n", strlen( "Waiting for modified baudrate\n"),1000);
 8005ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ad8:	221e      	movs	r2, #30
 8005ada:	4920      	ldr	r1, [pc, #128]	; (8005b5c <CommandOperation+0x1b4>)
 8005adc:	481d      	ldr	r0, [pc, #116]	; (8005b54 <CommandOperation+0x1ac>)
 8005ade:	f7fd fc42 	bl	8003366 <HAL_UART_Transmit>
			 do
			 {
				 memset(temp,0,64);
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	2240      	movs	r2, #64	; 0x40
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 f816 	bl	8007b1c <memset>
				 HAL_UART_Receive(&huart2, &temp, 64,1000);
 8005af0:	f107 0108 	add.w	r1, r7, #8
 8005af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	4816      	ldr	r0, [pc, #88]	; (8005b54 <CommandOperation+0x1ac>)
 8005afc:	f7fd fccc 	bl	8003498 <HAL_UART_Receive>

			 }while(!strlen(temp));
 8005b00:	f107 0308 	add.w	r3, r7, #8
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0eb      	beq.n	8005ae2 <CommandOperation+0x13a>

			 PRT_Handle->Budrate = checkBudrate(temp);
 8005b0a:	f107 0308 	add.w	r3, r7, #8
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff31 	bl	8005976 <checkBudrate>
 8005b14:	4602      	mov	r2, r0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	61da      	str	r2, [r3, #28]
			 flag = ChangeBaudrate(  PRT_Handle->Budrate );
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ff35 	bl	800598e <ChangeBaudrate>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 8005b2a:	e00d      	b.n	8005b48 <CommandOperation+0x1a0>

		 case PRINTREPORT:
			 	 printReport();
 8005b2c:	f000 f81a 	bl	8005b64 <printReport>
			 	 break;
 8005b30:	e00a      	b.n	8005b48 <CommandOperation+0x1a0>
		 default:
		 {
			 HAL_UART_Transmit(&huart2, "This is not know Command\n", strlen(  "This is not know Command\n"),1000);
 8005b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b36:	2219      	movs	r2, #25
 8005b38:	4909      	ldr	r1, [pc, #36]	; (8005b60 <CommandOperation+0x1b8>)
 8005b3a:	4806      	ldr	r0, [pc, #24]	; (8005b54 <CommandOperation+0x1ac>)
 8005b3c:	f7fd fc13 	bl	8003366 <HAL_UART_Transmit>
			 flag = 0; //flag = 0 ; Command Not Found
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 }
		 break;
 8005b46:	bf00      	nop

		 }//end-Switch



	 return flag;
 8005b48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3750      	adds	r7, #80	; 0x50
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200000c4 	.word	0x200000c4
 8005b58:	08007db4 	.word	0x08007db4
 8005b5c:	08007db8 	.word	0x08007db8
 8005b60:	08007dd8 	.word	0x08007dd8

08005b64 <printReport>:


uint8_t printReport(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	/*
	 * Use it as per requirement and Conditions.
	 */

	return 0;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <PRT_Report>:
 * @ pData :  Received RAW data from User
 * @ return : converted data address into post scripts
 */

uint8_t *PRT_Report(uint8_t *pData)
{
 8005b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

	memset(dData,0,2000);
 8005b7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005b80:	2100      	movs	r1, #0
 8005b82:	4865      	ldr	r0, [pc, #404]	; (8005d18 <PRT_Report+0x1a4>)
 8005b84:	f001 ffca 	bl	8007b1c <memset>

	  if(strlen(pData) > 15)
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fa fb27 	bl	80001dc <strlen>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d97f      	bls.n	8005c94 <PRT_Report+0x120>
		  {
			  uint16_t startIdx =0;   // starting index of Buffer data
 8005b94:	2300      	movs	r3, #0
 8005b96:	827b      	strh	r3, [r7, #18]
			  uint16_t lastIdx =0;    // Last index of Buffer data
 8005b98:	2300      	movs	r3, #0
 8005b9a:	823b      	strh	r3, [r7, #16]
			  uint8_t *startAddr; // starting address of Buffer data
			  uint8_t *lastAddr;  // Last address of Buffer data

			  strcat(dData, "/Courier findfont [ 12 0 0 12 0 0] makefont setfont \r\n");
 8005b9c:	485e      	ldr	r0, [pc, #376]	; (8005d18 <PRT_Report+0x1a4>)
 8005b9e:	f7fa fb1d 	bl	80001dc <strlen>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <PRT_Report+0x1a4>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	4a5c      	ldr	r2, [pc, #368]	; (8005d1c <PRT_Report+0x1a8>)
 8005bac:	4614      	mov	r4, r2
 8005bae:	469c      	mov	ip, r3
 8005bb0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005bb4:	4665      	mov	r5, ip
 8005bb6:	4626      	mov	r6, r4
 8005bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005bba:	6028      	str	r0, [r5, #0]
 8005bbc:	6069      	str	r1, [r5, #4]
 8005bbe:	60aa      	str	r2, [r5, #8]
 8005bc0:	60eb      	str	r3, [r5, #12]
 8005bc2:	3410      	adds	r4, #16
 8005bc4:	f10c 0c10 	add.w	ip, ip, #16
 8005bc8:	4574      	cmp	r4, lr
 8005bca:	d1f3      	bne.n	8005bb4 <PRT_Report+0x40>
 8005bcc:	4663      	mov	r3, ip
 8005bce:	4622      	mov	r2, r4
 8005bd0:	6810      	ldr	r0, [r2, #0]
 8005bd2:	6018      	str	r0, [r3, #0]
 8005bd4:	8891      	ldrh	r1, [r2, #4]
 8005bd6:	7992      	ldrb	r2, [r2, #6]
 8005bd8:	8099      	strh	r1, [r3, #4]
 8005bda:	719a      	strb	r2, [r3, #6]
			  strcat(dData, "/showline { gsave show grestore 0 -12  rmoveto } def \r\n");
 8005bdc:	484e      	ldr	r0, [pc, #312]	; (8005d18 <PRT_Report+0x1a4>)
 8005bde:	f7fa fafd 	bl	80001dc <strlen>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b4c      	ldr	r3, [pc, #304]	; (8005d18 <PRT_Report+0x1a4>)
 8005be8:	4413      	add	r3, r2
 8005bea:	4a4d      	ldr	r2, [pc, #308]	; (8005d20 <PRT_Report+0x1ac>)
 8005bec:	4614      	mov	r4, r2
 8005bee:	469c      	mov	ip, r3
 8005bf0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005bf4:	4665      	mov	r5, ip
 8005bf6:	4626      	mov	r6, r4
 8005bf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005bfa:	6028      	str	r0, [r5, #0]
 8005bfc:	6069      	str	r1, [r5, #4]
 8005bfe:	60aa      	str	r2, [r5, #8]
 8005c00:	60eb      	str	r3, [r5, #12]
 8005c02:	3410      	adds	r4, #16
 8005c04:	f10c 0c10 	add.w	ip, ip, #16
 8005c08:	4574      	cmp	r4, lr
 8005c0a:	d1f3      	bne.n	8005bf4 <PRT_Report+0x80>
 8005c0c:	4662      	mov	r2, ip
 8005c0e:	4623      	mov	r3, r4
 8005c10:	cb03      	ldmia	r3!, {r0, r1}
 8005c12:	6010      	str	r0, [r2, #0]
 8005c14:	6051      	str	r1, [r2, #4]
			  strcat(dData, " 18   745  moveto \r\n");
 8005c16:	4840      	ldr	r0, [pc, #256]	; (8005d18 <PRT_Report+0x1a4>)
 8005c18:	f7fa fae0 	bl	80001dc <strlen>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b3d      	ldr	r3, [pc, #244]	; (8005d18 <PRT_Report+0x1a4>)
 8005c22:	4413      	add	r3, r2
 8005c24:	4a3f      	ldr	r2, [pc, #252]	; (8005d24 <PRT_Report+0x1b0>)
 8005c26:	461d      	mov	r5, r3
 8005c28:	4614      	mov	r4, r2
 8005c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c2c:	6028      	str	r0, [r5, #0]
 8005c2e:	6069      	str	r1, [r5, #4]
 8005c30:	60aa      	str	r2, [r5, #8]
 8005c32:	60eb      	str	r3, [r5, #12]
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	6128      	str	r0, [r5, #16]
 8005c38:	7923      	ldrb	r3, [r4, #4]
 8005c3a:	752b      	strb	r3, [r5, #20]

			  for(int idx = 0; idx < strlen(pData); )
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e021      	b.n	8005c86 <PRT_Report+0x112>
			  {
				  startIdx  =  idx;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	827b      	strh	r3, [r7, #18]
				  startAddr = (pData+startIdx);
 8005c46:	8a7b      	ldrh	r3, [r7, #18]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
				  lastAddr   = (uint8_t *)strstr(pData+startIdx, "\r\n" );
 8005c4e:	8a7b      	ldrh	r3, [r7, #18]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	4934      	ldr	r1, [pc, #208]	; (8005d28 <PRT_Report+0x1b4>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f002 f831 	bl	8007cbe <strstr>
 8005c5c:	60b8      	str	r0, [r7, #8]

				  lastIdx = lastAddr - startAddr;
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	823b      	strh	r3, [r7, #16]

				  idx = idx  + lastIdx;
 8005c66:	8a3b      	ldrh	r3, [r7, #16]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

				  fun2(pData, startIdx, lastIdx);
 8005c6e:	8a3a      	ldrh	r2, [r7, #16]
 8005c70:	8a7b      	ldrh	r3, [r7, #18]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8cf 	bl	8005e18 <fun2>

				  idx++;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
				  idx++;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3301      	adds	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
			  for(int idx = 0; idx < strlen(pData); )
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fa faa8 	bl	80001dc <strlen>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d8d6      	bhi.n	8005c42 <PRT_Report+0xce>
			  }//end -for(idx)
		  }//end- if()

	  	  strcat(dData," showpage \r\n");
 8005c94:	4820      	ldr	r0, [pc, #128]	; (8005d18 <PRT_Report+0x1a4>)
 8005c96:	f7fa faa1 	bl	80001dc <strlen>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <PRT_Report+0x1a4>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <PRT_Report+0x1b8>)
 8005ca4:	461c      	mov	r4, r3
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005caa:	6020      	str	r0, [r4, #0]
 8005cac:	6061      	str	r1, [r4, #4]
 8005cae:	60a2      	str	r2, [r4, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	7323      	strb	r3, [r4, #12]
		  strcat(dData, "18   745  moveto \r\n");
 8005cb4:	4818      	ldr	r0, [pc, #96]	; (8005d18 <PRT_Report+0x1a4>)
 8005cb6:	f7fa fa91 	bl	80001dc <strlen>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <PRT_Report+0x1a4>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <PRT_Report+0x1bc>)
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	4614      	mov	r4, r2
 8005cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cca:	6028      	str	r0, [r5, #0]
 8005ccc:	6069      	str	r1, [r5, #4]
 8005cce:	60aa      	str	r2, [r5, #8]
 8005cd0:	60eb      	str	r3, [r5, #12]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	6128      	str	r0, [r5, #16]
		  strcat(dData, " showpage \r\n");
 8005cd6:	4810      	ldr	r0, [pc, #64]	; (8005d18 <PRT_Report+0x1a4>)
 8005cd8:	f7fa fa80 	bl	80001dc <strlen>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <PRT_Report+0x1a4>)
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <PRT_Report+0x1c0>)
 8005ce6:	461c      	mov	r4, r3
 8005ce8:	4613      	mov	r3, r2
 8005cea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cec:	6020      	str	r0, [r4, #0]
 8005cee:	6061      	str	r1, [r4, #4]
 8005cf0:	60a2      	str	r2, [r4, #8]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	81a3      	strh	r3, [r4, #12]

		  HAL_UART_Transmit(&huart2, dData, strlen(dData), 3000);
 8005cf6:	4808      	ldr	r0, [pc, #32]	; (8005d18 <PRT_Report+0x1a4>)
 8005cf8:	f7fa fa70 	bl	80001dc <strlen>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005d04:	4904      	ldr	r1, [pc, #16]	; (8005d18 <PRT_Report+0x1a4>)
 8005d06:	480c      	ldr	r0, [pc, #48]	; (8005d38 <PRT_Report+0x1c4>)
 8005d08:	f7fd fb2d 	bl	8003366 <HAL_UART_Transmit>
return dData;
 8005d0c:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <PRT_Report+0x1a4>)

}//end-PRT_Report()
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000128 	.word	0x20000128
 8005d1c:	08007df4 	.word	0x08007df4
 8005d20:	08007e2c 	.word	0x08007e2c
 8005d24:	08007e64 	.word	0x08007e64
 8005d28:	08007e7c 	.word	0x08007e7c
 8005d2c:	08007e80 	.word	0x08007e80
 8005d30:	08007e90 	.word	0x08007e90
 8005d34:	08007ea4 	.word	0x08007ea4
 8005d38:	200000c4 	.word	0x200000c4

08005d3c <SendDataOnPrinter>:
 * @ buff :  received data
 */


uint8_t SendDataOnPrinter(USBH_HandleTypeDef *phost, PRT_HandleTypeDef *PRT_Handle, uint8_t *buff)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b09a      	sub	sp, #104	; 0x68
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
	uint8_t temp[64],pktcnt=0,status;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint16_t XferSize=0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	memset(temp,0,64);
 8005d54:	f107 0310 	add.w	r3, r7, #16
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fedd 	bl	8007b1c <memset>
	XferSize = strlen(buff);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fa fa3a 	bl	80001dc <strlen>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d72:	e03f      	b.n	8005df4 <SendDataOnPrinter+0xb8>
	  {
			// Number of packets are important because the max packet size is decided and can not send more than that.
			// Here in this case is 64 bytes. It is already decided by device/configuration structures.
			 for(int j=0; j < PRT_Handle->length; j++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	657b      	str	r3, [r7, #84]	; 0x54
 8005d78:	e00f      	b.n	8005d9a <SendDataOnPrinter+0x5e>
			 {
				 temp[j] = buff[i+j];
 8005d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	4413      	add	r3, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	7819      	ldrb	r1, [r3, #0]
 8005d88:	f107 0210 	add.w	r2, r7, #16
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8e:	4413      	add	r3, r2
 8005d90:	460a      	mov	r2, r1
 8005d92:	701a      	strb	r2, [r3, #0]
			 for(int j=0; j < PRT_Handle->length; j++)
 8005d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d96:	3301      	adds	r3, #1
 8005d98:	657b      	str	r3, [r7, #84]	; 0x54
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	891b      	ldrh	r3, [r3, #8]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da2:	4293      	cmp	r3, r2
 8005da4:	dbe9      	blt.n	8005d7a <SendDataOnPrinter+0x3e>
			 }//for(j)
			 PRT_Handle->buff = temp;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f107 0210 	add.w	r2, r7, #16
 8005dac:	615a      	str	r2, [r3, #20]
			 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->InPipe, 0);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6959      	ldr	r1, [r3, #20]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	891a      	ldrh	r2, [r3, #8]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2000      	movs	r0, #0
 8005dbc:	9000      	str	r0, [sp, #0]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f001 facb 	bl	800735a <USBH_BulkSendData>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			 memset(temp,0,64);
 8005dca:	f107 0310 	add.w	r3, r7, #16
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 fea2 	bl	8007b1c <memset>
			 USBH_Delay(10);
 8005dd8:	200a      	movs	r0, #10
 8005dda:	f001 fe2e 	bl	8007a3a <USBH_Delay>
			 pktcnt++;
 8005dde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005de2:	3301      	adds	r3, #1
 8005de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	891b      	ldrh	r3, [r3, #8]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005df0:	4413      	add	r3, r2
 8005df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	891b      	ldrh	r3, [r3, #8]
 8005dfe:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8005e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d9b3      	bls.n	8005d74 <SendDataOnPrinter+0x38>
	}

	 return status;
 8005e0c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3760      	adds	r7, #96	; 0x60
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <fun2>:
 * @ lastIdx : last  index
 */


void fun2(uint8_t *pData, uint16_t startIdx, uint16_t lastIdx)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b0b7      	sub	sp, #220	; 0xdc
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
 8005e24:	4613      	mov	r3, r2
 8005e26:	803b      	strh	r3, [r7, #0]
	uint16_t idx=0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint8_t temp[200];
	memset(temp,0,200);
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	22c8      	movs	r2, #200	; 0xc8
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fe70 	bl	8007b1c <memset>
	strcat(dData,"(");
 8005e3c:	4822      	ldr	r0, [pc, #136]	; (8005ec8 <fun2+0xb0>)
 8005e3e:	f7fa f9cd 	bl	80001dc <strlen>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b20      	ldr	r3, [pc, #128]	; (8005ec8 <fun2+0xb0>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	4920      	ldr	r1, [pc, #128]	; (8005ecc <fun2+0xb4>)
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	460b      	mov	r3, r1
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	8013      	strh	r3, [r2, #0]
	while( idx <  lastIdx )
 8005e54:	e010      	b.n	8005e78 <fun2+0x60>
	{
		temp[idx++] =  pData[startIdx++];
 8005e56:	887b      	ldrh	r3, [r7, #2]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	807a      	strh	r2, [r7, #2]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	441a      	add	r2, r3
 8005e62:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	f8a7 10d6 	strh.w	r1, [r7, #214]	; 0xd6
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8005e72:	440b      	add	r3, r1
 8005e74:	f803 2ccc 	strb.w	r2, [r3, #-204]
	while( idx <  lastIdx )
 8005e78:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8005e7c:	883b      	ldrh	r3, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3e9      	bcc.n	8005e56 <fun2+0x3e>
	}
	temp[idx] = '\0';
 8005e82:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8005e86:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8005e8a:	4413      	add	r3, r2
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f803 2ccc 	strb.w	r2, [r3, #-204]
	strcat(dData,temp);
 8005e92:	f107 030c 	add.w	r3, r7, #12
 8005e96:	4619      	mov	r1, r3
 8005e98:	480b      	ldr	r0, [pc, #44]	; (8005ec8 <fun2+0xb0>)
 8005e9a:	f001 ff01 	bl	8007ca0 <strcat>
	strcat(dData, ") showline \r\n");
 8005e9e:	480a      	ldr	r0, [pc, #40]	; (8005ec8 <fun2+0xb0>)
 8005ea0:	f7fa f99c 	bl	80001dc <strlen>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <fun2+0xb0>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <fun2+0xb8>)
 8005eae:	461c      	mov	r4, r3
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005eb4:	6020      	str	r0, [r4, #0]
 8005eb6:	6061      	str	r1, [r4, #4]
 8005eb8:	60a2      	str	r2, [r4, #8]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	81a3      	strh	r3, [r4, #12]
}
 8005ebe:	bf00      	nop
 8005ec0:	37dc      	adds	r7, #220	; 0xdc
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd90      	pop	{r4, r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000128 	.word	0x20000128
 8005ecc:	08007eb4 	.word	0x08007eb4
 8005ed0:	08007eb8 	.word	0x08007eb8

08005ed4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e029      	b.n	8005f40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	79fa      	ldrb	r2, [r7, #7]
 8005ef0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f81f 	bl	8005f48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f001 fbcb 	bl	80076d4 <USBH_LL_Init>

  return USBH_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	e009      	b.n	8005f6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	33e0      	adds	r3, #224	; 0xe0
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b0e      	cmp	r3, #14
 8005f72:	d9f2      	bls.n	8005f5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e009      	b.n	8005f8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d3f1      	bcc.n	8005f7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2240      	movs	r2, #64	; 0x40
 8005fba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d016      	beq.n	8006032 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10e      	bne.n	800602c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	33de      	adds	r3, #222	; 0xde
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
 800602a:	e004      	b.n	8006036 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800602c:	2302      	movs	r3, #2
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e001      	b.n	8006036 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006032:	2302      	movs	r3, #2
 8006034:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	4608      	mov	r0, r1
 800604e:	4611      	mov	r1, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4603      	mov	r3, r0
 8006054:	70fb      	strb	r3, [r7, #3]
 8006056:	460b      	mov	r3, r1
 8006058:	70bb      	strb	r3, [r7, #2]
 800605a:	4613      	mov	r3, r2
 800605c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800606c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800606e:	e025      	b.n	80060bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	221a      	movs	r2, #26
 8006074:	fb02 f303 	mul.w	r3, r2, r3
 8006078:	3308      	adds	r3, #8
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	3302      	adds	r3, #2
 8006080:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	795b      	ldrb	r3, [r3, #5]
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	429a      	cmp	r2, r3
 800608a:	d002      	beq.n	8006092 <USBH_FindInterface+0x4e>
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2bff      	cmp	r3, #255	; 0xff
 8006090:	d111      	bne.n	80060b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006096:	78ba      	ldrb	r2, [r7, #2]
 8006098:	429a      	cmp	r2, r3
 800609a:	d002      	beq.n	80060a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800609c:	78bb      	ldrb	r3, [r7, #2]
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d109      	bne.n	80060b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80060a6:	787a      	ldrb	r2, [r7, #1]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d002      	beq.n	80060b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80060ac:	787b      	ldrb	r3, [r7, #1]
 80060ae:	2bff      	cmp	r3, #255	; 0xff
 80060b0:	d101      	bne.n	80060b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	e006      	b.n	80060c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	3301      	adds	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d9d6      	bls.n	8006070 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80060c2:	23ff      	movs	r3, #255	; 0xff
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fb37 	bl	800774c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80060de:	2101      	movs	r1, #1
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fc51 	bl	8007988 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af04      	add	r7, sp, #16
 80060f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d102      	bne.n	8006112 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2203      	movs	r2, #3
 8006110:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b0b      	cmp	r3, #11
 800611a:	f200 81b3 	bhi.w	8006484 <USBH_Process+0x394>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <USBH_Process+0x34>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006155 	.word	0x08006155
 8006128:	08006187 	.word	0x08006187
 800612c:	080061ef 	.word	0x080061ef
 8006130:	0800641f 	.word	0x0800641f
 8006134:	08006485 	.word	0x08006485
 8006138:	08006293 	.word	0x08006293
 800613c:	080063c5 	.word	0x080063c5
 8006140:	080062c9 	.word	0x080062c9
 8006144:	080062e9 	.word	0x080062e9
 8006148:	08006309 	.word	0x08006309
 800614c:	08006337 	.word	0x08006337
 8006150:	08006407 	.word	0x08006407
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8193 	beq.w	8006488 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006168:	20c8      	movs	r0, #200	; 0xc8
 800616a:	f001 fc66 	bl	8007a3a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fb49 	bl	8007806 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006184:	e180      	b.n	8006488 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800619e:	e182      	b.n	80064a6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061aa:	d914      	bls.n	80061d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061b2:	3301      	adds	r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d903      	bls.n	80061ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	220d      	movs	r2, #13
 80061ca:	701a      	strb	r2, [r3, #0]
      break;
 80061cc:	e16b      	b.n	80064a6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
      break;
 80061d4:	e167      	b.n	80064a6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80061dc:	f103 020a 	add.w	r2, r3, #10
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80061e6:	200a      	movs	r0, #10
 80061e8:	f001 fc27 	bl	8007a3a <USBH_Delay>
      break;
 80061ec:	e15b      	b.n	80064a6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061fe:	2104      	movs	r1, #4
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006204:	2064      	movs	r0, #100	; 0x64
 8006206:	f001 fc18 	bl	8007a3a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fad4 	bl	80077b8 <USBH_LL_GetSpeed>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2205      	movs	r2, #5
 800621e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006220:	2100      	movs	r1, #0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 f8ed 	bl	8007402 <USBH_AllocPipe>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006230:	2180      	movs	r1, #128	; 0x80
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 f8e5 	bl	8007402 <USBH_AllocPipe>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7919      	ldrb	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006254:	b292      	uxth	r2, r2
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	4603      	mov	r3, r0
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 f89e 	bl	80073a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7959      	ldrb	r1, [r3, #5]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800627c:	b292      	uxth	r2, r2
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	2200      	movs	r2, #0
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4603      	mov	r3, r0
 8006288:	2200      	movs	r2, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 f88a 	bl	80073a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006290:	e109      	b.n	80064a6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f90c 	bl	80064b0 <USBH_HandleEnum>
 8006298:	4603      	mov	r3, r0
 800629a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 80f3 	bne.w	800648c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d103      	bne.n	80062c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2208      	movs	r2, #8
 80062bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80062be:	e0e5      	b.n	800648c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2207      	movs	r2, #7
 80062c4:	701a      	strb	r2, [r3, #0]
      break;
 80062c6:	e0e1      	b.n	800648c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80de 	beq.w	8006490 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2208      	movs	r2, #8
 80062e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80062e6:	e0d3      	b.n	8006490 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc20 	bl	8006b38 <USBH_SetCfg>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 80ca 	bne.w	8006494 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2209      	movs	r2, #9
 8006304:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006306:	e0c5      	b.n	8006494 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006316:	2101      	movs	r1, #1
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc30 	bl	8006b7e <USBH_SetFeature>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 80b9 	bne.w	8006498 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	220a      	movs	r2, #10
 800632a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800632c:	e0b4      	b.n	8006498 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	220a      	movs	r2, #10
 8006332:	701a      	strb	r2, [r3, #0]
      break;
 8006334:	e0b0      	b.n	8006498 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80ad 	beq.w	800649c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	e016      	b.n	800637e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32de      	adds	r2, #222	; 0xde
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	791a      	ldrb	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006362:	429a      	cmp	r2, r3
 8006364:	d108      	bne.n	8006378 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	32de      	adds	r2, #222	; 0xde
 800636c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006376:	e005      	b.n	8006384 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	3301      	adds	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0e5      	beq.n	8006350 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2206      	movs	r2, #6
 80063a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063ac:	2103      	movs	r1, #3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063b2:	e073      	b.n	800649c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	220d      	movs	r2, #13
 80063b8:	701a      	strb	r2, [r3, #0]
      break;
 80063ba:	e06f      	b.n	800649c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	220d      	movs	r2, #13
 80063c0:	701a      	strb	r2, [r3, #0]
      break;
 80063c2:	e06b      	b.n	800649c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d017      	beq.n	80063fe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	220b      	movs	r2, #11
 80063ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063ec:	e058      	b.n	80064a0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d154      	bne.n	80064a0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	220d      	movs	r2, #13
 80063fa:	701a      	strb	r2, [r3, #0]
      break;
 80063fc:	e050      	b.n	80064a0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	220d      	movs	r2, #13
 8006402:	701a      	strb	r2, [r3, #0]
      break;
 8006404:	e04c      	b.n	80064a0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d049      	beq.n	80064a4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
     //   phost->gState = HOST_CLASS_REQUEST;

      }
      break;
 800641c:	e042      	b.n	80064a4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fd8e 	bl	8005f48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800645a:	2105      	movs	r1, #5
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fe2b 	bl	80060d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800647a:	e014      	b.n	80064a6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f965 	bl	800774c <USBH_LL_Start>
      break;
 8006482:	e010      	b.n	80064a6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006484:	bf00      	nop
 8006486:	e00e      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 8006488:	bf00      	nop
 800648a:	e00c      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 800648c:	bf00      	nop
 800648e:	e00a      	b.n	80064a6 <USBH_Process+0x3b6>
    break;
 8006490:	bf00      	nop
 8006492:	e008      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 8006494:	bf00      	nop
 8006496:	e006      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 8006498:	bf00      	nop
 800649a:	e004      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 800649c:	bf00      	nop
 800649e:	e002      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 80064a0:	bf00      	nop
 80064a2:	e000      	b.n	80064a6 <USBH_Process+0x3b6>
      break;
 80064a4:	bf00      	nop
  }
  return USBH_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af04      	add	r7, sp, #16
 80064b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80064bc:	2301      	movs	r3, #1
 80064be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b07      	cmp	r3, #7
 80064c6:	f200 81c1 	bhi.w	800684c <USBH_HandleEnum+0x39c>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <USBH_HandleEnum+0x20>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f1 	.word	0x080064f1
 80064d4:	080065af 	.word	0x080065af
 80064d8:	08006619 	.word	0x08006619
 80064dc:	080066a7 	.word	0x080066a7
 80064e0:	08006711 	.word	0x08006711
 80064e4:	08006781 	.word	0x08006781
 80064e8:	080067c7 	.word	0x080067c7
 80064ec:	0800680d 	.word	0x0800680d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80064f0:	2108      	movs	r1, #8
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa50 	bl	8006998 <USBH_Get_DevDesc>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d130      	bne.n	8006564 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7919      	ldrb	r1, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006526:	b292      	uxth	r2, r2
 8006528:	9202      	str	r2, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 ff35 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	7959      	ldrb	r1, [r3, #5]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800654e:	b292      	uxth	r2, r2
 8006550:	9202      	str	r2, [sp, #8]
 8006552:	2200      	movs	r2, #0
 8006554:	9201      	str	r2, [sp, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4603      	mov	r3, r0
 800655a:	2200      	movs	r2, #0
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 ff21 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006562:	e175      	b.n	8006850 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	2b03      	cmp	r3, #3
 8006568:	f040 8172 	bne.w	8006850 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006572:	3301      	adds	r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006582:	2b03      	cmp	r3, #3
 8006584:	d903      	bls.n	800658e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	220d      	movs	r2, #13
 800658a:	701a      	strb	r2, [r3, #0]
      break;
 800658c:	e160      	b.n	8006850 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	795b      	ldrb	r3, [r3, #5]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 ff55 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	791b      	ldrb	r3, [r3, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 ff4f 	bl	8007444 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
      break;
 80065ac:	e150      	b.n	8006850 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80065ae:	2112      	movs	r1, #18
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9f1 	bl	8006998 <USBH_Get_DevDesc>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065c6:	e145      	b.n	8006854 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	f040 8142 	bne.w	8006854 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d903      	bls.n	80065f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	220d      	movs	r2, #13
 80065ee:	701a      	strb	r2, [r3, #0]
      break;
 80065f0:	e130      	b.n	8006854 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	795b      	ldrb	r3, [r3, #5]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 ff23 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	791b      	ldrb	r3, [r3, #4]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 ff1d 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
      break;
 8006616:	e11d      	b.n	8006854 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006618:	2101      	movs	r1, #1
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa68 	bl	8006af0 <USBH_SetAddress>
 8006620:	4603      	mov	r3, r0
 8006622:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d132      	bne.n	8006690 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800662a:	2002      	movs	r0, #2
 800662c:	f001 fa05 	bl	8007a3a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2203      	movs	r2, #3
 800663c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7919      	ldrb	r1, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006652:	b292      	uxth	r2, r2
 8006654:	9202      	str	r2, [sp, #8]
 8006656:	2200      	movs	r2, #0
 8006658:	9201      	str	r2, [sp, #4]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	4603      	mov	r3, r0
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fe9f 	bl	80073a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7959      	ldrb	r1, [r3, #5]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800667a:	b292      	uxth	r2, r2
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	9201      	str	r2, [sp, #4]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4603      	mov	r3, r0
 8006686:	2200      	movs	r2, #0
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fe8b 	bl	80073a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800668e:	e0e3      	b.n	8006858 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b03      	cmp	r3, #3
 8006694:	f040 80e0 	bne.w	8006858 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	220d      	movs	r2, #13
 800669c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	705a      	strb	r2, [r3, #1]
      break;
 80066a4:	e0d8      	b.n	8006858 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80066a6:	2109      	movs	r1, #9
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f99d 	bl	80069e8 <USBH_Get_CfgDesc>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2204      	movs	r2, #4
 80066bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80066be:	e0cd      	b.n	800685c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	f040 80ca 	bne.w	800685c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ce:	3301      	adds	r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d903      	bls.n	80066ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	220d      	movs	r2, #13
 80066e6:	701a      	strb	r2, [r3, #0]
      break;
 80066e8:	e0b8      	b.n	800685c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	795b      	ldrb	r3, [r3, #5]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fea7 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	791b      	ldrb	r3, [r3, #4]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fea1 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
      break;
 800670e:	e0a5      	b.n	800685c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f965 	bl	80069e8 <USBH_Get_CfgDesc>
 800671e:	4603      	mov	r3, r0
 8006720:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2205      	movs	r2, #5
 800672c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800672e:	e097      	b.n	8006860 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	2b03      	cmp	r3, #3
 8006734:	f040 8094 	bne.w	8006860 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800673e:	3301      	adds	r3, #1
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800674e:	2b03      	cmp	r3, #3
 8006750:	d903      	bls.n	800675a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	220d      	movs	r2, #13
 8006756:	701a      	strb	r2, [r3, #0]
      break;
 8006758:	e082      	b.n	8006860 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	795b      	ldrb	r3, [r3, #5]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fe6f 	bl	8007444 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	791b      	ldrb	r3, [r3, #4]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fe69 	bl	8007444 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
      break;
 800677e:	e06f      	b.n	8006860 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006786:	2b00      	cmp	r3, #0
 8006788:	d019      	beq.n	80067be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006796:	23ff      	movs	r3, #255	; 0xff
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f949 	bl	8006a30 <USBH_Get_StringDesc>
 800679e:	4603      	mov	r3, r0
 80067a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2206      	movs	r2, #6
 80067ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067ae:	e059      	b.n	8006864 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d156      	bne.n	8006864 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2206      	movs	r2, #6
 80067ba:	705a      	strb	r2, [r3, #1]
      break;
 80067bc:	e052      	b.n	8006864 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2206      	movs	r2, #6
 80067c2:	705a      	strb	r2, [r3, #1]
      break;
 80067c4:	e04e      	b.n	8006864 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d019      	beq.n	8006804 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80067dc:	23ff      	movs	r3, #255	; 0xff
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f926 	bl	8006a30 <USBH_Get_StringDesc>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2207      	movs	r2, #7
 80067f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067f4:	e038      	b.n	8006868 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d135      	bne.n	8006868 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2207      	movs	r2, #7
 8006800:	705a      	strb	r2, [r3, #1]
      break;
 8006802:	e031      	b.n	8006868 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2207      	movs	r2, #7
 8006808:	705a      	strb	r2, [r3, #1]
      break;
 800680a:	e02d      	b.n	8006868 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006812:	2b00      	cmp	r3, #0
 8006814:	d017      	beq.n	8006846 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006822:	23ff      	movs	r3, #255	; 0xff
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f903 	bl	8006a30 <USBH_Get_StringDesc>
 800682a:	4603      	mov	r3, r0
 800682c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006838:	e018      	b.n	800686c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d115      	bne.n	800686c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e012      	b.n	800686c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
      break;
 800684a:	e00f      	b.n	800686c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800684c:	bf00      	nop
 800684e:	e00e      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006850:	bf00      	nop
 8006852:	e00c      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006854:	bf00      	nop
 8006856:	e00a      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006858:	bf00      	nop
 800685a:	e008      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 800685c:	bf00      	nop
 800685e:	e006      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006860:	bf00      	nop
 8006862:	e004      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006864:	bf00      	nop
 8006866:	e002      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 8006868:	bf00      	nop
 800686a:	e000      	b.n	800686e <USBH_HandleEnum+0x3be>
      break;
 800686c:	bf00      	nop
  }
  return Status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f804 	bl	80068ba <USBH_HandleSof>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b0b      	cmp	r3, #11
 80068ca:	d10a      	bne.n	80068e2 <USBH_HandleSof+0x28>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
  }
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80068fa:	bf00      	nop
}
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006916:	bf00      	nop
}
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 ff06 	bl	8007782 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fd61 	bl	8007444 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fd5b 	bl	8007444 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af02      	add	r7, sp, #8
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b6:	2100      	movs	r1, #0
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f864 	bl	8006a86 <USBH_GetDescriptor>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	b292      	uxth	r2, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	f000 f8f4 	bl	8006bc6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	331c      	adds	r3, #28
 80069f8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a04:	2100      	movs	r1, #0
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f83d 	bl	8006a86 <USBH_GetDescriptor>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	72fb      	strb	r3, [r7, #11]
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a1c:	887a      	ldrh	r2, [r7, #2]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f940 	bl	8006ca6 <USBH_ParseCfgDesc>
  }

  return status;
 8006a26:	7afb      	ldrb	r3, [r7, #11]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	72fb      	strb	r3, [r7, #11]
 8006a40:	4613      	mov	r3, r2
 8006a42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a4c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006a54:	893b      	ldrh	r3, [r7, #8]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f812 	bl	8006a86 <USBH_GetDescriptor>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a72:	893a      	ldrh	r2, [r7, #8]
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa13 	bl	8006ea2 <USBH_ParseStringDesc>
  }

  return status;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	72fb      	strb	r3, [r7, #11]
 8006a94:	4613      	mov	r3, r2
 8006a96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	789b      	ldrb	r3, [r3, #2]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d11c      	bne.n	8006ada <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2206      	movs	r2, #6
 8006ab0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	893a      	ldrh	r2, [r7, #8]
 8006ab6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ac2:	d104      	bne.n	8006ace <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f240 4209 	movw	r2, #1033	; 0x409
 8006aca:	829a      	strh	r2, [r3, #20]
 8006acc:	e002      	b.n	8006ad4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8b3a      	ldrh	r2, [r7, #24]
 8006ad8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006ada:	8b3b      	ldrh	r3, [r7, #24]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fa2c 	bl	8006f3e <USBH_CtlReq>
 8006ae6:	4603      	mov	r3, r0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	789b      	ldrb	r3, [r3, #2]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d10f      	bne.n	8006b24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2205      	movs	r2, #5
 8006b0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b24:	2200      	movs	r2, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa08 	bl	8006f3e <USBH_CtlReq>
 8006b2e:	4603      	mov	r3, r0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10e      	bne.n	8006b6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2209      	movs	r2, #9
 8006b56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9e5 	bl	8006f3e <USBH_CtlReq>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	789b      	ldrb	r3, [r3, #2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d10f      	bne.n	8006bb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9c1 	bl	8006f3e <USBH_CtlReq>
 8006bbc:	4603      	mov	r3, r0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785a      	ldrb	r2, [r3, #1]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	3302      	adds	r3, #2
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	3303      	adds	r3, #3
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	791a      	ldrb	r2, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	795a      	ldrb	r2, [r3, #5]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	799a      	ldrb	r2, [r3, #6]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	79da      	ldrb	r2, [r3, #7]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d939      	bls.n	8006c9a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	3309      	adds	r3, #9
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	330a      	adds	r3, #10
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	330b      	adds	r3, #11
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	330c      	adds	r3, #12
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	330d      	adds	r3, #13
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	7b9a      	ldrb	r2, [r3, #14]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7bda      	ldrb	r2, [r3, #15]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	7c1a      	ldrb	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	7c5a      	ldrb	r2, [r3, #17]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	745a      	strb	r2, [r3, #17]
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08a      	sub	sp, #40	; 0x28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	785a      	ldrb	r2, [r3, #1]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3302      	adds	r3, #2
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3303      	adds	r3, #3
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	791a      	ldrb	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	795a      	ldrb	r2, [r3, #5]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	799a      	ldrb	r2, [r3, #6]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	79da      	ldrb	r2, [r3, #7]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	7a1a      	ldrb	r2, [r3, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b09      	cmp	r3, #9
 8006d20:	d95f      	bls.n	8006de2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d22:	2309      	movs	r3, #9
 8006d24:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d2a:	e051      	b.n	8006dd0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d2c:	f107 0316 	add.w	r3, r7, #22
 8006d30:	4619      	mov	r1, r3
 8006d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d34:	f000 f8e8 	bl	8006f08 <USBH_GetNextDesc>
 8006d38:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d146      	bne.n	8006dd0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d46:	221a      	movs	r2, #26
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	3302      	adds	r3, #2
 8006d54:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d58:	69f8      	ldr	r0, [r7, #28]
 8006d5a:	f000 f846 	bl	8006dea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d68:	e022      	b.n	8006db0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d6a:	f107 0316 	add.w	r3, r7, #22
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d72:	f000 f8c9 	bl	8006f08 <USBH_GetNextDesc>
 8006d76:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d117      	bne.n	8006db0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d88:	3201      	adds	r2, #1
 8006d8a:	00d2      	lsls	r2, r2, #3
 8006d8c:	211a      	movs	r1, #26
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	3308      	adds	r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da0:	69b8      	ldr	r0, [r7, #24]
 8006da2:	f000 f851 	bl	8006e48 <USBH_ParseEPDesc>
            ep_ix++;
 8006da6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006daa:	3301      	adds	r3, #1
 8006dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	791b      	ldrb	r3, [r3, #4]
 8006db4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d204      	bcs.n	8006dc6 <USBH_ParseCfgDesc+0x120>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	885a      	ldrh	r2, [r3, #2]
 8006dc0:	8afb      	ldrh	r3, [r7, #22]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d8d1      	bhi.n	8006d6a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d804      	bhi.n	8006de2 <USBH_ParseCfgDesc+0x13c>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	885a      	ldrh	r2, [r3, #2]
 8006ddc:	8afb      	ldrh	r3, [r7, #22]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d8a4      	bhi.n	8006d2c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006de2:	bf00      	nop
 8006de4:	3728      	adds	r7, #40	; 0x28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781a      	ldrb	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785a      	ldrb	r2, [r3, #1]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	789a      	ldrb	r2, [r3, #2]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	78da      	ldrb	r2, [r3, #3]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	791a      	ldrb	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	795a      	ldrb	r2, [r3, #5]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	799a      	ldrb	r2, [r3, #6]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	79da      	ldrb	r2, [r3, #7]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	7a1a      	ldrb	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	721a      	strb	r2, [r3, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785a      	ldrb	r2, [r3, #1]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	789a      	ldrb	r2, [r3, #2]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	78da      	ldrb	r2, [r3, #3]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3304      	adds	r3, #4
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	3305      	adds	r3, #5
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	799a      	ldrb	r2, [r3, #6]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	719a      	strb	r2, [r3, #6]
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d120      	bne.n	8006efc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	1e9a      	subs	r2, r3, #2
 8006ec0:	88fb      	ldrh	r3, [r7, #6]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	bf28      	it	cs
 8006ec6:	4613      	movcs	r3, r2
 8006ec8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3302      	adds	r3, #2
 8006ece:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	82fb      	strh	r3, [r7, #22]
 8006ed4:	e00b      	b.n	8006eee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006ed6:	8afb      	ldrh	r3, [r7, #22]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ee8:	8afb      	ldrh	r3, [r7, #22]
 8006eea:	3302      	adds	r3, #2
 8006eec:	82fb      	strh	r3, [r7, #22]
 8006eee:	8afa      	ldrh	r2, [r7, #22]
 8006ef0:	8abb      	ldrh	r3, [r7, #20]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d3ef      	bcc.n	8006ed6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
  }
}
 8006efc:	bf00      	nop
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	789b      	ldrb	r3, [r3, #2]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d002      	beq.n	8006f5e <USBH_CtlReq+0x20>
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d00f      	beq.n	8006f7c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f5c:	e027      	b.n	8006fae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2202      	movs	r2, #2
 8006f74:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7a:	e018      	b.n	8006fae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f81b 	bl	8006fb8 <USBH_HandleControl>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <USBH_CtlReq+0x54>
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d106      	bne.n	8006fa0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	761a      	strb	r2, [r3, #24]
      break;
 8006f9e:	e005      	b.n	8006fac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d102      	bne.n	8006fac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	709a      	strb	r2, [r3, #2]
      break;
 8006fac:	bf00      	nop
  }
  return status;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	7e1b      	ldrb	r3, [r3, #24]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	2b0a      	cmp	r3, #10
 8006fd0:	f200 8156 	bhi.w	8007280 <USBH_HandleControl+0x2c8>
 8006fd4:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <USBH_HandleControl+0x24>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08007009 	.word	0x08007009
 8006fe0:	08007023 	.word	0x08007023
 8006fe4:	0800708d 	.word	0x0800708d
 8006fe8:	080070b3 	.word	0x080070b3
 8006fec:	080070eb 	.word	0x080070eb
 8006ff0:	08007115 	.word	0x08007115
 8006ff4:	08007167 	.word	0x08007167
 8006ff8:	08007189 	.word	0x08007189
 8006ffc:	080071c5 	.word	0x080071c5
 8007000:	080071eb 	.word	0x080071eb
 8007004:	08007229 	.word	0x08007229
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f103 0110 	add.w	r1, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	795b      	ldrb	r3, [r3, #5]
 8007012:	461a      	mov	r2, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f943 	bl	80072a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	761a      	strb	r2, [r3, #24]
      break;
 8007020:	e139      	b.n	8007296 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	795b      	ldrb	r3, [r3, #5]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fc99 	bl	8007960 <USBH_LL_GetURBState>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d11e      	bne.n	8007076 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	7c1b      	ldrb	r3, [r3, #16]
 800703c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007040:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8adb      	ldrh	r3, [r3, #22]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800704a:	7b7b      	ldrb	r3, [r7, #13]
 800704c:	2b80      	cmp	r3, #128	; 0x80
 800704e:	d103      	bne.n	8007058 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2203      	movs	r2, #3
 8007054:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007056:	e115      	b.n	8007284 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2205      	movs	r2, #5
 800705c:	761a      	strb	r2, [r3, #24]
      break;
 800705e:	e111      	b.n	8007284 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007060:	7b7b      	ldrb	r3, [r7, #13]
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d103      	bne.n	800706e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2209      	movs	r2, #9
 800706a:	761a      	strb	r2, [r3, #24]
      break;
 800706c:	e10a      	b.n	8007284 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2207      	movs	r2, #7
 8007072:	761a      	strb	r2, [r3, #24]
      break;
 8007074:	e106      	b.n	8007284 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b04      	cmp	r3, #4
 800707a:	d003      	beq.n	8007084 <USBH_HandleControl+0xcc>
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b02      	cmp	r3, #2
 8007080:	f040 8100 	bne.w	8007284 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	220b      	movs	r2, #11
 8007088:	761a      	strb	r2, [r3, #24]
      break;
 800708a:	e0fb      	b.n	8007284 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6899      	ldr	r1, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	899a      	ldrh	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	791b      	ldrb	r3, [r3, #4]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f93a 	bl	800731e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2204      	movs	r2, #4
 80070ae:	761a      	strb	r2, [r3, #24]
      break;
 80070b0:	e0f1      	b.n	8007296 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fc51 	bl	8007960 <USBH_LL_GetURBState>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d102      	bne.n	80070ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2209      	movs	r2, #9
 80070cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	d102      	bne.n	80070da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070d8:	e0d6      	b.n	8007288 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	f040 80d3 	bne.w	8007288 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	220b      	movs	r2, #11
 80070e6:	761a      	strb	r2, [r3, #24]
      break;
 80070e8:	e0ce      	b.n	8007288 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6899      	ldr	r1, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	899a      	ldrh	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	795b      	ldrb	r3, [r3, #5]
 80070f6:	2001      	movs	r0, #1
 80070f8:	9000      	str	r0, [sp, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8ea 	bl	80072d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2206      	movs	r2, #6
 8007110:	761a      	strb	r2, [r3, #24]
      break;
 8007112:	e0c0      	b.n	8007296 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	795b      	ldrb	r3, [r3, #5]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fc20 	bl	8007960 <USBH_LL_GetURBState>
 8007120:	4603      	mov	r3, r0
 8007122:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d103      	bne.n	8007132 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2207      	movs	r2, #7
 800712e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007130:	e0ac      	b.n	800728c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	2b05      	cmp	r3, #5
 8007136:	d105      	bne.n	8007144 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	220c      	movs	r2, #12
 800713c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800713e:	2303      	movs	r3, #3
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	e0a3      	b.n	800728c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d103      	bne.n	8007152 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2205      	movs	r2, #5
 800714e:	761a      	strb	r2, [r3, #24]
      break;
 8007150:	e09c      	b.n	800728c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b04      	cmp	r3, #4
 8007156:	f040 8099 	bne.w	800728c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220b      	movs	r2, #11
 800715e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e092      	b.n	800728c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f8d5 	bl	800731e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2208      	movs	r2, #8
 8007184:	761a      	strb	r2, [r3, #24]

      break;
 8007186:	e086      	b.n	8007296 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	791b      	ldrb	r3, [r3, #4]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fbe6 	bl	8007960 <USBH_LL_GetURBState>
 8007194:	4603      	mov	r3, r0
 8007196:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d105      	bne.n	80071aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220d      	movs	r2, #13
 80071a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071a8:	e072      	b.n	8007290 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d103      	bne.n	80071b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	220b      	movs	r2, #11
 80071b4:	761a      	strb	r2, [r3, #24]
      break;
 80071b6:	e06b      	b.n	8007290 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d168      	bne.n	8007290 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80071be:	2303      	movs	r3, #3
 80071c0:	73fb      	strb	r3, [r7, #15]
      break;
 80071c2:	e065      	b.n	8007290 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	795b      	ldrb	r3, [r3, #5]
 80071c8:	2201      	movs	r2, #1
 80071ca:	9200      	str	r2, [sp, #0]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f87f 	bl	80072d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220a      	movs	r2, #10
 80071e6:	761a      	strb	r2, [r3, #24]
      break;
 80071e8:	e055      	b.n	8007296 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fbb5 	bl	8007960 <USBH_LL_GetURBState>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d105      	bne.n	800720c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	220d      	movs	r2, #13
 8007208:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800720a:	e043      	b.n	8007294 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2209      	movs	r2, #9
 8007216:	761a      	strb	r2, [r3, #24]
      break;
 8007218:	e03c      	b.n	8007294 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b04      	cmp	r3, #4
 800721e:	d139      	bne.n	8007294 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	220b      	movs	r2, #11
 8007224:	761a      	strb	r2, [r3, #24]
      break;
 8007226:	e035      	b.n	8007294 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7e5b      	ldrb	r3, [r3, #25]
 800722c:	3301      	adds	r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	765a      	strb	r2, [r3, #25]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7e5b      	ldrb	r3, [r3, #25]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d806      	bhi.n	800724a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007248:	e025      	b.n	8007296 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007250:	2106      	movs	r1, #6
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	795b      	ldrb	r3, [r3, #5]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8ee 	bl	8007444 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	791b      	ldrb	r3, [r3, #4]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8e8 	bl	8007444 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]
      break;
 800727e:	e00a      	b.n	8007296 <USBH_HandleControl+0x2de>

    default:
      break;
 8007280:	bf00      	nop
 8007282:	e008      	b.n	8007296 <USBH_HandleControl+0x2de>
      break;
 8007284:	bf00      	nop
 8007286:	e006      	b.n	8007296 <USBH_HandleControl+0x2de>
      break;
 8007288:	bf00      	nop
 800728a:	e004      	b.n	8007296 <USBH_HandleControl+0x2de>
      break;
 800728c:	bf00      	nop
 800728e:	e002      	b.n	8007296 <USBH_HandleControl+0x2de>
      break;
 8007290:	bf00      	nop
 8007292:	e000      	b.n	8007296 <USBH_HandleControl+0x2de>
      break;
 8007294:	bf00      	nop
  }

  return status;
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072ae:	79f9      	ldrb	r1, [r7, #7]
 80072b0:	2300      	movs	r3, #0
 80072b2:	9303      	str	r3, [sp, #12]
 80072b4:	2308      	movs	r3, #8
 80072b6:	9302      	str	r3, [sp, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	2300      	movs	r3, #0
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	2200      	movs	r2, #0
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fb1a 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af04      	add	r7, sp, #16
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	4611      	mov	r1, r2
 80072e0:	461a      	mov	r2, r3
 80072e2:	460b      	mov	r3, r1
 80072e4:	80fb      	strh	r3, [r7, #6]
 80072e6:	4613      	mov	r3, r2
 80072e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072f8:	7979      	ldrb	r1, [r7, #5]
 80072fa:	7e3b      	ldrb	r3, [r7, #24]
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	9302      	str	r3, [sp, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	2301      	movs	r3, #1
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	2300      	movs	r3, #0
 800730c:	2200      	movs	r2, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 faf5 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b088      	sub	sp, #32
 8007322:	af04      	add	r7, sp, #16
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4611      	mov	r1, r2
 800732a:	461a      	mov	r2, r3
 800732c:	460b      	mov	r3, r1
 800732e:	80fb      	strh	r3, [r7, #6]
 8007330:	4613      	mov	r3, r2
 8007332:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007334:	7979      	ldrb	r1, [r7, #5]
 8007336:	2300      	movs	r3, #0
 8007338:	9303      	str	r3, [sp, #12]
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	2301      	movs	r3, #1
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2300      	movs	r3, #0
 8007348:	2201      	movs	r2, #1
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fad7 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007350:	2300      	movs	r3, #0

}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b088      	sub	sp, #32
 800735e:	af04      	add	r7, sp, #16
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	4611      	mov	r1, r2
 8007366:	461a      	mov	r2, r3
 8007368:	460b      	mov	r3, r1
 800736a:	80fb      	strh	r3, [r7, #6]
 800736c:	4613      	mov	r3, r2
 800736e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	763b      	strb	r3, [r7, #24]
  }

 // do_ping = 1U;

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800737e:	7979      	ldrb	r1, [r7, #5]
 8007380:	7e3b      	ldrb	r3, [r7, #24]
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2301      	movs	r3, #1
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2302      	movs	r3, #2
 8007392:	2200      	movs	r2, #0
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fab2 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af04      	add	r7, sp, #16
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	70fb      	strb	r3, [r7, #3]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70bb      	strb	r3, [r7, #2]
 80073ba:	4613      	mov	r3, r2
 80073bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073be:	7878      	ldrb	r0, [r7, #1]
 80073c0:	78ba      	ldrb	r2, [r7, #2]
 80073c2:	78f9      	ldrb	r1, [r7, #3]
 80073c4:	8b3b      	ldrh	r3, [r7, #24]
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	7d3b      	ldrb	r3, [r7, #20]
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	7c3b      	ldrb	r3, [r7, #16]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4603      	mov	r3, r0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa45 	bl	8007862 <USBH_LL_OpenPipe>

  return USBH_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa64 	bl	80078c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	460b      	mov	r3, r1
 800740c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f836 	bl	8007480 <USBH_GetFreePipe>
 8007414:	4603      	mov	r3, r0
 8007416:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800741e:	4293      	cmp	r3, r2
 8007420:	d00a      	beq.n	8007438 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	89fb      	ldrh	r3, [r7, #14]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	33e0      	adds	r3, #224	; 0xe0
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	b2db      	uxtb	r3, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	2b0a      	cmp	r3, #10
 8007454:	d80d      	bhi.n	8007472 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	33e0      	adds	r3, #224	; 0xe0
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	33e0      	adds	r3, #224	; 0xe0
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
 8007490:	e00f      	b.n	80074b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	33e0      	adds	r3, #224	; 0xe0
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	e007      	b.n	80074bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b0a      	cmp	r3, #10
 80074b6:	d9ec      	bls.n	8007492 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074cc:	2201      	movs	r2, #1
 80074ce:	490e      	ldr	r1, [pc, #56]	; (8007508 <MX_USB_HOST_Init+0x40>)
 80074d0:	480e      	ldr	r0, [pc, #56]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074d2:	f7fe fcff 	bl	8005ed4 <USBH_Init>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074dc:	f7f9 f8e8 	bl	80006b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 80074e0:	490b      	ldr	r1, [pc, #44]	; (8007510 <MX_USB_HOST_Init+0x48>)
 80074e2:	480a      	ldr	r0, [pc, #40]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074e4:	f7fe fd84 	bl	8005ff0 <USBH_RegisterClass>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074ee:	f7f9 f8df 	bl	80006b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074f2:	4806      	ldr	r0, [pc, #24]	; (800750c <MX_USB_HOST_Init+0x44>)
 80074f4:	f7fe fdec 	bl	80060d0 <USBH_Start>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074fe:	f7f9 f8d7 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	08007529 	.word	0x08007529
 800750c:	200008f8 	.word	0x200008f8
 8007510:	2000000c 	.word	0x2000000c

08007514 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <MX_USB_HOST_Process+0x10>)
 800751a:	f7fe fde9 	bl	80060f0 <USBH_Process>
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200008f8 	.word	0x200008f8

08007528 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	3b01      	subs	r3, #1
 8007538:	2b04      	cmp	r3, #4
 800753a:	d819      	bhi.n	8007570 <USBH_UserProcess+0x48>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBH_UserProcess+0x1c>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007571 	.word	0x08007571
 8007548:	08007561 	.word	0x08007561
 800754c:	08007571 	.word	0x08007571
 8007550:	08007569 	.word	0x08007569
 8007554:	08007559 	.word	0x08007559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <USBH_UserProcess+0x58>)
 800755a:	2203      	movs	r2, #3
 800755c:	701a      	strb	r2, [r3, #0]
  break;
 800755e:	e008      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <USBH_UserProcess+0x58>)
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
  break;
 8007566:	e004      	b.n	8007572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <USBH_UserProcess+0x58>)
 800756a:	2201      	movs	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
  break;
 800756e:	e000      	b.n	8007572 <USBH_UserProcess+0x4a>

  default:
  break;
 8007570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	200000b4 	.word	0x200000b4

08007584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a4:	d13a      	bne.n	800761c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6313      	str	r3, [r2, #48]	; 0x30
 80075b6:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80075c2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80075c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c8:	2302      	movs	r3, #2
 80075ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d0:	2303      	movs	r3, #3
 80075d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075d4:	230a      	movs	r3, #10
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d8:	f107 0314 	add.w	r3, r7, #20
 80075dc:	4619      	mov	r1, r3
 80075de:	4812      	ldr	r0, [pc, #72]	; (8007628 <HAL_HCD_MspInit+0xa4>)
 80075e0:	f7f9 fb60 	bl	8000ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075e4:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ee:	6353      	str	r3, [r2, #52]	; 0x34
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 80075fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <HAL_HCD_MspInit+0xa0>)
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	2043      	movs	r0, #67	; 0x43
 8007612:	f7f9 faee 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007616:	2043      	movs	r0, #67	; 0x43
 8007618:	f7f9 fb07 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800761c:	bf00      	nop
 800761e:	3728      	adds	r7, #40	; 0x28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40023800 	.word	0x40023800
 8007628:	40020000 	.word	0x40020000

0800762c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f92b 	bl	8006896 <USBH_LL_IncTimer>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff f963 	bl	8006922 <USBH_LL_Connect>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f96c 	bl	8006950 <USBH_LL_Disconnect>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
 800768c:	4613      	mov	r3, r2
 800768e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f91d 	bl	80068ea <USBH_LL_PortEnabled>
} 
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f91d 	bl	8006906 <USBH_LL_PortDisabled>
} 
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d12a      	bne.n	800773c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076e6:	4a18      	ldr	r2, [pc, #96]	; (8007748 <USBH_LL_Init+0x74>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a15      	ldr	r2, [pc, #84]	; (8007748 <USBH_LL_Init+0x74>)
 80076f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <USBH_LL_Init+0x74>)
 80076f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <USBH_LL_Init+0x74>)
 8007700:	2208      	movs	r2, #8
 8007702:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <USBH_LL_Init+0x74>)
 8007706:	2201      	movs	r2, #1
 8007708:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <USBH_LL_Init+0x74>)
 800770c:	2200      	movs	r2, #0
 800770e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <USBH_LL_Init+0x74>)
 8007712:	2202      	movs	r2, #2
 8007714:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <USBH_LL_Init+0x74>)
 8007718:	2201      	movs	r2, #1
 800771a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800771c:	480a      	ldr	r0, [pc, #40]	; (8007748 <USBH_LL_Init+0x74>)
 800771e:	f7f9 fc76 	bl	800100e <HAL_HCD_Init>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007728:	f7f8 ffc2 	bl	80006b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800772c:	4806      	ldr	r0, [pc, #24]	; (8007748 <USBH_LL_Init+0x74>)
 800772e:	f7fa f879 	bl	8001824 <HAL_HCD_GetCurrentFrame>
 8007732:	4603      	mov	r3, r0
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff f89e 	bl	8006878 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000cd0 	.word	0x20000cd0

0800774c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007762:	4618      	mov	r0, r3
 8007764:	f7f9 ffe6 	bl	8001734 <HAL_HCD_Start>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f96e 	bl	8007a50 <USBH_Get_USB_Status>
 8007774:	4603      	mov	r3, r0
 8007776:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007778:	7bbb      	ldrb	r3, [r7, #14]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007798:	4618      	mov	r0, r3
 800779a:	f7f9 ffee 	bl	800177a <HAL_HCD_Stop>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 f953 	bl	8007a50 <USBH_Get_USB_Status>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa f838 	bl	8001840 <HAL_HCD_GetCurrentSpeed>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00c      	beq.n	80077f0 <USBH_LL_GetSpeed+0x38>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d80d      	bhi.n	80077f6 <USBH_LL_GetSpeed+0x3e>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <USBH_LL_GetSpeed+0x2c>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d003      	beq.n	80077ea <USBH_LL_GetSpeed+0x32>
 80077e2:	e008      	b.n	80077f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	e008      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
    break;
 80077ee:	e005      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077f0:	2302      	movs	r3, #2
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	e002      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
    break;
 80077fa:	bf00      	nop
  }
  return  speed;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800781c:	4618      	mov	r0, r3
 800781e:	f7f9 ffc9 	bl	80017b4 <HAL_HCD_ResetPort>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f911 	bl	8007a50 <USBH_Get_USB_Status>
 800782e:	4603      	mov	r3, r0
 8007830:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007832:	7bbb      	ldrb	r3, [r7, #14]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f7f9 ffd1 	bl	80017fa <HAL_HCD_HC_GetXferCount>
 8007858:	4603      	mov	r3, r0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007862:	b590      	push	{r4, r7, lr}
 8007864:	b089      	sub	sp, #36	; 0x24
 8007866:	af04      	add	r7, sp, #16
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	461a      	mov	r2, r3
 8007870:	4603      	mov	r3, r0
 8007872:	70fb      	strb	r3, [r7, #3]
 8007874:	460b      	mov	r3, r1
 8007876:	70bb      	strb	r3, [r7, #2]
 8007878:	4613      	mov	r3, r2
 800787a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800788a:	787c      	ldrb	r4, [r7, #1]
 800788c:	78ba      	ldrb	r2, [r7, #2]
 800788e:	78f9      	ldrb	r1, [r7, #3]
 8007890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007892:	9302      	str	r3, [sp, #8]
 8007894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4623      	mov	r3, r4
 80078a2:	f7f9 fc16 	bl	80010d2 <HAL_HCD_HC_Init>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f8cf 	bl	8007a50 <USBH_Get_USB_Status>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd90      	pop	{r4, r7, pc}

080078c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 fc8f 	bl	8001202 <HAL_HCD_HC_Halt>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f8b0 	bl	8007a50 <USBH_Get_USB_Status>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b089      	sub	sp, #36	; 0x24
 8007902:	af04      	add	r7, sp, #16
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	461a      	mov	r2, r3
 800790c:	4603      	mov	r3, r0
 800790e:	70fb      	strb	r3, [r7, #3]
 8007910:	460b      	mov	r3, r1
 8007912:	70bb      	strb	r3, [r7, #2]
 8007914:	4613      	mov	r3, r2
 8007916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007926:	787c      	ldrb	r4, [r7, #1]
 8007928:	78ba      	ldrb	r2, [r7, #2]
 800792a:	78f9      	ldrb	r1, [r7, #3]
 800792c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4623      	mov	r3, r4
 8007942:	f7f9 fc81 	bl	8001248 <HAL_HCD_HC_SubmitRequest>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f87f 	bl	8007a50 <USBH_Get_USB_Status>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007956:	7bbb      	ldrb	r3, [r7, #14]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	bd90      	pop	{r4, r7, pc}

08007960 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7f9 ff2a 	bl	80017d0 <HAL_HCD_HC_GetURBState>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_FS)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10f      	bne.n	80079be <USBH_LL_DriverVBUS+0x36>
  {
    if (state == 0)
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <USBH_LL_DriverVBUS+0x2a>
    {
      /* Drive high Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80079a4:	2200      	movs	r2, #0
 80079a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079aa:	4809      	ldr	r0, [pc, #36]	; (80079d0 <USBH_LL_DriverVBUS+0x48>)
 80079ac:	f7f9 fb16 	bl	8000fdc <HAL_GPIO_WritePin>
 80079b0:	e005      	b.n	80079be <USBH_LL_DriverVBUS+0x36>
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80079b2:	2200      	movs	r2, #0
 80079b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079b8:	4805      	ldr	r0, [pc, #20]	; (80079d0 <USBH_LL_DriverVBUS+0x48>)
 80079ba:	f7f9 fb0f 	bl	8000fdc <HAL_GPIO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80079be:	20c8      	movs	r0, #200	; 0xc8
 80079c0:	f7f9 f818 	bl	80009f4 <HAL_Delay>
  return USBH_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	40020000 	.word	0x40020000

080079d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
 80079e0:	4613      	mov	r3, r2
 80079e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079ec:	78fa      	ldrb	r2, [r7, #3]
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	440b      	add	r3, r1
 80079fa:	333b      	adds	r3, #59	; 0x3b
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3350      	adds	r3, #80	; 0x50
 8007a12:	78ba      	ldrb	r2, [r7, #2]
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e009      	b.n	8007a2c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	440b      	add	r3, r1
 8007a26:	3351      	adds	r3, #81	; 0x51
 8007a28:	78ba      	ldrb	r2, [r7, #2]
 8007a2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7f8 ffd6 	bl	80009f4 <HAL_Delay>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d817      	bhi.n	8007a94 <USBH_Get_USB_Status+0x44>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <USBH_Get_USB_Status+0x1c>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a7d 	.word	0x08007a7d
 8007a70:	08007a83 	.word	0x08007a83
 8007a74:	08007a89 	.word	0x08007a89
 8007a78:	08007a8f 	.word	0x08007a8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a80:	e00b      	b.n	8007a9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	73fb      	strb	r3, [r7, #15]
    break;
 8007a86:	e008      	b.n	8007a9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8c:	e005      	b.n	8007a9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	73fb      	strb	r3, [r7, #15]
    break;
 8007a92:	e002      	b.n	8007a9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a94:	2302      	movs	r3, #2
 8007a96:	73fb      	strb	r3, [r7, #15]
    break;
 8007a98:	bf00      	nop
  }
  return usb_status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <__errno>:
 8007aa8:	4b01      	ldr	r3, [pc, #4]	; (8007ab0 <__errno+0x8>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2000002c 	.word	0x2000002c

08007ab4 <__libc_init_array>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	; (8007aec <__libc_init_array+0x38>)
 8007ab8:	4c0d      	ldr	r4, [pc, #52]	; (8007af0 <__libc_init_array+0x3c>)
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	42a6      	cmp	r6, r4
 8007ac2:	d109      	bne.n	8007ad8 <__libc_init_array+0x24>
 8007ac4:	4d0b      	ldr	r5, [pc, #44]	; (8007af4 <__libc_init_array+0x40>)
 8007ac6:	4c0c      	ldr	r4, [pc, #48]	; (8007af8 <__libc_init_array+0x44>)
 8007ac8:	f000 f91e 	bl	8007d08 <_init>
 8007acc:	1b64      	subs	r4, r4, r5
 8007ace:	10a4      	asrs	r4, r4, #2
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	d105      	bne.n	8007ae2 <__libc_init_array+0x2e>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007adc:	4798      	blx	r3
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__libc_init_array+0xc>
 8007ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae6:	4798      	blx	r3
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7f2      	b.n	8007ad2 <__libc_init_array+0x1e>
 8007aec:	08007ee8 	.word	0x08007ee8
 8007af0:	08007ee8 	.word	0x08007ee8
 8007af4:	08007ee8 	.word	0x08007ee8
 8007af8:	08007eec 	.word	0x08007eec

08007afc <malloc>:
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <malloc+0xc>)
 8007afe:	4601      	mov	r1, r0
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f000 b863 	b.w	8007bcc <_malloc_r>
 8007b06:	bf00      	nop
 8007b08:	2000002c 	.word	0x2000002c

08007b0c <free>:
 8007b0c:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <free+0xc>)
 8007b0e:	4601      	mov	r1, r0
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f000 b80b 	b.w	8007b2c <_free_r>
 8007b16:	bf00      	nop
 8007b18:	2000002c 	.word	0x2000002c

08007b1c <memset>:
 8007b1c:	4402      	add	r2, r0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <_free_r>:
 8007b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d048      	beq.n	8007bc4 <_free_r+0x98>
 8007b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b36:	9001      	str	r0, [sp, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b3e:	bfb8      	it	lt
 8007b40:	18e4      	addlt	r4, r4, r3
 8007b42:	f000 f8d3 	bl	8007cec <__malloc_lock>
 8007b46:	4a20      	ldr	r2, [pc, #128]	; (8007bc8 <_free_r+0x9c>)
 8007b48:	9801      	ldr	r0, [sp, #4]
 8007b4a:	6813      	ldr	r3, [r2, #0]
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	b933      	cbnz	r3, 8007b5e <_free_r+0x32>
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	6014      	str	r4, [r2, #0]
 8007b54:	b003      	add	sp, #12
 8007b56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b5a:	f000 b8cd 	b.w	8007cf8 <__malloc_unlock>
 8007b5e:	42a3      	cmp	r3, r4
 8007b60:	d90b      	bls.n	8007b7a <_free_r+0x4e>
 8007b62:	6821      	ldr	r1, [r4, #0]
 8007b64:	1862      	adds	r2, r4, r1
 8007b66:	4293      	cmp	r3, r2
 8007b68:	bf04      	itt	eq
 8007b6a:	681a      	ldreq	r2, [r3, #0]
 8007b6c:	685b      	ldreq	r3, [r3, #4]
 8007b6e:	6063      	str	r3, [r4, #4]
 8007b70:	bf04      	itt	eq
 8007b72:	1852      	addeq	r2, r2, r1
 8007b74:	6022      	streq	r2, [r4, #0]
 8007b76:	602c      	str	r4, [r5, #0]
 8007b78:	e7ec      	b.n	8007b54 <_free_r+0x28>
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	b10b      	cbz	r3, 8007b84 <_free_r+0x58>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d9fa      	bls.n	8007b7a <_free_r+0x4e>
 8007b84:	6811      	ldr	r1, [r2, #0]
 8007b86:	1855      	adds	r5, r2, r1
 8007b88:	42a5      	cmp	r5, r4
 8007b8a:	d10b      	bne.n	8007ba4 <_free_r+0x78>
 8007b8c:	6824      	ldr	r4, [r4, #0]
 8007b8e:	4421      	add	r1, r4
 8007b90:	1854      	adds	r4, r2, r1
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	d1dd      	bne.n	8007b54 <_free_r+0x28>
 8007b98:	681c      	ldr	r4, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	6053      	str	r3, [r2, #4]
 8007b9e:	4421      	add	r1, r4
 8007ba0:	6011      	str	r1, [r2, #0]
 8007ba2:	e7d7      	b.n	8007b54 <_free_r+0x28>
 8007ba4:	d902      	bls.n	8007bac <_free_r+0x80>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	6003      	str	r3, [r0, #0]
 8007baa:	e7d3      	b.n	8007b54 <_free_r+0x28>
 8007bac:	6825      	ldr	r5, [r4, #0]
 8007bae:	1961      	adds	r1, r4, r5
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf04      	itt	eq
 8007bb4:	6819      	ldreq	r1, [r3, #0]
 8007bb6:	685b      	ldreq	r3, [r3, #4]
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	bf04      	itt	eq
 8007bbc:	1949      	addeq	r1, r1, r5
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	6054      	str	r4, [r2, #4]
 8007bc2:	e7c7      	b.n	8007b54 <_free_r+0x28>
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bd30      	pop	{r4, r5, pc}
 8007bc8:	200000b8 	.word	0x200000b8

08007bcc <_malloc_r>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	1ccd      	adds	r5, r1, #3
 8007bd0:	f025 0503 	bic.w	r5, r5, #3
 8007bd4:	3508      	adds	r5, #8
 8007bd6:	2d0c      	cmp	r5, #12
 8007bd8:	bf38      	it	cc
 8007bda:	250c      	movcc	r5, #12
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	4606      	mov	r6, r0
 8007be0:	db01      	blt.n	8007be6 <_malloc_r+0x1a>
 8007be2:	42a9      	cmp	r1, r5
 8007be4:	d903      	bls.n	8007bee <_malloc_r+0x22>
 8007be6:	230c      	movs	r3, #12
 8007be8:	6033      	str	r3, [r6, #0]
 8007bea:	2000      	movs	r0, #0
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bee:	f000 f87d 	bl	8007cec <__malloc_lock>
 8007bf2:	4921      	ldr	r1, [pc, #132]	; (8007c78 <_malloc_r+0xac>)
 8007bf4:	680a      	ldr	r2, [r1, #0]
 8007bf6:	4614      	mov	r4, r2
 8007bf8:	b99c      	cbnz	r4, 8007c22 <_malloc_r+0x56>
 8007bfa:	4f20      	ldr	r7, [pc, #128]	; (8007c7c <_malloc_r+0xb0>)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	b923      	cbnz	r3, 8007c0a <_malloc_r+0x3e>
 8007c00:	4621      	mov	r1, r4
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 f83c 	bl	8007c80 <_sbrk_r>
 8007c08:	6038      	str	r0, [r7, #0]
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 f837 	bl	8007c80 <_sbrk_r>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d123      	bne.n	8007c5e <_malloc_r+0x92>
 8007c16:	230c      	movs	r3, #12
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f000 f86c 	bl	8007cf8 <__malloc_unlock>
 8007c20:	e7e3      	b.n	8007bea <_malloc_r+0x1e>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	1b5b      	subs	r3, r3, r5
 8007c26:	d417      	bmi.n	8007c58 <_malloc_r+0x8c>
 8007c28:	2b0b      	cmp	r3, #11
 8007c2a:	d903      	bls.n	8007c34 <_malloc_r+0x68>
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	441c      	add	r4, r3
 8007c30:	6025      	str	r5, [r4, #0]
 8007c32:	e004      	b.n	8007c3e <_malloc_r+0x72>
 8007c34:	6863      	ldr	r3, [r4, #4]
 8007c36:	42a2      	cmp	r2, r4
 8007c38:	bf0c      	ite	eq
 8007c3a:	600b      	streq	r3, [r1, #0]
 8007c3c:	6053      	strne	r3, [r2, #4]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f000 f85a 	bl	8007cf8 <__malloc_unlock>
 8007c44:	f104 000b 	add.w	r0, r4, #11
 8007c48:	1d23      	adds	r3, r4, #4
 8007c4a:	f020 0007 	bic.w	r0, r0, #7
 8007c4e:	1ac2      	subs	r2, r0, r3
 8007c50:	d0cc      	beq.n	8007bec <_malloc_r+0x20>
 8007c52:	1a1b      	subs	r3, r3, r0
 8007c54:	50a3      	str	r3, [r4, r2]
 8007c56:	e7c9      	b.n	8007bec <_malloc_r+0x20>
 8007c58:	4622      	mov	r2, r4
 8007c5a:	6864      	ldr	r4, [r4, #4]
 8007c5c:	e7cc      	b.n	8007bf8 <_malloc_r+0x2c>
 8007c5e:	1cc4      	adds	r4, r0, #3
 8007c60:	f024 0403 	bic.w	r4, r4, #3
 8007c64:	42a0      	cmp	r0, r4
 8007c66:	d0e3      	beq.n	8007c30 <_malloc_r+0x64>
 8007c68:	1a21      	subs	r1, r4, r0
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 f808 	bl	8007c80 <_sbrk_r>
 8007c70:	3001      	adds	r0, #1
 8007c72:	d1dd      	bne.n	8007c30 <_malloc_r+0x64>
 8007c74:	e7cf      	b.n	8007c16 <_malloc_r+0x4a>
 8007c76:	bf00      	nop
 8007c78:	200000b8 	.word	0x200000b8
 8007c7c:	200000bc 	.word	0x200000bc

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f8 fdd4 	bl	8000838 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000f94 	.word	0x20000f94

08007ca0 <strcat>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	7814      	ldrb	r4, [r2, #0]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	3201      	adds	r2, #1
 8007caa:	2c00      	cmp	r4, #0
 8007cac:	d1fa      	bne.n	8007ca4 <strcat+0x4>
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	d1f9      	bne.n	8007cb0 <strcat+0x10>
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <strstr>:
 8007cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc0:	780c      	ldrb	r4, [r1, #0]
 8007cc2:	b164      	cbz	r4, 8007cde <strstr+0x20>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	1c5e      	adds	r6, r3, #1
 8007ccc:	b90a      	cbnz	r2, 8007cd2 <strstr+0x14>
 8007cce:	4610      	mov	r0, r2
 8007cd0:	e005      	b.n	8007cde <strstr+0x20>
 8007cd2:	4294      	cmp	r4, r2
 8007cd4:	d108      	bne.n	8007ce8 <strstr+0x2a>
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007cdc:	b902      	cbnz	r2, 8007ce0 <strstr+0x22>
 8007cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007ce4:	4297      	cmp	r7, r2
 8007ce6:	d0f7      	beq.n	8007cd8 <strstr+0x1a>
 8007ce8:	4633      	mov	r3, r6
 8007cea:	e7ec      	b.n	8007cc6 <strstr+0x8>

08007cec <__malloc_lock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__malloc_lock+0x8>)
 8007cee:	f000 b809 	b.w	8007d04 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	20000f9c 	.word	0x20000f9c

08007cf8 <__malloc_unlock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__malloc_unlock+0x8>)
 8007cfa:	f000 b804 	b.w	8007d06 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	20000f9c 	.word	0x20000f9c

08007d04 <__retarget_lock_acquire_recursive>:
 8007d04:	4770      	bx	lr

08007d06 <__retarget_lock_release_recursive>:
 8007d06:	4770      	bx	lr

08007d08 <_init>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr

08007d14 <_fini>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr
