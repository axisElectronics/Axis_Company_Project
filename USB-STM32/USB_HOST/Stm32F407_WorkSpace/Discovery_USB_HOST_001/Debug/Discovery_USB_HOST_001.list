
Discovery_USB_HOST_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000758c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080078b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f08  20000090  08007940  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  08007940  00020f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001924e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000362b  00000000  00000000  0003930e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  0003c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  0003d680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ff0  00000000  00000000  0003e258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e527  00000000  00000000  00062248  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8682  00000000  00000000  0007076f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003708  00000000  00000000  00138e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076fc 	.word	0x080076fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080076fc 	.word	0x080076fc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 f9fe 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f822 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8b6 	bl	8000668 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004fc:	f006 fcea 	bl	8006ed4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_9600);
 8000500:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000504:	f000 f884 	bl	8000610 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x48>)
 8000510:	f000 fd2e 	bl	8000f70 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 8000514:	f241 3088 	movw	r0, #5000	; 0x1388
 8000518:	f000 fa5c 	bl	80009d4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <main+0x48>)
 8000524:	f000 fd24 	bl	8000f70 <HAL_GPIO_WritePin>

  USBH_HID_KeybdInit(&hUsbHostFS);
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <main+0x4c>)
 800052a:	f004 fb47 	bl	8004bbc <USBH_HID_KeybdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052e:	f006 fcf7 	bl	8006f20 <MX_USB_HOST_Process>
 8000532:	e7fc      	b.n	800052e <main+0x42>
 8000534:	40020000 	.word	0x40020000
 8000538:	200008f8 	.word	0x200008f8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 ffea 	bl	8007524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	; 0xa8
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 f9df 	bl	8002984 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005cc:	f000 f874 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc38 	bl	8002e64 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fa:	f000 f85d 	bl	80006b8 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x50>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_USART2_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000638:	220c      	movs	r2, #12
 800063a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_USART2_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x50>)
 800064a:	f002 fdfd 	bl	8003248 <HAL_UART_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000654:	f000 f830 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000c4 	.word	0x200000c4
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_GPIO_Init+0x4c>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_GPIO_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_GPIO_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <MX_GPIO_Init+0x4c>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_GPIO_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_UART_MspInit+0x84>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d12b      	bne.n	8000792 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_UART_MspInit+0x88>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <HAL_UART_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_UART_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000782:	2307      	movs	r3, #7
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <HAL_UART_MspInit+0x8c>)
 800078e:	f000 fa55 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40004400 	.word	0x40004400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f8ca 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <OTG_FS_IRQHandler+0x10>)
 800080a:	f000 fe59 	bl	80014c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000cd0 	.word	0x20000cd0

08000818 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x50>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <_sbrk+0x16>
		heap_end = &end;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <_sbrk+0x50>)
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <_sbrk+0x54>)
 800082c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <_sbrk+0x50>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <_sbrk+0x50>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	466a      	mov	r2, sp
 800083e:	4293      	cmp	r3, r2
 8000840:	d907      	bls.n	8000852 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000842:	f006 fe35 	bl	80074b0 <__errno>
 8000846:	4602      	mov	r2, r0
 8000848:	230c      	movs	r3, #12
 800084a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	e006      	b.n	8000860 <_sbrk+0x48>
	}

	heap_end += incr;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <_sbrk+0x50>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	4a03      	ldr	r2, [pc, #12]	; (8000868 <_sbrk+0x50>)
 800085c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000ac 	.word	0x200000ac
 800086c:	20000f98 	.word	0x20000f98

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SystemInit+0x28>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SystemInit+0x28>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SystemInit+0x28>)
 8000886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088a:	609a      	str	r2, [r3, #8]
#endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008a2:	e003      	b.n	80008ac <LoopCopyDataInit>

080008a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008aa:	3104      	adds	r1, #4

080008ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008b4:	d3f6      	bcc.n	80008a4 <CopyDataInit>
  ldr  r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008b8:	e002      	b.n	80008c0 <LoopFillZerobss>

080008ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008bc:	f842 3b04 	str.w	r3, [r2], #4

080008c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008c4:	d3f9      	bcc.n	80008ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd3 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f006 fdf7 	bl	80074bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fe0d 	bl	80004ec <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008d8:	080078b0 	.word	0x080078b0
  ldr  r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008e0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80008e4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80008e8:	20000f98 	.word	0x20000f98

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f94d 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fed0 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f965 	bl	8000c22 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f92d 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000104 	.word	0x20000104

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000104 	.word	0x20000104

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_Delay+0x40>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000008 	.word	0x20000008

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff8e 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff29 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff3e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff8e 	bl	8000b0c <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff31 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffa2 	bl	8000b74 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	e16b      	b.n	8000f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 815a 	bne.w	8000f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d00b      	beq.n	8000c96 <HAL_GPIO_Init+0x5a>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8a:	2b11      	cmp	r3, #17
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d130      	bne.n	8000cf8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	f003 0201 	and.w	r2, r3, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0xfc>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b12      	cmp	r3, #18
 8000d36:	d123      	bne.n	8000d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0203 	and.w	r2, r3, #3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80b4 	beq.w	8000f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <HAL_GPIO_Init+0x308>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <HAL_GPIO_Init+0x308>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <HAL_GPIO_Init+0x308>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a5a      	ldr	r2, [pc, #360]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a51      	ldr	r2, [pc, #324]	; (8000f4c <HAL_GPIO_Init+0x310>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d02b      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a50      	ldr	r2, [pc, #320]	; (8000f50 <HAL_GPIO_Init+0x314>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d025      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_GPIO_Init+0x318>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d01f      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4e      	ldr	r2, [pc, #312]	; (8000f58 <HAL_GPIO_Init+0x31c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4d      	ldr	r2, [pc, #308]	; (8000f5c <HAL_GPIO_Init+0x320>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <HAL_GPIO_Init+0x324>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4b      	ldr	r2, [pc, #300]	; (8000f64 <HAL_GPIO_Init+0x328>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4a      	ldr	r2, [pc, #296]	; (8000f68 <HAL_GPIO_Init+0x32c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x20a>
 8000e42:	2307      	movs	r3, #7
 8000e44:	e00e      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e46:	2308      	movs	r3, #8
 8000e48:	e00c      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	e00a      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x228>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4934      	ldr	r1, [pc, #208]	; (8000f48 <HAL_GPIO_Init+0x30c>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea6:	4a31      	ldr	r2, [pc, #196]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed0:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f24:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_GPIO_Init+0x330>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f ae90 	bls.w	8000c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	; 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021c00 	.word	0x40021c00
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa4:	b08f      	sub	sp, #60	; 0x3c
 8000fa6:	af0a      	add	r7, sp, #40	; 0x28
 8000fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e054      	b.n	800105e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 ffde 	bl	8006f90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 feec 	bl	8003dd0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	687e      	ldr	r6, [r7, #4]
 8001000:	466d      	mov	r5, sp
 8001002:	f106 0410 	add.w	r4, r6, #16
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001012:	e885 0003 	stmia.w	r5, {r0, r1}
 8001016:	1d33      	adds	r3, r6, #4
 8001018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f002 fe66 	bl	8003cec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fee3 	bl	8003df2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	687e      	ldr	r6, [r7, #4]
 8001034:	466d      	mov	r5, sp
 8001036:	f106 0410 	add.w	r4, r6, #16
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001046:	e885 0003 	stmia.w	r5, {r0, r1}
 800104a:	1d33      	adds	r3, r6, #4
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f002 fff6 	bl	8004040 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001066 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b089      	sub	sp, #36	; 0x24
 800106a:	af04      	add	r7, sp, #16
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4603      	mov	r3, r0
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	460b      	mov	r3, r1
 800107a:	70bb      	strb	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_HCD_HC_Init+0x28>
 800108a:	2302      	movs	r3, #2
 800108c:	e07f      	b.n	800118e <HAL_HCD_HC_Init+0x128>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001096:	78fa      	ldrb	r2, [r7, #3]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	333d      	adds	r3, #61	; 0x3d
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3338      	adds	r3, #56	; 0x38
 80010ba:	787a      	ldrb	r2, [r7, #1]
 80010bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3340      	adds	r3, #64	; 0x40
 80010ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010d0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3339      	adds	r3, #57	; 0x39
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80010e6:	78fa      	ldrb	r2, [r7, #3]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	333f      	adds	r3, #63	; 0x3f
 80010f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010fc:	78fa      	ldrb	r2, [r7, #3]
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	333a      	adds	r3, #58	; 0x3a
 8001114:	4602      	mov	r2, r0
 8001116:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001118:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800111c:	2b00      	cmp	r3, #0
 800111e:	da0a      	bge.n	8001136 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001120:	78fa      	ldrb	r2, [r7, #3]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	333b      	adds	r3, #59	; 0x3b
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e009      	b.n	800114a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001136:	78fa      	ldrb	r2, [r7, #3]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	333b      	adds	r3, #59	; 0x3b
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800114a:	78fa      	ldrb	r2, [r7, #3]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	333c      	adds	r3, #60	; 0x3c
 800115a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800115e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	787c      	ldrb	r4, [r7, #1]
 8001166:	78ba      	ldrb	r2, [r7, #2]
 8001168:	78f9      	ldrb	r1, [r7, #3]
 800116a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4623      	mov	r3, r4
 800117c:	f003 f8e2 	bl	8004344 <USB_HC_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}

08001196 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_HCD_HC_Halt+0x1e>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e00f      	b.n	80011d4 <HAL_HCD_HC_Halt+0x3e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	78fa      	ldrb	r2, [r7, #3]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fb1c 	bl	8004802 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	70fb      	strb	r3, [r7, #3]
 80011ee:	460b      	mov	r3, r1
 80011f0:	70bb      	strb	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80011f6:	78fa      	ldrb	r2, [r7, #3]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	333b      	adds	r3, #59	; 0x3b
 8001206:	78ba      	ldrb	r2, [r7, #2]
 8001208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	333f      	adds	r3, #63	; 0x3f
 800121a:	787a      	ldrb	r2, [r7, #1]
 800121c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800121e:	7c3b      	ldrb	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d114      	bne.n	800124e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3342      	adds	r3, #66	; 0x42
 8001234:	2203      	movs	r2, #3
 8001236:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	333d      	adds	r3, #61	; 0x3d
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e009      	b.n	8001262 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3342      	adds	r3, #66	; 0x42
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	2b03      	cmp	r3, #3
 8001266:	f200 80d6 	bhi.w	8001416 <HAL_HCD_HC_SubmitRequest+0x23a>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <HAL_HCD_HC_SubmitRequest+0x94>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	08001281 	.word	0x08001281
 8001274:	08001401 	.word	0x08001401
 8001278:	080012ed 	.word	0x080012ed
 800127c:	08001377 	.word	0x08001377
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001280:	7c3b      	ldrb	r3, [r7, #16]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f040 80c9 	bne.w	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80c5 	bne.w	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001290:	8b3b      	ldrh	r3, [r7, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3351      	adds	r3, #81	; 0x51
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3351      	adds	r3, #81	; 0x51
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10a      	bne.n	80012d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3342      	adds	r3, #66	; 0x42
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012d4:	e0a1      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3342      	adds	r3, #66	; 0x42
 80012e6:	2202      	movs	r2, #2
 80012e8:	701a      	strb	r2, [r3, #0]
      break;
 80012ea:	e096      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d120      	bne.n	8001334 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	3351      	adds	r3, #81	; 0x51
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10a      	bne.n	800131e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3342      	adds	r3, #66	; 0x42
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800131c:	e07e      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3342      	adds	r3, #66	; 0x42
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
      break;
 8001332:	e073      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001334:	78fa      	ldrb	r2, [r7, #3]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3350      	adds	r3, #80	; 0x50
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10a      	bne.n	8001360 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	3342      	adds	r3, #66	; 0x42
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e05d      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001360:	78fa      	ldrb	r2, [r7, #3]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3342      	adds	r3, #66	; 0x42
 8001370:	2202      	movs	r2, #2
 8001372:	701a      	strb	r2, [r3, #0]
      break;
 8001374:	e052      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001376:	78bb      	ldrb	r3, [r7, #2]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d120      	bne.n	80013be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800137c:	78fa      	ldrb	r2, [r7, #3]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3351      	adds	r3, #81	; 0x51
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10a      	bne.n	80013a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3342      	adds	r3, #66	; 0x42
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80013a6:	e039      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	3342      	adds	r3, #66	; 0x42
 80013b8:	2202      	movs	r2, #2
 80013ba:	701a      	strb	r2, [r3, #0]
      break;
 80013bc:	e02e      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3350      	adds	r3, #80	; 0x50
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10a      	bne.n	80013ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3342      	adds	r3, #66	; 0x42
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
      break;
 80013e8:	e018      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3342      	adds	r3, #66	; 0x42
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
      break;
 80013fe:	e00d      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
      break;
 8001414:	e002      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800141a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	3344      	adds	r3, #68	; 0x44
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	8b39      	ldrh	r1, [r7, #24]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4403      	add	r3, r0
 8001440:	3348      	adds	r3, #72	; 0x48
 8001442:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	335c      	adds	r3, #92	; 0x5c
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	334c      	adds	r3, #76	; 0x4c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3339      	adds	r3, #57	; 0x39
 800147c:	78fa      	ldrb	r2, [r7, #3]
 800147e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	335d      	adds	r3, #93	; 0x5d
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3338      	adds	r3, #56	; 0x38
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	18d1      	adds	r1, r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f003 f852 	bl	8004558 <USB_HC_StartXfer>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop

080014c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fd6f 	bl	8003fba <USB_GetMode>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 80ef 	bne.w	80016c2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fd53 	bl	8003f94 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80e5 	beq.w	80016c0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fd4a 	bl	8003f94 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800150a:	d104      	bne.n	8001516 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fd3a 	bl	8003f94 <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800152a:	d104      	bne.n	8001536 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fd2a 	bl	8003f94 <USB_ReadInterrupts>
 8001540:	4603      	mov	r3, r0
 8001542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800154a:	d104      	bne.n	8001556 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001554:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fd1a 	bl	8003f94 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d103      	bne.n	8001572 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fd0c 	bl	8003f94 <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001586:	d115      	bne.n	80015b4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001590:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d108      	bne.n	80015b4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f005 fd64 	bl	8007070 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fe02 	bl	80041b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fceb 	bl	8003f94 <USB_ReadInterrupts>
 80015be:	4603      	mov	r3, r0
 80015c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d102      	bne.n	80015d0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f001 f966 	bl	800289c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 fcdd 	bl	8003f94 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d106      	bne.n	80015f2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f005 fd27 	bl	8007038 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2208      	movs	r2, #8
 80015f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fccc 	bl	8003f94 <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001606:	d138      	bne.n	800167a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f8e7 	bl	80047e0 <USB_HC_ReadInterrupt>
 8001612:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e025      	b.n	8001666 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d018      	beq.n	8001660 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	015a      	lsls	r2, r3, #5
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001644:	d106      	bne.n	8001654 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8cf 	bl	80017f0 <HCD_HC_IN_IRQHandler>
 8001652:	e005      	b.n	8001660 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fcfd 	bl	800205a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3d4      	bcc.n	800161a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fc88 	bl	8003f94 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b10      	cmp	r3, #16
 800168c:	d101      	bne.n	8001692 <HAL_HCD_IRQHandler+0x1d2>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_HCD_IRQHandler+0x1d4>
 8001692:	2300      	movs	r3, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d014      	beq.n	80016c2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0210 	bic.w	r2, r2, #16
 80016a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 f84b 	bl	8002744 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699a      	ldr	r2, [r3, #24]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0210 	orr.w	r2, r2, #16
 80016bc:	619a      	str	r2, [r3, #24]
 80016be:	e000      	b.n	80016c2 <HAL_HCD_IRQHandler+0x202>
      return;
 80016c0:	bf00      	nop
    }
  }
}
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_HCD_Start+0x16>
 80016da:	2302      	movs	r3, #2
 80016dc:	e013      	b.n	8001706 <HAL_HCD_Start+0x3e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fb5f 	bl	8003dae <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fdc2 	bl	8004280 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_HCD_Stop+0x16>
 8001720:	2302      	movs	r3, #2
 8001722:	e00d      	b.n	8001740 <HAL_HCD_Stop+0x32>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f9a1 	bl	8004a78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fd69 	bl	800422c <USB_ResetPort>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	335c      	adds	r3, #92	; 0x5c
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	334c      	adds	r3, #76	; 0x4c
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fdab 	bl	8004320 <USB_GetCurrentFrame>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fd86 	bl	80042f2 <USB_GetHostSpeed>
 80017e6:	4603      	mov	r3, r0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4413      	add	r3, r2
 8001812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d119      	bne.n	8001854 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	461a      	mov	r2, r3
 800182e:	2304      	movs	r3, #4
 8001830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4413      	add	r3, r2
 800183a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	0151      	lsls	r1, r2, #5
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	440a      	add	r2, r1
 8001848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	60d3      	str	r3, [r2, #12]
 8001852:	e0ce      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4413      	add	r3, r2
 800185c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186a:	d12c      	bne.n	80018c6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001878:	461a      	mov	r2, r3
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	335d      	adds	r3, #93	; 0x5d
 8001890:	2207      	movs	r2, #7
 8001892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	0151      	lsls	r1, r2, #5
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	440a      	add	r2, r1
 80018aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	4611      	mov	r1, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 ff9f 	bl	8004802 <USB_HC_Halt>
 80018c4:	e095      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d109      	bne.n	80018f0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	015a      	lsls	r2, r3, #5
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e8:	461a      	mov	r2, r3
 80018ea:	2320      	movs	r3, #32
 80018ec:	6093      	str	r3, [r2, #8]
 80018ee:	e080      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b08      	cmp	r3, #8
 8001904:	d134      	bne.n	8001970 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4413      	add	r3, r2
 800190e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	0151      	lsls	r1, r2, #5
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	440a      	add	r2, r1
 800191c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	335d      	adds	r3, #93	; 0x5d
 8001936:	2205      	movs	r2, #5
 8001938:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2310      	movs	r3, #16
 800194a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001958:	461a      	mov	r2, r3
 800195a:	2308      	movs	r3, #8
 800195c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f002 ff4a 	bl	8004802 <USB_HC_Halt>
 800196e:	e040      	b.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d134      	bne.n	80019f2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	0151      	lsls	r1, r2, #5
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	440a      	add	r2, r1
 800199e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 ff25 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c4:	461a      	mov	r2, r3
 80019c6:	2310      	movs	r3, #16
 80019c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	335d      	adds	r3, #93	; 0x5d
 80019da:	2208      	movs	r2, #8
 80019dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	015a      	lsls	r2, r3, #5
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ea:	461a      	mov	r2, r3
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d122      	bne.n	8001a50 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	0151      	lsls	r1, r2, #5
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	440a      	add	r2, r1
 8001a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fee4 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a46:	461a      	mov	r2, r3
 8001a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a4e:	e300      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	015a      	lsls	r2, r3, #5
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 80fd 	bne.w	8001c62 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3348      	adds	r3, #72	; 0x48
 8001a80:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0159      	lsls	r1, r3, #5
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001a94:	1ad1      	subs	r1, r2, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4403      	add	r3, r0
 8001aa4:	334c      	adds	r3, #76	; 0x4c
 8001aa6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	335d      	adds	r3, #93	; 0x5d
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3358      	adds	r3, #88	; 0x58
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	440b      	add	r3, r1
 8001af0:	333f      	adds	r3, #63	; 0x3f
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00a      	beq.n	8001b0e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	333f      	adds	r3, #63	; 0x3f
 8001b08:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d121      	bne.n	8001b52 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	0151      	lsls	r1, r2, #5
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	440a      	add	r2, r1
 8001b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fe62 	bl	8004802 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	6093      	str	r3, [r2, #8]
 8001b50:	e070      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	333f      	adds	r3, #63	; 0x3f
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d12a      	bne.n	8001bbe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	0151      	lsls	r1, r2, #5
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	440a      	add	r2, r1
 8001b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b86:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	335c      	adds	r3, #92	; 0x5c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	b2d8      	uxtb	r0, r3
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335c      	adds	r3, #92	; 0x5c
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f005 fa68 	bl	800708c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bbc:	e03a      	b.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333f      	adds	r3, #63	; 0x3f
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d12f      	bne.n	8001c34 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	335c      	adds	r3, #92	; 0x5c
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3350      	adds	r3, #80	; 0x50
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3350      	adds	r3, #80	; 0x50
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	b2d8      	uxtb	r0, r3
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	335c      	adds	r3, #92	; 0x5c
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4601      	mov	r1, r0
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 fa2c 	bl	800708c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3350      	adds	r3, #80	; 0x50
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	701a      	strb	r2, [r3, #0]
}
 8001c60:	e1f7      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	015a      	lsls	r2, r3, #5
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	f040 811a 	bne.w	8001eae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	0151      	lsls	r1, r2, #5
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	440a      	add	r2, r1
 8001c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	335d      	adds	r3, #93	; 0x5d
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10a      	bne.n	8001cc6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	335c      	adds	r3, #92	; 0x5c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e0d9      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	335d      	adds	r3, #93	; 0x5d
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10a      	bne.n	8001cf2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	335c      	adds	r3, #92	; 0x5c
 8001cec:	2205      	movs	r2, #5
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e0c3      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	335d      	adds	r3, #93	; 0x5d
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b06      	cmp	r3, #6
 8001d06:	d00a      	beq.n	8001d1e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	335d      	adds	r3, #93	; 0x5d
 8001d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d156      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3358      	adds	r3, #88	; 0x58
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	1c59      	adds	r1, r3, #1
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4403      	add	r3, r0
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	3358      	adds	r3, #88	; 0x58
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d914      	bls.n	8001d84 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3358      	adds	r3, #88	; 0x58
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	335c      	adds	r3, #92	; 0x5c
 8001d7e:	2204      	movs	r2, #4
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e009      	b.n	8001d98 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	335c      	adds	r3, #92	; 0x5c
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e056      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	335d      	adds	r3, #93	; 0x5d
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d123      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	335c      	adds	r3, #92	; 0x5c
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e0c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e14:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e027      	b.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	335d      	adds	r3, #93	; 0x5d
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d11c      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3358      	adds	r3, #88	; 0x58
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4403      	add	r3, r0
 8001e62:	3358      	adds	r3, #88	; 0x58
 8001e64:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	335c      	adds	r3, #92	; 0x5c
 8001e76:	2204      	movs	r2, #4
 8001e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	461a      	mov	r2, r3
 8001e88:	2302      	movs	r3, #2
 8001e8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	b2d8      	uxtb	r0, r3
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335c      	adds	r3, #92	; 0x5c
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 f8f0 	bl	800708c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001eac:	e0d1      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d13e      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	0151      	lsls	r1, r2, #5
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	440a      	add	r2, r1
 8001eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3358      	adds	r3, #88	; 0x58
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1c59      	adds	r1, r3, #1
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4403      	add	r3, r0
 8001f06:	3358      	adds	r3, #88	; 0x58
 8001f08:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335d      	adds	r3, #93	; 0x5d
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fc6a 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	6093      	str	r3, [r2, #8]
}
 8001f40:	e087      	b.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d17c      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	333f      	adds	r3, #63	; 0x3f
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d122      	bne.n	8001fb4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3358      	adds	r3, #88	; 0x58
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fc28 	bl	8004802 <USB_HC_Halt>
 8001fb2:	e045      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333f      	adds	r3, #63	; 0x3f
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333f      	adds	r3, #63	; 0x3f
 8001fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d12f      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3358      	adds	r3, #88	; 0x58
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d121      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	335d      	adds	r3, #93	; 0x5d
 800200c:	2203      	movs	r2, #3
 800200e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	0151      	lsls	r1, r2, #5
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	440a      	add	r2, r1
 8002026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fbe1 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	2310      	movs	r3, #16
 8002050:	6093      	str	r3, [r2, #8]
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d119      	bne.n	80020be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	2304      	movs	r3, #4
 800209a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	0151      	lsls	r1, r2, #5
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	440a      	add	r2, r1
 80020b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020bc:	e33e      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d141      	bne.n	8002158 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2320      	movs	r3, #32
 80020e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	333d      	adds	r3, #61	; 0x3d
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	f040 831f 	bne.w	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	333d      	adds	r3, #61	; 0x3d
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	335c      	adds	r3, #92	; 0x5c
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fb56 	bl	8004802 <USB_HC_Halt>
}
 8002156:	e2f1      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d13f      	bne.n	80021ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	2204      	movs	r2, #4
 8002180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	333d      	adds	r3, #61	; 0x3d
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f002 fb14 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	6093      	str	r3, [r2, #8]
}
 80021ec:	e2a6      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d122      	bne.n	800224c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	0151      	lsls	r1, r2, #5
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	440a      	add	r2, r1
 800221c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fae6 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002248:	6093      	str	r3, [r2, #8]
}
 800224a:	e277      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d135      	bne.n	80022ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	3358      	adds	r3, #88	; 0x58
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 faae 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2301      	movs	r3, #1
 80022b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	335d      	adds	r3, #93	; 0x5d
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
}
 80022cc:	e236      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d12b      	bne.n	800233c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fa6e 	bl	8004802 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	335d      	adds	r3, #93	; 0x5d
 8002336:	2205      	movs	r2, #5
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	e1ff      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d155      	bne.n	80023fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	3358      	adds	r3, #88	; 0x58
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	335d      	adds	r3, #93	; 0x5d
 8002376:	2203      	movs	r2, #3
 8002378:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	333d      	adds	r3, #61	; 0x3d
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	333c      	adds	r3, #60	; 0x3c
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	333d      	adds	r3, #61	; 0x3d
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	0151      	lsls	r1, r2, #5
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	440a      	add	r2, r1
 80023d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fa0c 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	461a      	mov	r2, r3
 80023f8:	2310      	movs	r3, #16
 80023fa:	6093      	str	r3, [r2, #8]
}
 80023fc:	e19e      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d12b      	bne.n	800246c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	0151      	lsls	r1, r2, #5
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	440a      	add	r2, r1
 800242a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f002 f9df 	bl	8004802 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	335d      	adds	r3, #93	; 0x5d
 8002454:	2206      	movs	r2, #6
 8002456:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	6093      	str	r3, [r2, #8]
}
 800246a:	e167      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002482:	d135      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0151      	lsls	r1, r2, #5
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	440a      	add	r2, r1
 800249a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 f9a7 	bl	8004802 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2310      	movs	r3, #16
 80024c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	335d      	adds	r3, #93	; 0x5d
 80024ea:	2208      	movs	r2, #8
 80024ec:	701a      	strb	r2, [r3, #0]
}
 80024ee:	e125      	b.n	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 811a 	bne.w	800273c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f023 0302 	bic.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	335d      	adds	r3, #93	; 0x5d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d137      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	333f      	adds	r3, #63	; 0x3f
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d00b      	beq.n	8002580 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	333f      	adds	r3, #63	; 0x3f
 8002578:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800257a:	2b03      	cmp	r3, #3
 800257c:	f040 80c5 	bne.w	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	3351      	adds	r3, #81	; 0x51
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	3351      	adds	r3, #81	; 0x51
 80025a8:	4602      	mov	r2, r0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e0ad      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	335d      	adds	r3, #93	; 0x5d
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d10a      	bne.n	80025da <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e097      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	335d      	adds	r3, #93	; 0x5d
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d10a      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e081      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	335d      	adds	r3, #93	; 0x5d
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10a      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	2205      	movs	r2, #5
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e06b      	b.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335d      	adds	r3, #93	; 0x5d
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d00a      	beq.n	800265e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335d      	adds	r3, #93	; 0x5d
 8002658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800265a:	2b08      	cmp	r3, #8
 800265c:	d155      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3358      	adds	r3, #88	; 0x58
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c59      	adds	r1, r3, #1
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4403      	add	r3, r0
 8002680:	3358      	adds	r3, #88	; 0x58
 8002682:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	3358      	adds	r3, #88	; 0x58
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d914      	bls.n	80026c4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3358      	adds	r3, #88	; 0x58
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	335c      	adds	r3, #92	; 0x5c
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e009      	b.n	80026d8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2302      	movs	r3, #2
 800271a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	b2d8      	uxtb	r0, r3
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	335c      	adds	r3, #92	; 0x5c
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4601      	mov	r1, r0
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f004 fca8 	bl	800708c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	0c5b      	lsrs	r3, r3, #17
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002778:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d003      	beq.n	8002788 <HCD_RXQLVL_IRQHandler+0x44>
 8002780:	2b05      	cmp	r3, #5
 8002782:	f000 8082 	beq.w	800288a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002786:	e083      	b.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07f      	beq.n	800288e <HCD_RXQLVL_IRQHandler+0x14a>
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3344      	adds	r3, #68	; 0x44
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d074      	beq.n	800288e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3344      	adds	r3, #68	; 0x44
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	b292      	uxth	r2, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f001 fbbf 	bl	8003f42 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3344      	adds	r3, #68	; 0x44
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	18d1      	adds	r1, r2, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4403      	add	r3, r0
 80027e8:	3344      	adds	r3, #68	; 0x44
 80027ea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	334c      	adds	r3, #76	; 0x4c
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4403      	add	r3, r0
 8002810:	334c      	adds	r3, #76	; 0x4c
 8002812:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HCD_RXQLVL_IRQHandler+0x154>)
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d031      	beq.n	800288e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002840:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002848:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	3350      	adds	r3, #80	; 0x50
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2d8      	uxtb	r0, r3
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	3350      	adds	r3, #80	; 0x50
 8002884:	4602      	mov	r2, r0
 8002886:	701a      	strb	r2, [r3, #0]
      break;
 8002888:	e001      	b.n	800288e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800288e:	bf00      	nop
  }
}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	1ff80000 	.word	0x1ff80000

0800289c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d10b      	bne.n	80028ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f004 fbb8 	bl	8007054 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d132      	bne.n	800295c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b04      	cmp	r3, #4
 8002906:	d126      	bne.n	8002956 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d113      	bne.n	8002938 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800291a:	d106      	bne.n	800292a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fc48 	bl	80041b8 <USB_InitFSLSPClkSel>
 8002928:	e011      	b.n	800294e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fc41 	bl	80041b8 <USB_InitFSLSPClkSel>
 8002936:	e00a      	b.n	800294e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002946:	461a      	mov	r2, r3
 8002948:	f64e 2360 	movw	r3, #60000	; 0xea60
 800294c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f004 fbaa 	bl	80070a8 <HAL_HCD_PortEnabled_Callback>
 8002954:	e002      	b.n	800295c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f004 fbb4 	bl	80070c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	d103      	bne.n	800296e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0320 	orr.w	r3, r3, #32
 800296c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6013      	str	r3, [r2, #0]
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e25b      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d075      	beq.n	8002a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a2:	4ba3      	ldr	r3, [pc, #652]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d00c      	beq.n	80029c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d112      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c6:	d10b      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d05b      	beq.n	8002a8c <HAL_RCC_OscConfig+0x108>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d157      	bne.n	8002a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e236      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_OscConfig+0x74>
 80029ea:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a90      	ldr	r2, [pc, #576]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xb0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x98>
 8002a02:	4b8b      	ldr	r3, [pc, #556]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a8a      	ldr	r2, [pc, #552]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a87      	ldr	r2, [pc, #540]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a80      	ldr	r2, [pc, #512]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fd ffbe 	bl	80009bc <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fd ffba 	bl	80009bc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e1fb      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xc0>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fd ffaa 	bl	80009bc <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fd ffa6 	bl	80009bc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1e7      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b6c      	ldr	r3, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0xe8>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x152>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1bb      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4952      	ldr	r1, [pc, #328]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_OscConfig+0x2b0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7fd ff5f 	bl	80009bc <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b02:	f7fd ff5b 	bl	80009bc <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e19c      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4940      	ldr	r1, [pc, #256]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <HAL_RCC_OscConfig+0x2b0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fd ff3e 	bl	80009bc <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fd ff3a 	bl	80009bc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e17b      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d030      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_RCC_OscConfig+0x2b4>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fd ff1e 	bl	80009bc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fd ff1a 	bl	80009bc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e15b      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x200>
 8002ba2:	e015      	b.n	8002bd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x2b4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fd ff07 	bl	80009bc <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb2:	f7fd ff03 	bl	80009bc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e144      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a0 	beq.w	8002d1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d121      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fd fec9 	bl	80009bc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e011      	b.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	42470000 	.word	0x42470000
 8002c38:	42470e80 	.word	0x42470e80
 8002c3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c40:	f7fd febc 	bl	80009bc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0fd      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x4d4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2f0>
 8002c66:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a7c      	ldr	r2, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	e01c      	b.n	8002cae <HAL_RCC_OscConfig+0x32a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x312>
 8002c7c:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a76      	ldr	r2, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	4b74      	ldr	r3, [pc, #464]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a73      	ldr	r2, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x32a>
 8002c96:	4b71      	ldr	r3, [pc, #452]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a70      	ldr	r2, [pc, #448]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a6d      	ldr	r2, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fd fe81 	bl	80009bc <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fd fe7d 	bl	80009bc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0bc      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ee      	beq.n	8002cbe <HAL_RCC_OscConfig+0x33a>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7fd fe6b 	bl	80009bc <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fd fe67 	bl	80009bc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0a6      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b52      	ldr	r3, [pc, #328]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a51      	ldr	r2, [pc, #324]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8092 	beq.w	8002e4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d05c      	beq.n	8002dee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d141      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_RCC_OscConfig+0x4dc>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fd fe3b 	bl	80009bc <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fd fe37 	bl	80009bc <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e078      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	019b      	lsls	r3, r3, #6
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	4933      	ldr	r1, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4dc>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7fd fe10 	bl	80009bc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fd fe0c 	bl	80009bc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04d      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x41c>
 8002dbe:	e045      	b.n	8002e4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x4dc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fd fdf9 	bl	80009bc <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fd fdf5 	bl	80009bc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e036      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x44a>
 8002dec:	e02e      	b.n	8002e4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e029      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_RCC_OscConfig+0x4d8>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d115      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10d      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470060 	.word	0x42470060

08002e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0cc      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b68      	ldr	r3, [pc, #416]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d90c      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b65      	ldr	r3, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d044      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e067      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4934      	ldr	r1, [pc, #208]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fd fd32 	bl	80009bc <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fd fd2e 	bl	80009bc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e04f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d20c      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4601      	mov	r1, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fc92 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	08007888 	.word	0x08007888
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b04      	cmp	r3, #4
 8003050:	d007      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x32>
 8003052:	2b08      	cmp	r3, #8
 8003054:	d008      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x38>
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 80b4 	bne.w	80031c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800305e:	60bb      	str	r3, [r7, #8]
       break;
 8003060:	e0b3      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003062:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e0b0      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003068:	4b5a      	ldr	r3, [pc, #360]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003070:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003072:	4b58      	ldr	r3, [pc, #352]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04a      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	f240 11ff 	movw	r1, #511	; 0x1ff
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	ea03 0501 	and.w	r5, r3, r1
 8003094:	ea04 0602 	and.w	r6, r4, r2
 8003098:	4629      	mov	r1, r5
 800309a:	4632      	mov	r2, r6
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f04f 0400 	mov.w	r4, #0
 80030a4:	0154      	lsls	r4, r2, #5
 80030a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030aa:	014b      	lsls	r3, r1, #5
 80030ac:	4619      	mov	r1, r3
 80030ae:	4622      	mov	r2, r4
 80030b0:	1b49      	subs	r1, r1, r5
 80030b2:	eb62 0206 	sbc.w	r2, r2, r6
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	0194      	lsls	r4, r2, #6
 80030c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030c4:	018b      	lsls	r3, r1, #6
 80030c6:	1a5b      	subs	r3, r3, r1
 80030c8:	eb64 0402 	sbc.w	r4, r4, r2
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	00e2      	lsls	r2, r4, #3
 80030d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030da:	00d9      	lsls	r1, r3, #3
 80030dc:	460b      	mov	r3, r1
 80030de:	4614      	mov	r4, r2
 80030e0:	195b      	adds	r3, r3, r5
 80030e2:	eb44 0406 	adc.w	r4, r4, r6
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	0262      	lsls	r2, r4, #9
 80030f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030f4:	0259      	lsls	r1, r3, #9
 80030f6:	460b      	mov	r3, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	4621      	mov	r1, r4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f04f 0400 	mov.w	r4, #0
 8003104:	461a      	mov	r2, r3
 8003106:	4623      	mov	r3, r4
 8003108:	f7fd f870 	bl	80001ec <__aeabi_uldivmod>
 800310c:	4603      	mov	r3, r0
 800310e:	460c      	mov	r4, r1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e049      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	ea03 0501 	and.w	r5, r3, r1
 800312a:	ea04 0602 	and.w	r6, r4, r2
 800312e:	4629      	mov	r1, r5
 8003130:	4632      	mov	r2, r6
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	0154      	lsls	r4, r2, #5
 800313c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003140:	014b      	lsls	r3, r1, #5
 8003142:	4619      	mov	r1, r3
 8003144:	4622      	mov	r2, r4
 8003146:	1b49      	subs	r1, r1, r5
 8003148:	eb62 0206 	sbc.w	r2, r2, r6
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f04f 0400 	mov.w	r4, #0
 8003154:	0194      	lsls	r4, r2, #6
 8003156:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	1a5b      	subs	r3, r3, r1
 800315e:	eb64 0402 	sbc.w	r4, r4, r2
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	00e2      	lsls	r2, r4, #3
 800316c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003170:	00d9      	lsls	r1, r3, #3
 8003172:	460b      	mov	r3, r1
 8003174:	4614      	mov	r4, r2
 8003176:	195b      	adds	r3, r3, r5
 8003178:	eb44 0406 	adc.w	r4, r4, r6
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	02a2      	lsls	r2, r4, #10
 8003186:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800318a:	0299      	lsls	r1, r3, #10
 800318c:	460b      	mov	r3, r1
 800318e:	4614      	mov	r4, r2
 8003190:	4618      	mov	r0, r3
 8003192:	4621      	mov	r1, r4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f04f 0400 	mov.w	r4, #0
 800319a:	461a      	mov	r2, r3
 800319c:	4623      	mov	r3, r4
 800319e:	f7fd f825 	bl	80001ec <__aeabi_uldivmod>
 80031a2:	4603      	mov	r3, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	60bb      	str	r3, [r7, #8]
      break;
 80031c2:	e002      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031c6:	60bb      	str	r3, [r7, #8]
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	68bb      	ldr	r3, [r7, #8]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000000 	.word	0x20000000

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4601      	mov	r1, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4a03      	ldr	r2, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08007898 	.word	0x08007898

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffdc 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003228:	4601      	mov	r1, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4a03      	ldr	r2, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08007898 	.word	0x08007898

08003248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e03f      	b.n	80032da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fa52 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f9b1 	bl	80035f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af02      	add	r7, sp, #8
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	f040 8083 	bne.w	800340a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_Transmit+0x2e>
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e07b      	b.n	800340c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_UART_Transmit+0x40>
 800331e:	2302      	movs	r3, #2
 8003320:	e074      	b.n	800340c <HAL_UART_Transmit+0x12a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2221      	movs	r2, #33	; 0x21
 8003334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003338:	f7fd fb40 	bl	80009bc <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003352:	e042      	b.n	80033da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d122      	bne.n	80033b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8f2 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e042      	b.n	800340c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003398:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3302      	adds	r3, #2
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	e017      	b.n	80033da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	e013      	b.n	80033da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f8cf 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e01f      	b.n	800340c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	60ba      	str	r2, [r7, #8]
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1b7      	bne.n	8003354 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8b6 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e006      	b.n	800340c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 8090 	bne.w	8003556 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_Receive+0x2e>
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e088      	b.n	8003558 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_UART_Receive+0x40>
 8003450:	2302      	movs	r3, #2
 8003452:	e081      	b.n	8003558 <HAL_UART_Receive+0x144>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2222      	movs	r2, #34	; 0x22
 8003466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800346a:	f7fd faa7 	bl	80009bc <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	88fa      	ldrh	r2, [r7, #6]
 800347a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003484:	e05c      	b.n	8003540 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d12b      	bne.n	80034f6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2120      	movs	r1, #32
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f859 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e04f      	b.n	8003558 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3302      	adds	r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e030      	b.n	8003540 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	e024      	b.n	8003540 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2120      	movs	r1, #32
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f82d 	bl	8003560 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e023      	b.n	8003558 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	60ba      	str	r2, [r7, #8]
 8003524:	b2ca      	uxtb	r2, r1
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e00a      	b.n	8003540 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1c59      	adds	r1, r3, #1
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d19d      	bne.n	8003486 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003570:	e02c      	b.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d028      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <UART_WaitOnFlagUntilTimeout+0x30>
 8003580:	f7fd fa1c 	bl	80009bc <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d21d      	bcs.n	80035cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800359e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e00f      	b.n	80035ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d0c3      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003636:	f023 030c 	bic.w	r3, r3, #12
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	430b      	orrs	r3, r1
 8003642:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003662:	f040 818b 	bne.w	800397c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4ac1      	ldr	r2, [pc, #772]	; (8003970 <UART_SetConfig+0x37c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d005      	beq.n	800367c <UART_SetConfig+0x88>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4abf      	ldr	r2, [pc, #764]	; (8003974 <UART_SetConfig+0x380>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f040 80bd 	bne.w	80037f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7ff fdd0 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003680:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	461d      	mov	r5, r3
 8003686:	f04f 0600 	mov.w	r6, #0
 800368a:	46a8      	mov	r8, r5
 800368c:	46b1      	mov	r9, r6
 800368e:	eb18 0308 	adds.w	r3, r8, r8
 8003692:	eb49 0409 	adc.w	r4, r9, r9
 8003696:	4698      	mov	r8, r3
 8003698:	46a1      	mov	r9, r4
 800369a:	eb18 0805 	adds.w	r8, r8, r5
 800369e:	eb49 0906 	adc.w	r9, r9, r6
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036b6:	4688      	mov	r8, r1
 80036b8:	4691      	mov	r9, r2
 80036ba:	eb18 0005 	adds.w	r0, r8, r5
 80036be:	eb49 0106 	adc.w	r1, r9, r6
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	461d      	mov	r5, r3
 80036c8:	f04f 0600 	mov.w	r6, #0
 80036cc:	196b      	adds	r3, r5, r5
 80036ce:	eb46 0406 	adc.w	r4, r6, r6
 80036d2:	461a      	mov	r2, r3
 80036d4:	4623      	mov	r3, r4
 80036d6:	f7fc fd89 	bl	80001ec <__aeabi_uldivmod>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	461a      	mov	r2, r3
 80036e0:	4ba5      	ldr	r3, [pc, #660]	; (8003978 <UART_SetConfig+0x384>)
 80036e2:	fba3 2302 	umull	r2, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	461d      	mov	r5, r3
 80036f0:	f04f 0600 	mov.w	r6, #0
 80036f4:	46a9      	mov	r9, r5
 80036f6:	46b2      	mov	sl, r6
 80036f8:	eb19 0309 	adds.w	r3, r9, r9
 80036fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003700:	4699      	mov	r9, r3
 8003702:	46a2      	mov	sl, r4
 8003704:	eb19 0905 	adds.w	r9, r9, r5
 8003708:	eb4a 0a06 	adc.w	sl, sl, r6
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003720:	4689      	mov	r9, r1
 8003722:	4692      	mov	sl, r2
 8003724:	eb19 0005 	adds.w	r0, r9, r5
 8003728:	eb4a 0106 	adc.w	r1, sl, r6
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	461d      	mov	r5, r3
 8003732:	f04f 0600 	mov.w	r6, #0
 8003736:	196b      	adds	r3, r5, r5
 8003738:	eb46 0406 	adc.w	r4, r6, r6
 800373c:	461a      	mov	r2, r3
 800373e:	4623      	mov	r3, r4
 8003740:	f7fc fd54 	bl	80001ec <__aeabi_uldivmod>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	461a      	mov	r2, r3
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <UART_SetConfig+0x384>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	; 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	3332      	adds	r3, #50	; 0x32
 800375e:	4a86      	ldr	r2, [pc, #536]	; (8003978 <UART_SetConfig+0x384>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800376c:	4498      	add	r8, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	461d      	mov	r5, r3
 8003772:	f04f 0600 	mov.w	r6, #0
 8003776:	46a9      	mov	r9, r5
 8003778:	46b2      	mov	sl, r6
 800377a:	eb19 0309 	adds.w	r3, r9, r9
 800377e:	eb4a 040a 	adc.w	r4, sl, sl
 8003782:	4699      	mov	r9, r3
 8003784:	46a2      	mov	sl, r4
 8003786:	eb19 0905 	adds.w	r9, r9, r5
 800378a:	eb4a 0a06 	adc.w	sl, sl, r6
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800379e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037a2:	4689      	mov	r9, r1
 80037a4:	4692      	mov	sl, r2
 80037a6:	eb19 0005 	adds.w	r0, r9, r5
 80037aa:	eb4a 0106 	adc.w	r1, sl, r6
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	461d      	mov	r5, r3
 80037b4:	f04f 0600 	mov.w	r6, #0
 80037b8:	196b      	adds	r3, r5, r5
 80037ba:	eb46 0406 	adc.w	r4, r6, r6
 80037be:	461a      	mov	r2, r3
 80037c0:	4623      	mov	r3, r4
 80037c2:	f7fc fd13 	bl	80001ec <__aeabi_uldivmod>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <UART_SetConfig+0x384>)
 80037ce:	fba3 1302 	umull	r1, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2164      	movs	r1, #100	; 0x64
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	3332      	adds	r3, #50	; 0x32
 80037e0:	4a65      	ldr	r2, [pc, #404]	; (8003978 <UART_SetConfig+0x384>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	f003 0207 	and.w	r2, r3, #7
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4442      	add	r2, r8
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e26f      	b.n	8003cd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f6:	f7ff fcff 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 80037fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	461d      	mov	r5, r3
 8003800:	f04f 0600 	mov.w	r6, #0
 8003804:	46a8      	mov	r8, r5
 8003806:	46b1      	mov	r9, r6
 8003808:	eb18 0308 	adds.w	r3, r8, r8
 800380c:	eb49 0409 	adc.w	r4, r9, r9
 8003810:	4698      	mov	r8, r3
 8003812:	46a1      	mov	r9, r4
 8003814:	eb18 0805 	adds.w	r8, r8, r5
 8003818:	eb49 0906 	adc.w	r9, r9, r6
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003828:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800382c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003830:	4688      	mov	r8, r1
 8003832:	4691      	mov	r9, r2
 8003834:	eb18 0005 	adds.w	r0, r8, r5
 8003838:	eb49 0106 	adc.w	r1, r9, r6
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	461d      	mov	r5, r3
 8003842:	f04f 0600 	mov.w	r6, #0
 8003846:	196b      	adds	r3, r5, r5
 8003848:	eb46 0406 	adc.w	r4, r6, r6
 800384c:	461a      	mov	r2, r3
 800384e:	4623      	mov	r3, r4
 8003850:	f7fc fccc 	bl	80001ec <__aeabi_uldivmod>
 8003854:	4603      	mov	r3, r0
 8003856:	460c      	mov	r4, r1
 8003858:	461a      	mov	r2, r3
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <UART_SetConfig+0x384>)
 800385c:	fba3 2302 	umull	r2, r3, r3, r2
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	461d      	mov	r5, r3
 800386a:	f04f 0600 	mov.w	r6, #0
 800386e:	46a9      	mov	r9, r5
 8003870:	46b2      	mov	sl, r6
 8003872:	eb19 0309 	adds.w	r3, r9, r9
 8003876:	eb4a 040a 	adc.w	r4, sl, sl
 800387a:	4699      	mov	r9, r3
 800387c:	46a2      	mov	sl, r4
 800387e:	eb19 0905 	adds.w	r9, r9, r5
 8003882:	eb4a 0a06 	adc.w	sl, sl, r6
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003892:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003896:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800389a:	4689      	mov	r9, r1
 800389c:	4692      	mov	sl, r2
 800389e:	eb19 0005 	adds.w	r0, r9, r5
 80038a2:	eb4a 0106 	adc.w	r1, sl, r6
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	461d      	mov	r5, r3
 80038ac:	f04f 0600 	mov.w	r6, #0
 80038b0:	196b      	adds	r3, r5, r5
 80038b2:	eb46 0406 	adc.w	r4, r6, r6
 80038b6:	461a      	mov	r2, r3
 80038b8:	4623      	mov	r3, r4
 80038ba:	f7fc fc97 	bl	80001ec <__aeabi_uldivmod>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <UART_SetConfig+0x384>)
 80038c6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2164      	movs	r1, #100	; 0x64
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	3332      	adds	r3, #50	; 0x32
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <UART_SetConfig+0x384>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e6:	4498      	add	r8, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	461d      	mov	r5, r3
 80038ec:	f04f 0600 	mov.w	r6, #0
 80038f0:	46a9      	mov	r9, r5
 80038f2:	46b2      	mov	sl, r6
 80038f4:	eb19 0309 	adds.w	r3, r9, r9
 80038f8:	eb4a 040a 	adc.w	r4, sl, sl
 80038fc:	4699      	mov	r9, r3
 80038fe:	46a2      	mov	sl, r4
 8003900:	eb19 0905 	adds.w	r9, r9, r5
 8003904:	eb4a 0a06 	adc.w	sl, sl, r6
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800391c:	4689      	mov	r9, r1
 800391e:	4692      	mov	sl, r2
 8003920:	eb19 0005 	adds.w	r0, r9, r5
 8003924:	eb4a 0106 	adc.w	r1, sl, r6
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	461d      	mov	r5, r3
 800392e:	f04f 0600 	mov.w	r6, #0
 8003932:	196b      	adds	r3, r5, r5
 8003934:	eb46 0406 	adc.w	r4, r6, r6
 8003938:	461a      	mov	r2, r3
 800393a:	4623      	mov	r3, r4
 800393c:	f7fc fc56 	bl	80001ec <__aeabi_uldivmod>
 8003940:	4603      	mov	r3, r0
 8003942:	460c      	mov	r4, r1
 8003944:	461a      	mov	r2, r3
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <UART_SetConfig+0x384>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	; 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a07      	ldr	r2, [pc, #28]	; (8003978 <UART_SetConfig+0x384>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4442      	add	r2, r8
 800396c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800396e:	e1b2      	b.n	8003cd6 <UART_SetConfig+0x6e2>
 8003970:	40011000 	.word	0x40011000
 8003974:	40011400 	.word	0x40011400
 8003978:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4ad7      	ldr	r2, [pc, #860]	; (8003ce0 <UART_SetConfig+0x6ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d005      	beq.n	8003992 <UART_SetConfig+0x39e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4ad6      	ldr	r2, [pc, #856]	; (8003ce4 <UART_SetConfig+0x6f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	f040 80d1 	bne.w	8003b34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003992:	f7ff fc45 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003996:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	469a      	mov	sl, r3
 800399c:	f04f 0b00 	mov.w	fp, #0
 80039a0:	46d0      	mov	r8, sl
 80039a2:	46d9      	mov	r9, fp
 80039a4:	eb18 0308 	adds.w	r3, r8, r8
 80039a8:	eb49 0409 	adc.w	r4, r9, r9
 80039ac:	4698      	mov	r8, r3
 80039ae:	46a1      	mov	r9, r4
 80039b0:	eb18 080a 	adds.w	r8, r8, sl
 80039b4:	eb49 090b 	adc.w	r9, r9, fp
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039cc:	4688      	mov	r8, r1
 80039ce:	4691      	mov	r9, r2
 80039d0:	eb1a 0508 	adds.w	r5, sl, r8
 80039d4:	eb4b 0609 	adc.w	r6, fp, r9
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4619      	mov	r1, r3
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	f04f 0400 	mov.w	r4, #0
 80039ea:	0094      	lsls	r4, r2, #2
 80039ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039f0:	008b      	lsls	r3, r1, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	4623      	mov	r3, r4
 80039f6:	4628      	mov	r0, r5
 80039f8:	4631      	mov	r1, r6
 80039fa:	f7fc fbf7 	bl	80001ec <__aeabi_uldivmod>
 80039fe:	4603      	mov	r3, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	461a      	mov	r2, r3
 8003a04:	4bb8      	ldr	r3, [pc, #736]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003a06:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	469b      	mov	fp, r3
 8003a14:	f04f 0c00 	mov.w	ip, #0
 8003a18:	46d9      	mov	r9, fp
 8003a1a:	46e2      	mov	sl, ip
 8003a1c:	eb19 0309 	adds.w	r3, r9, r9
 8003a20:	eb4a 040a 	adc.w	r4, sl, sl
 8003a24:	4699      	mov	r9, r3
 8003a26:	46a2      	mov	sl, r4
 8003a28:	eb19 090b 	adds.w	r9, r9, fp
 8003a2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a44:	4689      	mov	r9, r1
 8003a46:	4692      	mov	sl, r2
 8003a48:	eb1b 0509 	adds.w	r5, fp, r9
 8003a4c:	eb4c 060a 	adc.w	r6, ip, sl
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	0094      	lsls	r4, r2, #2
 8003a64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a68:	008b      	lsls	r3, r1, #2
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	4631      	mov	r1, r6
 8003a72:	f7fc fbbb 	bl	80001ec <__aeabi_uldivmod>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b9a      	ldr	r3, [pc, #616]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2164      	movs	r1, #100	; 0x64
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a95      	ldr	r2, [pc, #596]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9c:	4498      	add	r8, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	469b      	mov	fp, r3
 8003aa2:	f04f 0c00 	mov.w	ip, #0
 8003aa6:	46d9      	mov	r9, fp
 8003aa8:	46e2      	mov	sl, ip
 8003aaa:	eb19 0309 	adds.w	r3, r9, r9
 8003aae:	eb4a 040a 	adc.w	r4, sl, sl
 8003ab2:	4699      	mov	r9, r3
 8003ab4:	46a2      	mov	sl, r4
 8003ab6:	eb19 090b 	adds.w	r9, r9, fp
 8003aba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ace:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ad2:	4689      	mov	r9, r1
 8003ad4:	4692      	mov	sl, r2
 8003ad6:	eb1b 0509 	adds.w	r5, fp, r9
 8003ada:	eb4c 060a 	adc.w	r6, ip, sl
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	0094      	lsls	r4, r2, #2
 8003af2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003af6:	008b      	lsls	r3, r1, #2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	4628      	mov	r0, r5
 8003afe:	4631      	mov	r1, r6
 8003b00:	f7fc fb74 	bl	80001ec <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4442      	add	r2, r8
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	e0d0      	b.n	8003cd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7ff fb60 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8003b38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	469a      	mov	sl, r3
 8003b3e:	f04f 0b00 	mov.w	fp, #0
 8003b42:	46d0      	mov	r8, sl
 8003b44:	46d9      	mov	r9, fp
 8003b46:	eb18 0308 	adds.w	r3, r8, r8
 8003b4a:	eb49 0409 	adc.w	r4, r9, r9
 8003b4e:	4698      	mov	r8, r3
 8003b50:	46a1      	mov	r9, r4
 8003b52:	eb18 080a 	adds.w	r8, r8, sl
 8003b56:	eb49 090b 	adc.w	r9, r9, fp
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b6e:	4688      	mov	r8, r1
 8003b70:	4691      	mov	r9, r2
 8003b72:	eb1a 0508 	adds.w	r5, sl, r8
 8003b76:	eb4b 0609 	adc.w	r6, fp, r9
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	f04f 0400 	mov.w	r4, #0
 8003b8c:	0094      	lsls	r4, r2, #2
 8003b8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b92:	008b      	lsls	r3, r1, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	f7fc fb26 	bl	80001ec <__aeabi_uldivmod>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	469b      	mov	fp, r3
 8003bb6:	f04f 0c00 	mov.w	ip, #0
 8003bba:	46d9      	mov	r9, fp
 8003bbc:	46e2      	mov	sl, ip
 8003bbe:	eb19 0309 	adds.w	r3, r9, r9
 8003bc2:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc6:	4699      	mov	r9, r3
 8003bc8:	46a2      	mov	sl, r4
 8003bca:	eb19 090b 	adds.w	r9, r9, fp
 8003bce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003be2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be6:	4689      	mov	r9, r1
 8003be8:	4692      	mov	sl, r2
 8003bea:	eb1b 0509 	adds.w	r5, fp, r9
 8003bee:	eb4c 060a 	adc.w	r6, ip, sl
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	f04f 0400 	mov.w	r4, #0
 8003c04:	0094      	lsls	r4, r2, #2
 8003c06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c0a:	008b      	lsls	r3, r1, #2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	4631      	mov	r1, r6
 8003c14:	f7fc faea 	bl	80001ec <__aeabi_uldivmod>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b32      	ldr	r3, [pc, #200]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	4498      	add	r8, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	469b      	mov	fp, r3
 8003c44:	f04f 0c00 	mov.w	ip, #0
 8003c48:	46d9      	mov	r9, fp
 8003c4a:	46e2      	mov	sl, ip
 8003c4c:	eb19 0309 	adds.w	r3, r9, r9
 8003c50:	eb4a 040a 	adc.w	r4, sl, sl
 8003c54:	4699      	mov	r9, r3
 8003c56:	46a2      	mov	sl, r4
 8003c58:	eb19 090b 	adds.w	r9, r9, fp
 8003c5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c60:	f04f 0100 	mov.w	r1, #0
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c74:	4689      	mov	r9, r1
 8003c76:	4692      	mov	sl, r2
 8003c78:	eb1b 0509 	adds.w	r5, fp, r9
 8003c7c:	eb4c 060a 	adc.w	r6, ip, sl
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4619      	mov	r1, r3
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	f04f 0400 	mov.w	r4, #0
 8003c92:	0094      	lsls	r4, r2, #2
 8003c94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c98:	008b      	lsls	r3, r1, #2
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	f7fc faa3 	bl	80001ec <__aeabi_uldivmod>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460c      	mov	r4, r1
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003cae:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2164      	movs	r1, #100	; 0x64
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	3332      	adds	r3, #50	; 0x32
 8003cc0:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <UART_SetConfig+0x6f4>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4442      	add	r2, r8
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	e7ff      	b.n	8003cd6 <UART_SetConfig+0x6e2>
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f

08003cec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cec:	b084      	sub	sp, #16
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	f107 001c 	add.w	r0, r7, #28
 8003cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d122      	bne.n	8003d4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f94a 	bl	8003fd8 <USB_CoreReset>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	e01a      	b.n	8003d80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f93e 	bl	8003fd8 <USB_CoreReset>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
 8003d72:	e005      	b.n	8003d80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10b      	bne.n	8003d9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f043 0206 	orr.w	r2, r3, #6
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003daa:	b004      	add	sp, #16
 8003dac:	4770      	bx	lr

08003dae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 0201 	bic.w	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	e00b      	b.n	8003e36 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e001      	b.n	8003e36 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e003      	b.n	8003e3e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e36:	2032      	movs	r0, #50	; 0x32
 8003e38:	f7fc fdcc 	bl	80009d4 <HAL_Delay>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3301      	adds	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <USB_FlushTxFifo+0x48>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d0f0      	beq.n	8003e62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	00030d40 	.word	0x00030d40

08003e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <USB_FlushRxFifo+0x40>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d0f0      	beq.n	8003ea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	00030d40 	.word	0x00030d40

08003ed8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	71fb      	strb	r3, [r7, #7]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003ef6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11a      	bne.n	8003f34 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003efe:	88bb      	ldrh	r3, [r7, #4]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e00f      	b.n	8003f2c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	031a      	lsls	r2, r3, #12
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f18:	461a      	mov	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3304      	adds	r3, #4
 8003f24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3eb      	bcc.n	8003f0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b089      	sub	sp, #36	; 0x24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	3303      	adds	r3, #3
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e00b      	b.n	8003f7e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3304      	adds	r3, #4
 8003f76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d3ef      	bcc.n	8003f66 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003f86:	69fb      	ldr	r3, [r7, #28]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3724      	adds	r7, #36	; 0x24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fac:	68fb      	ldr	r3, [r7, #12]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <USB_CoreReset+0x64>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e01b      	b.n	800402e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	daf2      	bge.n	8003fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <USB_CoreReset+0x64>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e006      	b.n	800402e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d0f0      	beq.n	800400e <USB_CoreReset+0x36>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	00030d40 	.word	0x00030d40

08004040 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004040:	b084      	sub	sp, #16
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800405c:	461a      	mov	r2, r3
 800405e:	2300      	movs	r3, #0
 8004060:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10a      	bne.n	80040ae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040a6:	f043 0304 	orr.w	r3, r3, #4
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e014      	b.n	80040d8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e009      	b.n	80040d8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80040d8:	2110      	movs	r1, #16
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff feb4 	bl	8003e48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fed7 	bl	8003e94 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e015      	b.n	8004118 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3e5      	bcc.n	80040ec <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004120:	2101      	movs	r1, #1
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8ac 	bl	8004280 <USB_DriveVbus>

  HAL_Delay(200U);
 8004128:	20c8      	movs	r0, #200	; 0xc8
 800412a:	f7fc fc53 	bl	80009d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f04f 32ff 	mov.w	r2, #4294967295
 800413a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00b      	beq.n	8004160 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <USB_HostInit+0x164>)
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <USB_HostInit+0x168>)
 800415a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800415e:	e009      	b.n	8004174 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a10      	ldr	r2, [pc, #64]	; (80041ac <USB_HostInit+0x16c>)
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <USB_HostInit+0x170>)
 8004170:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <USB_HostInit+0x174>)
 800418c:	4313      	orrs	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800419e:	b004      	add	sp, #16
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	01000200 	.word	0x01000200
 80041a8:	00e00300 	.word	0x00e00300
 80041ac:	00600080 	.word	0x00600080
 80041b0:	004000e0 	.word	0x004000e0
 80041b4:	a3200008 	.word	0xa3200008

080041b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d107      	bne.n	800420a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004200:	461a      	mov	r2, r3
 8004202:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004206:	6053      	str	r3, [r2, #4]
 8004208:	e009      	b.n	800421e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d106      	bne.n	800421e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004216:	461a      	mov	r2, r3
 8004218:	f241 7370 	movw	r3, #6000	; 0x1770
 800421c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800424c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800425c:	2064      	movs	r0, #100	; 0x64
 800425e:	f7fc fbb9 	bl	80009d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800426a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004270:	200a      	movs	r0, #10
 8004272:	f7fc fbaf 	bl	80009d4 <HAL_Delay>

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <USB_DriveVbus+0x44>
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d106      	bne.n	80042c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	d109      	bne.n	80042e4 <USB_DriveVbus+0x64>
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0c5b      	lsrs	r3, r3, #17
 8004310:	f003 0303 	and.w	r3, r3, #3
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	b29b      	uxth	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	461a      	mov	r2, r3
 8004352:	4603      	mov	r3, r0
 8004354:	70fb      	strb	r3, [r7, #3]
 8004356:	460b      	mov	r3, r1
 8004358:	70bb      	strb	r3, [r7, #2]
 800435a:	4613      	mov	r3, r2
 800435c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800437a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800437e:	2b03      	cmp	r3, #3
 8004380:	d87e      	bhi.n	8004480 <USB_HC_Init+0x13c>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <USB_HC_Init+0x44>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	08004399 	.word	0x08004399
 800438c:	08004443 	.word	0x08004443
 8004390:	08004399 	.word	0x08004399
 8004394:	08004405 	.word	0x08004405
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a4:	461a      	mov	r2, r3
 80043a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80043aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80043ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da10      	bge.n	80043d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80043d4:	e057      	b.n	8004486 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d051      	beq.n	8004486 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004400:	60d3      	str	r3, [r2, #12]
      break;
 8004402:	e040      	b.n	8004486 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	f240 639d 	movw	r3, #1693	; 0x69d
 8004416:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004418:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da34      	bge.n	800448a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	440a      	add	r2, r1
 8004436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004440:	e023      	b.n	800448a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	461a      	mov	r2, r3
 8004450:	f240 2325 	movw	r3, #549	; 0x225
 8004454:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004456:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da17      	bge.n	800448e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	440a      	add	r2, r1
 8004474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004478:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800447c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800447e:	e006      	b.n	800448e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
      break;
 8004484:	e004      	b.n	8004490 <USB_HC_Init+0x14c>
      break;
 8004486:	bf00      	nop
 8004488:	e002      	b.n	8004490 <USB_HC_Init+0x14c>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <USB_HC_Init+0x14c>
      break;
 800448e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044aa:	4313      	orrs	r3, r2
 80044ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80044ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da03      	bge.n	80044ca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e001      	b.n	80044ce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80044ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d103      	bne.n	80044de <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80044d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e001      	b.n	80044e2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80044e2:	787b      	ldrb	r3, [r7, #1]
 80044e4:	059b      	lsls	r3, r3, #22
 80044e6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80044ea:	78bb      	ldrb	r3, [r7, #2]
 80044ec:	02db      	lsls	r3, r3, #11
 80044ee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80044f2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80044f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044f8:	049b      	lsls	r3, r3, #18
 80044fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80044fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004500:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004502:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004506:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	0159      	lsls	r1, r3, #5
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	440b      	add	r3, r1
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800451e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004524:	2b03      	cmp	r3, #3
 8004526:	d10f      	bne.n	8004548 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	440a      	add	r2, r1
 800453e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004546:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
}
 800454a:	4618      	mov	r0, r3
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop

08004558 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08c      	sub	sp, #48	; 0x30
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004574:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <USB_HC_StartXfer+0x7c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	791b      	ldrb	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d124      	bne.n	80045d4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <USB_HC_StartXfer+0x50>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	795b      	ldrb	r3, [r3, #5]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	4619      	mov	r1, r3
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fa2e 	bl	8004a00 <USB_DoPing>
      return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e112      	b.n	80047ce <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d112      	bne.n	80045d4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80045cc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2200      	movs	r2, #0
 80045d2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d018      	beq.n	800460e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	8912      	ldrh	r2, [r2, #8]
 80045e4:	4413      	add	r3, r2
 80045e6:	3b01      	subs	r3, #1
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	8912      	ldrh	r2, [r2, #8]
 80045ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80045f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80045f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d90b      	bls.n	8004612 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80045fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	8912      	ldrh	r2, [r2, #8]
 8004604:	fb02 f203 	mul.w	r2, r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	611a      	str	r2, [r3, #16]
 800460c:	e001      	b.n	8004612 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800460e:	2301      	movs	r3, #1
 8004610:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d006      	beq.n	8004628 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800461a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	8912      	ldrh	r2, [r2, #8]
 8004620:	fb02 f203 	mul.w	r2, r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004630:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004632:	04d9      	lsls	r1, r3, #19
 8004634:	4b68      	ldr	r3, [pc, #416]	; (80047d8 <USB_HC_StartXfer+0x280>)
 8004636:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004638:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	7a9b      	ldrb	r3, [r3, #10]
 800463e:	075b      	lsls	r3, r3, #29
 8004640:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004644:	69f9      	ldr	r1, [r7, #28]
 8004646:	0148      	lsls	r0, r1, #5
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	4401      	add	r1, r0
 800464c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004650:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004652:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	68d9      	ldr	r1, [r3, #12]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	460a      	mov	r2, r1
 800466c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	0151      	lsls	r1, r2, #5
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	440a      	add	r2, r1
 800469c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	7e7b      	ldrb	r3, [r7, #25]
 80046b6:	075b      	lsls	r3, r3, #29
 80046b8:	69f9      	ldr	r1, [r7, #28]
 80046ba:	0148      	lsls	r0, r1, #5
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	4401      	add	r1, r0
 80046c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80046c4:	4313      	orrs	r3, r2
 80046c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a41      	ldr	r2, [pc, #260]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046d8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046da:	4b40      	ldr	r3, [pc, #256]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e2:	4a3e      	ldr	r2, [pc, #248]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	78db      	ldrb	r3, [r3, #3]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	4a39      	ldr	r2, [pc, #228]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e005      	b.n	8004708 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <USB_HC_StartXfer+0x284>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004704:	4a35      	ldr	r2, [pc, #212]	; (80047dc <USB_HC_StartXfer+0x284>)
 8004706:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004708:	4b34      	ldr	r3, [pc, #208]	; (80047dc <USB_HC_StartXfer+0x284>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004710:	4a32      	ldr	r2, [pc, #200]	; (80047dc <USB_HC_StartXfer+0x284>)
 8004712:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <USB_HC_StartXfer+0x284>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14e      	bne.n	80047cc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d14a      	bne.n	80047cc <USB_HC_StartXfer+0x274>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d046      	beq.n	80047cc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	79db      	ldrb	r3, [r3, #7]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d830      	bhi.n	80047a8 <USB_HC_StartXfer+0x250>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <USB_HC_StartXfer+0x1f4>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	0800475d 	.word	0x0800475d
 8004750:	08004781 	.word	0x08004781
 8004754:	0800475d 	.word	0x0800475d
 8004758:	08004781 	.word	0x08004781
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	3303      	adds	r3, #3
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004766:	8afa      	ldrh	r2, [r7, #22]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	b29b      	uxth	r3, r3
 800476e:	429a      	cmp	r2, r3
 8004770:	d91c      	bls.n	80047ac <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	619a      	str	r2, [r3, #24]
          }
          break;
 800477e:	e015      	b.n	80047ac <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	3303      	adds	r3, #3
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800478a:	8afa      	ldrh	r2, [r7, #22]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	b29b      	uxth	r3, r3
 8004796:	429a      	cmp	r2, r3
 8004798:	d90a      	bls.n	80047b0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	619a      	str	r2, [r3, #24]
          }
          break;
 80047a6:	e003      	b.n	80047b0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <USB_HC_StartXfer+0x25a>
          break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <USB_HC_StartXfer+0x25a>
          break;
 80047b0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	68d9      	ldr	r1, [r3, #12]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	785a      	ldrb	r2, [r3, #1]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	b298      	uxth	r0, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4603      	mov	r3, r0
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fb86 	bl	8003ed8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	1ff80000 	.word	0x1ff80000
 80047dc:	200000b0 	.word	0x200000b0

080047e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	b29b      	uxth	r3, r3
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0c9b      	lsrs	r3, r3, #18
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <USB_HC_Halt+0x3a>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d16c      	bne.n	8004916 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	440a      	add	r2, r1
 8004852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800485a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d143      	bne.n	80048f0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	440a      	add	r2, r1
 800487e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004886:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	3301      	adds	r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d4:	d81d      	bhi.n	8004912 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ec:	d0ec      	beq.n	80048c8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048ee:	e080      	b.n	80049f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	440a      	add	r2, r1
 8004906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800490e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004910:	e06f      	b.n	80049f2 <USB_HC_Halt+0x1f0>
          break;
 8004912:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004914:	e06d      	b.n	80049f2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	440a      	add	r2, r1
 800492c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004934:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d143      	bne.n	80049ce <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	440a      	add	r2, r1
 800495c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004964:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	440a      	add	r2, r1
 800497c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004984:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	440a      	add	r2, r1
 800499c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049a4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049b2:	d81d      	bhi.n	80049f0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ca:	d0ec      	beq.n	80049a6 <USB_HC_Halt+0x1a4>
 80049cc:	e011      	b.n	80049f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e000      	b.n	80049f2 <USB_HC_Halt+0x1f0>
          break;
 80049f0:	bf00      	nop
    }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004a14:	2301      	movs	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	04da      	lsls	r2, r3, #19
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <USB_DoPing+0x74>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	1ff80000 	.word	0x1ff80000

08004a78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff f9a1 	bl	8003dd0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004a8e:	2110      	movs	r1, #16
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff f9d9 	bl	8003e48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff f9fc 	bl	8003e94 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e01f      	b.n	8004ae2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ac0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b0f      	cmp	r3, #15
 8004ae6:	d9dc      	bls.n	8004aa2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e034      	b.n	8004b58 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b34:	d80c      	bhi.n	8004b50 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4c:	d0ec      	beq.n	8004b28 <USB_StopHost+0xb0>
 8004b4e:	e000      	b.n	8004b52 <USB_StopHost+0xda>
        break;
 8004b50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	d9c7      	bls.n	8004aee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b64:	461a      	mov	r2, r3
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff f91a 	bl	8003dae <USB_EnableGlobalInt>

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	601a      	str	r2, [r3, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	709a      	strb	r2, [r3, #2]
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bd6:	789a      	ldrb	r2, [r3, #2]
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bda:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8004bdc:	4b20      	ldr	r3, [pc, #128]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	711a      	strb	r2, [r3, #4]
 8004be2:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004be4:	791a      	ldrb	r2, [r3, #4]
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004be8:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8004bea:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	719a      	strb	r2, [r3, #6]
 8004bf0:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bf2:	799a      	ldrb	r2, [r3, #6]
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bf6:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	721a      	strb	r2, [r3, #8]
 8004bfe:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004c00:	7a1a      	ldrb	r2, [r3, #8]
 8004c02:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <USBH_HID_KeybdInit+0xa4>)
 8004c04:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e00c      	b.n	8004c26 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8004c0c:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <USBH_HID_KeybdInit+0xa8>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2100      	movs	r1, #0
 8004c12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <USBH_HID_KeybdInit+0xac>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d9ef      	bls.n	8004c0c <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	8b1b      	ldrh	r3, [r3, #24]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d902      	bls.n	8004c3a <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2208      	movs	r2, #8
 8004c38:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <USBH_HID_KeybdInit+0xac>)
 8004c3e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f103 0008 	add.w	r0, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004c4c:	2250      	movs	r2, #80	; 0x50
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7ff ff98 	bl	8004b84 <USBH_HID_FifoInit>

  return USBH_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000118 	.word	0x20000118
 8004c64:	20000108 	.word	0x20000108
 8004c68:	20000110 	.word	0x20000110

08004c6c <USBH_PRT_InterfaceInit>:
  USBH_PRT_Process,
  USBH_PRT_SOFProcess,
  NULL,
};

static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af04      	add	r7, sp, #16
 8004c72:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004c7a:	2020      	movs	r0, #32
 8004c7c:	f002 fc42 	bl	8007504 <malloc>
 8004c80:	4603      	mov	r3, r0
 8004c82:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 8004c8e:	2220      	movs	r2, #32
 8004c90:	2100      	movs	r1, #0
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f002 fc46 	bl	8007524 <memset>

	PRT_Handle->num = 0;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	709a      	strb	r2, [r3, #2]
	PRT_Handle->Budrate = Bud_9600;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ca4:	61da      	str	r2, [r3, #28]
	PRT_Handle->poll = 10;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	220a      	movs	r2, #10
 8004caa:	729a      	strb	r2, [r3, #10]
	PRT_Handle->vID = phost->device.DevDesc.idVendor;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 232e 	ldrh.w	r2, [r3, #814]	; 0x32e
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	831a      	strh	r2, [r3, #24]
	PRT_Handle->pID = phost->device.DevDesc.idProduct;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 2330 	ldrh.w	r2, [r3, #816]	; 0x330
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	835a      	strh	r2, [r3, #26]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cc6:	7919      	ldrb	r1, [r3, #4]
 8004cc8:	23ff      	movs	r3, #255	; 0xff
 8004cca:	2201      	movs	r2, #1
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 febd 	bl	8005a4c <USBH_FindInterface>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	231a      	movs	r3, #26
 8004ce4:	fb03 f301 	mul.w	r3, r3, r1
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004cee:	781a      	ldrb	r2, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	231a      	movs	r3, #26
 8004cfe:	fb03 f301 	mul.w	r3, r3, r1
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	785b      	ldrb	r3, [r3, #1]
 8004d12:	4619      	mov	r1, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	231a      	movs	r3, #26
 8004d18:	fb03 f301 	mul.w	r3, r3, r1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	799b      	ldrb	r3, [r3, #6]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 f86d 	bl	8006e0e <USBH_AllocPipe>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	4619      	mov	r1, r3
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	231a      	movs	r3, #26
 8004d46:	fb03 f301 	mul.w	r3, r3, r1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	795b      	ldrb	r3, [r3, #5]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f002 f856 	bl	8006e0e <USBH_AllocPipe>
 8004d62:	4603      	mov	r3, r0
 8004d64:	461a      	mov	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	2b07      	cmp	r3, #7
 8004d74:	d107      	bne.n	8004d86 <USBH_PRT_InterfaceInit+0x11a>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 500);
 8004d76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	4932      	ldr	r1, [pc, #200]	; (8004e48 <USBH_PRT_InterfaceInit+0x1dc>)
 8004d7e:	4833      	ldr	r0, [pc, #204]	; (8004e4c <USBH_PRT_InterfaceInit+0x1e0>)
 8004d80:	f7fe faaf 	bl	80032e2 <HAL_UART_Transmit>
 8004d84:	e006      	b.n	8004d94 <USBH_PRT_InterfaceInit+0x128>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 500);
 8004d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d8a:	2214      	movs	r2, #20
 8004d8c:	4930      	ldr	r1, [pc, #192]	; (8004e50 <USBH_PRT_InterfaceInit+0x1e4>)
 8004d8e:	482f      	ldr	r0, [pc, #188]	; (8004e4c <USBH_PRT_InterfaceInit+0x1e0>)
 8004d90:	f7fe faa7 	bl	80032e2 <HAL_UART_Transmit>
   }

	//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e04d      	b.n	8004e36 <USBH_PRT_InterfaceInit+0x1ca>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3301      	adds	r3, #1
 8004da6:	00d9      	lsls	r1, r3, #3
 8004da8:	231a      	movs	r3, #26
 8004daa:	fb03 f300 	mul.w	r3, r3, r0
 8004dae:	440b      	add	r3, r1
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	da1c      	bge.n	8004df8 <USBH_PRT_InterfaceInit+0x18c>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	7919      	ldrb	r1, [r3, #4]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	7998      	ldrb	r0, [r3, #6]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	8912      	ldrh	r2, [r2, #8]
 8004dd6:	9202      	str	r2, [sp, #8]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4623      	mov	r3, r4
 8004de0:	4602      	mov	r2, r0
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 ffe4 	bl	8006db0 <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f002 faf3 	bl	80073dc <USBH_LL_SetToggle>
 8004df6:	e01b      	b.n	8004e30 <USBH_PRT_InterfaceInit+0x1c4>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	78d9      	ldrb	r1, [r3, #3]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	7958      	ldrb	r0, [r3, #5]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	8912      	ldrh	r2, [r2, #8]
 8004e10:	9202      	str	r2, [sp, #8]
 8004e12:	2202      	movs	r2, #2
 8004e14:	9201      	str	r2, [sp, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4623      	mov	r3, r4
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 ffc7 	bl	8006db0 <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2200      	movs	r2, #0
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f002 fad6 	bl	80073dc <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	ddae      	ble.n	8004d9a <USBH_PRT_InterfaceInit+0x12e>

		  }
     }

return USBH_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	bf00      	nop
 8004e48:	08007718 	.word	0x08007718
 8004e4c:	200000c4 	.word	0x200000c4
 8004e50:	0800772c 	.word	0x0800772c

08004e54 <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	791b      	ldrb	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	791b      	ldrb	r3, [r3, #4]
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 ffba 	bl	8006dee <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 ffe5 	bl	8006e50 <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	78db      	ldrb	r3, [r3, #3]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 ffa7 	bl	8006dee <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	78db      	ldrb	r3, [r3, #3]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 ffd2 	bl	8006e50 <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 fb24 	bl	8007514 <free>
	    phost->pActiveClass->pData = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61da      	str	r2, [r3, #28]
	  }

return USBH_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0a8      	sub	sp, #160	; 0xa0
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	2296      	movs	r2, #150	; 0x96
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 fb17 	bl	8007524 <memset>


	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 8004ef6:	bf00      	nop
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	2296      	movs	r2, #150	; 0x96
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f960 	bl	80051c6 <USBH_PRT_Get_Device_Id>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f5      	bne.n	8004ef8 <USBH_PRT_ClassRequest+0x18>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
 8004f0c:	f107 0108 	add.w	r1, r7, #8
 8004f10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	4807      	ldr	r0, [pc, #28]	; (8004f34 <USBH_PRT_ClassRequest+0x54>)
 8004f18:	f7fe f9e3 	bl	80032e2 <HAL_UART_Transmit>
	memset(buff,0,150);
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	2296      	movs	r2, #150	; 0x96
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 fafd 	bl	8007524 <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)100 ,( uint32_t)500);
//	memset(buff,0,150);

	return USBH_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	37a0      	adds	r7, #160	; 0xa0
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	200000c4 	.word	0x200000c4

08004f38 <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f46:	3b24      	subs	r3, #36	; 0x24
 8004f48:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004f50:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8004f54:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];

	 USBH_StatusTypeDef status = USBH_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004f5c:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8004f60:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8004f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f66:	3b24      	subs	r3, #36	; 0x24
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8004f74:	f102 0220 	add.w	r2, r2, #32
 8004f78:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 8004f7a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8004f7e:	f103 031c 	add.w	r3, r3, #28
 8004f82:	2240      	movs	r2, #64	; 0x40
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f002 facc 	bl	8007524 <memset>

	 PRT_Handle->poll = 10;
 8004f8c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004f90:	f103 0320 	add.w	r3, r3, #32
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	220a      	movs	r2, #10
 8004f98:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state)
 8004f9a:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004f9e:	f103 0320 	add.w	r3, r3, #32
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	f200 80df 	bhi.w	800516a <USBH_PRT_Process+0x232>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <USBH_PRT_Process+0x7c>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	08005009 	.word	0x08005009
 8004fc0:	080050dd 	.word	0x080050dd
	 {

			case PRT_INIT:
				PRT_Handle->state = PRT_SYNC;
 8004fc4:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004fc8:	f103 0320 	add.w	r3, r3, #32
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
				break;
 8004fd2:	e0cd      	b.n	8005170 <USBH_PRT_Process+0x238>

			 case PRT_SYNC:
				  /* Sync with start of Even Frame */
				if (phost->Timer & 1U)
 8004fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd8:	3b24      	subs	r3, #36	; 0x24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <USBH_PRT_Process+0xbe>
				 {
					PRT_Handle->state = PRT_GET_DATA;
 8004fe8:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004fec:	f103 0320 	add.w	r3, r3, #32
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	701a      	strb	r2, [r3, #0]
				 }
				 PRT_Handle->state = PRT_GET_DATA;
 8004ff6:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8004ffa:	f103 0320 	add.w	r3, r3, #32
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	701a      	strb	r2, [r3, #0]
				 break;
 8005004:	e0b4      	b.n	8005170 <USBH_PRT_Process+0x238>

			 case PRT_GET_DATA:
 8005006:	bf00      	nop
				  *
				  */

				 do
				 {
					 memset(buff,0,SIZE_BUFF);
 8005008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800500c:	3b1c      	subs	r3, #28
 800500e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f002 fa85 	bl	8007524 <memset>
					 HAL_UART_Receive(&huart2, buff, SIZE_BUFF,3000);
 800501a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800501e:	391c      	subs	r1, #28
 8005020:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005024:	f242 7210 	movw	r2, #10000	; 0x2710
 8005028:	4855      	ldr	r0, [pc, #340]	; (8005180 <USBH_PRT_Process+0x248>)
 800502a:	f7fe f9f3 	bl	8003414 <HAL_UART_Receive>

				 }while(CommandOperation(PRT_Handle,buff));
 800502e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005032:	3b1c      	subs	r3, #28
 8005034:	4619      	mov	r1, r3
 8005036:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800503a:	f103 0320 	add.w	r3, r3, #32
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	f000 f9b4 	bl	80053ac <CommandOperation>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1dd      	bne.n	8005006 <USBH_PRT_Process+0xce>
				  *	OR
				  *	make it as external interrupt but in that case  SendDataOnPrinter(phost,PRT_Handle, buff);
				  *	should not work.
				  *
				  */
				 if( printReport() )
 800504a:	f000 fa8d 	bl	8005568 <printReport>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01a      	beq.n	800508a <USBH_PRT_Process+0x152>
				 {
					 uint8_t *POSreport;
					 POSreport = PRT_Report(buff);
 8005054:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005058:	3b1c      	subs	r3, #28
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fa8c 	bl	8005578 <PRT_Report>
 8005060:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005064:	f103 031c 	add.w	r3, r3, #28
 8005068:	6018      	str	r0, [r3, #0]
					 SendDataOnPrinter(phost,PRT_Handle, POSreport);
 800506a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800506e:	3b24      	subs	r3, #36	; 0x24
 8005070:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8005074:	f102 021c 	add.w	r2, r2, #28
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 800507e:	f101 0120 	add.w	r1, r1, #32
 8005082:	6809      	ldr	r1, [r1, #0]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	f000 fb5b 	bl	8005740 <SendDataOnPrinter>
				 }


				 // Send Data on printer After choping into specified length.
				 SendDataOnPrinter(phost,PRT_Handle, buff);
 800508a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800508e:	3a1c      	subs	r2, #28
 8005090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005094:	3b24      	subs	r3, #36	; 0x24
 8005096:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 800509a:	f101 0120 	add.w	r1, r1, #32
 800509e:	6809      	ldr	r1, [r1, #0]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	f000 fb4d 	bl	8005740 <SendDataOnPrinter>

				 PRT_Handle->state = PRT_POLL;
 80050a6:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050aa:	f103 0320 	add.w	r3, r3, #32
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2203      	movs	r2, #3
 80050b2:	701a      	strb	r2, [r3, #0]
				 PRT_Handle->timer = phost->Timer;
 80050b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b8:	3b24      	subs	r3, #36	; 0x24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80050c0:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050c4:	f103 0320 	add.w	r3, r3, #32
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
				 PRT_Handle->DataReady = 0U;
 80050cc:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050d0:	f103 0320 	add.w	r3, r3, #32
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	741a      	strb	r2, [r3, #16]
				 break;
 80050da:	e049      	b.n	8005170 <USBH_PRT_Process+0x238>

			 case PRT_POLL:

				 if(USBH_LL_GetURBState(phost, PRT_Handle->InPipe) == USBH_URB_DONE)
 80050dc:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80050e0:	f103 0320 	add.w	r3, r3, #32
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	791a      	ldrb	r2, [r3, #4]
 80050e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ec:	3b24      	subs	r3, #36	; 0x24
 80050ee:	4611      	mov	r1, r2
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	f002 f939 	bl	8007368 <USBH_LL_GetURBState>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d138      	bne.n	800516e <USBH_PRT_Process+0x236>
				 {

					 status = USBH_LL_GetURBState(phost, PRT_Handle->InPipe);
 80050fc:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005100:	f103 0320 	add.w	r3, r3, #32
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	791a      	ldrb	r2, [r3, #4]
 8005108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800510c:	3b24      	subs	r3, #36	; 0x24
 800510e:	4611      	mov	r1, r2
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f002 f929 	bl	8007368 <USBH_LL_GetURBState>
 8005116:	4603      	mov	r3, r0
 8005118:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800511c:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8005120:	7013      	strb	r3, [r2, #0]
					 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->InPipe);
 8005122:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8005126:	f103 0320 	add.w	r3, r3, #32
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	791a      	ldrb	r2, [r3, #4]
 800512e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005132:	3b24      	subs	r3, #36	; 0x24
 8005134:	4611      	mov	r1, r2
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	f002 f884 	bl	8007244 <USBH_LL_GetLastXferSize>
 800513c:	4603      	mov	r3, r0
 800513e:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8005142:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8005146:	8013      	strh	r3, [r2, #0]
					 PRT_Handle->state = PRT_GET_DATA;
 8005148:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800514c:	f103 0320 	add.w	r3, r3, #32
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2202      	movs	r2, #2
 8005154:	701a      	strb	r2, [r3, #0]
					 USBH_Delay( PRT_Handle->poll);
 8005156:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800515a:	f103 0320 	add.w	r3, r3, #32
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	7a9b      	ldrb	r3, [r3, #10]
 8005162:	4618      	mov	r0, r3
 8005164:	f002 f96d 	bl	8007442 <USBH_Delay>
				 }

				 break;
 8005168:	e001      	b.n	800516e <USBH_PRT_Process+0x236>

			 default:
				 break;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <USBH_PRT_Process+0x238>
				 break;
 800516e:	bf00      	nop

	}



	return USBH_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	f507 571d 	add.w	r7, r7, #10048	; 0x2740
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200000c4 	.word	0x200000c4

08005184 <USBH_PRT_SOFProcess>:

static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d10c      	bne.n	80051b8 <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	7a92      	ldrb	r2, [r2, #10]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d302      	bcc.n	80051b8 <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USBH_PRT_Get_Device_Id>:


static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	22a1      	movs	r2, #161	; 0xa1
 80051d8:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	88fa      	ldrh	r2, [r7, #6]
 80051f0:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f001 fba4 	bl	8006946 <USBH_CtlReq>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <CheckCMD>:
/* @ checkCMD : Check command
 *
 */


int CheckCMD(const uint8_t *cmd){
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

	if( !strcmp(cmd,"VIDPID") )
 8005210:	4914      	ldr	r1, [pc, #80]	; (8005264 <CheckCMD+0x5c>)
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fa ffd8 	bl	80001c8 <strcmp>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <CheckCMD+0x1a>
	{
		return 1;
 800521e:	2301      	movs	r3, #1
 8005220:	e01b      	b.n	800525a <CheckCMD+0x52>
	}else if(!strcmp(cmd,"BAUDRATE") )
 8005222:	4911      	ldr	r1, [pc, #68]	; (8005268 <CheckCMD+0x60>)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fa ffcf 	bl	80001c8 <strcmp>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <CheckCMD+0x2c>
	{
		return 2;
 8005230:	2302      	movs	r3, #2
 8005232:	e012      	b.n	800525a <CheckCMD+0x52>
	}else if(!strcmp(cmd,"CHN_BAUDRATE"))
 8005234:	490d      	ldr	r1, [pc, #52]	; (800526c <CheckCMD+0x64>)
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fa ffc6 	bl	80001c8 <strcmp>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <CheckCMD+0x3e>
	{
		return 3;
 8005242:	2303      	movs	r3, #3
 8005244:	e009      	b.n	800525a <CheckCMD+0x52>
	}
	if( !strcmp(cmd,"PRINTREPORT"))
 8005246:	490a      	ldr	r1, [pc, #40]	; (8005270 <CheckCMD+0x68>)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fa ffbd 	bl	80001c8 <strcmp>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <CheckCMD+0x50>
	{
		return 4;
 8005254:	2304      	movs	r3, #4
 8005256:	e000      	b.n	800525a <CheckCMD+0x52>
	}

	return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	08007744 	.word	0x08007744
 8005268:	0800774c 	.word	0x0800774c
 800526c:	08007758 	.word	0x08007758
 8005270:	08007768 	.word	0x08007768

08005274 <reverse>:
/* @ reverse : Reverse the String
 * @ temp : string address
 */


void reverse(uint8_t * temp){
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(temp)-1;
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fa ffad 	bl	80001dc <strlen>
 8005282:	4603      	mov	r3, r0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
	uint8_t i=0;
 800528a:	2300      	movs	r3, #0
 800528c:	73bb      	strb	r3, [r7, #14]
	uint8_t j=0;
 800528e:	2300      	movs	r3, #0
 8005290:	737b      	strb	r3, [r7, #13]
	while(i < len){
 8005292:	e017      	b.n	80052c4 <reverse+0x50>
		j = temp[i];
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	737b      	strb	r3, [r7, #13]
		temp[i++] = temp[len];
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	441a      	add	r2, r3
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	73b9      	strb	r1, [r7, #14]
 80052aa:	4619      	mov	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	440b      	add	r3, r1
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
		temp[len--] = j;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	73fa      	strb	r2, [r7, #15]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4413      	add	r3, r2
 80052c0:	7b7a      	ldrb	r2, [r7, #13]
 80052c2:	701a      	strb	r2, [r3, #0]
	while(i < len){
 80052c4:	7bba      	ldrb	r2, [r7, #14]
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d3e3      	bcc.n	8005294 <reverse+0x20>

		//i++;//
		//len--;//
	}

}//end-reverse
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2A>:
/* @ I2A : Change Integer into ASCii
 * @ temp : Destination buffer of String
 * @ num : Integer
 */

void I2A(uint8_t *temp, uint32_t num){
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

	uint8_t i=0;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
	while(num){
 80052e2:	e019      	b.n	8005318 <I2A+0x44>
		temp[i++] = num%10+48;
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <I2A+0x58>)
 80052e8:	fba3 2301 	umull	r2, r3, r3, r1
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	1aca      	subs	r2, r1, r3
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	73f9      	strb	r1, [r7, #15]
 8005300:	4619      	mov	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	440b      	add	r3, r1
 8005306:	3230      	adds	r2, #48	; 0x30
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
		num /= 10;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <I2A+0x58>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	603b      	str	r3, [r7, #0]
	while(num){
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e2      	bne.n	80052e4 <I2A+0x10>
	}

	reverse(temp);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffa8 	bl	8005274 <reverse>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	cccccccd 	.word	0xcccccccd

08005330 <A2I>:
 * @ temp   : String buffer
 * @ return : converted Integer
 */

uint32_t A2I(uint8_t *temp)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	uint32_t num = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]

	for(int i=0; i < strlen(temp); i++)
 800533c:	2300      	movs	r3, #0
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	e00f      	b.n	8005362 <A2I+0x32>
	{
		num = num*10 + (temp[i]-48);
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	4619      	mov	r1, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	440b      	add	r3, r1
 8005358:	3b30      	subs	r3, #48	; 0x30
 800535a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i < strlen(temp); i++)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3301      	adds	r3, #1
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fa ff3a 	bl	80001dc <strlen>
 8005368:	4602      	mov	r2, r0
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d8e8      	bhi.n	8005342 <A2I+0x12>

	}

	return num;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <checkBudrate>:
 * @ temp : source buffer
 * @return : integer value or Baudrate
 */

uint32_t  checkBudrate(uint8_t *temp)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
	return A2I(temp);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff ffd4 	bl	8005330 <A2I>
 8005388:	4603      	mov	r3, r0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <ChangeBaudrate>:
/* @ ChangeBaudrate : It is used to change baudrate at run time.
 * @ Baudrate : This is desired baudrate
 */

static uint8_t ChangeBaudrate( uint32_t Baudrate )
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]

	MX_USART2_UART_Init(Baudrate);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb f938 	bl	8000610 <MX_USART2_UART_Init>

	return 1;
 80053a0:	2301      	movs	r3, #1
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <CommandOperation>:
 * @ PRT_Handle : Printer Handler Structure
 * @ return : Use as per requirement
 */

int CommandOperation( PRT_HandleTypeDef *PRT_Handle , uint8_t *buff)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b094      	sub	sp, #80	; 0x50
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
	//flag = 0 ; Command Not Found
	//flag = 1 ; Command  Found

	uint8_t temp[64],pktcnt,flag;
	uint16_t XferSize = strlen(buff);
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f7fa ff10 	bl	80001dc <strlen>
 80053bc:	4603      	mov	r3, r0
 80053be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	 pktcnt=flag=0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	 memset(temp,0,64);
 80053d0:	f107 0308 	add.w	r3, r7, #8
 80053d4:	2240      	movs	r2, #64	; 0x40
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f002 f8a3 	bl	8007524 <memset>

	 if( (XferSize == 0))
 80053de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <CommandOperation+0x3e>
		 return 1;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0b2      	b.n	8005550 <CommandOperation+0x1a4>

	 if( (XferSize > 15) )
 80053ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	d901      	bls.n	80053f6 <CommandOperation+0x4a>
		 return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e0ac      	b.n	8005550 <CommandOperation+0x1a4>

	 pktcnt = CheckCMD(buff);
 80053f6:	6838      	ldr	r0, [r7, #0]
 80053f8:	f7ff ff06 	bl	8005208 <CheckCMD>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	 switch( pktcnt )
 8005402:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005406:	3b01      	subs	r3, #1
 8005408:	2b03      	cmp	r3, #3
 800540a:	f200 8094 	bhi.w	8005536 <CommandOperation+0x18a>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <CommandOperation+0x68>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005425 	.word	0x08005425
 8005418:	080054a5 	.word	0x080054a5
 800541c:	080054d9 	.word	0x080054d9
 8005420:	08005531 	.word	0x08005531
		 {
		 case VIDPID:// Get Vid, Pid od device
			 I2A(temp,PRT_Handle->vID);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8b1b      	ldrh	r3, [r3, #24]
 8005428:	461a      	mov	r2, r3
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff4f 	bl	80052d4 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fa fece 	bl	80001dc <strlen>
 8005440:	4603      	mov	r3, r0
 8005442:	b29a      	uxth	r2, r3
 8005444:	f107 0108 	add.w	r1, r7, #8
 8005448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800544c:	4842      	ldr	r0, [pc, #264]	; (8005558 <CommandOperation+0x1ac>)
 800544e:	f7fd ff48 	bl	80032e2 <HAL_UART_Transmit>
			 I2A(temp,PRT_Handle->pID);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8b5b      	ldrh	r3, [r3, #26]
 8005456:	461a      	mov	r2, r3
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ff38 	bl	80052d4 <I2A>
			 HAL_UART_Transmit(&huart2, ",", strlen(","),1000);
 8005464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005468:	2201      	movs	r2, #1
 800546a:	493c      	ldr	r1, [pc, #240]	; (800555c <CommandOperation+0x1b0>)
 800546c:	483a      	ldr	r0, [pc, #232]	; (8005558 <CommandOperation+0x1ac>)
 800546e:	f7fd ff38 	bl	80032e2 <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, &temp, strlen( temp),1000);
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	4618      	mov	r0, r3
 8005478:	f7fa feb0 	bl	80001dc <strlen>
 800547c:	4603      	mov	r3, r0
 800547e:	b29a      	uxth	r2, r3
 8005480:	f107 0108 	add.w	r1, r7, #8
 8005484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005488:	4833      	ldr	r0, [pc, #204]	; (8005558 <CommandOperation+0x1ac>)
 800548a:	f7fd ff2a 	bl	80032e2 <HAL_UART_Transmit>
			 memset(temp,0,64);
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f002 f844 	bl	8007524 <memset>
			 flag = 1; //flag = 1 ; Command Found
 800549c:	2301      	movs	r3, #1
 800549e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 80054a2:	e053      	b.n	800554c <CommandOperation+0x1a0>

		 case BAUDRATE:// Get current baudrate default 9600
			 I2A(temp,PRT_Handle->Budrate);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff10 	bl	80052d4 <I2A>
			 HAL_UART_Transmit(&huart2, &temp, strlen(temp),1000);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fa fe8f 	bl	80001dc <strlen>
 80054be:	4603      	mov	r3, r0
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	f107 0108 	add.w	r1, r7, #8
 80054c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ca:	4823      	ldr	r0, [pc, #140]	; (8005558 <CommandOperation+0x1ac>)
 80054cc:	f7fd ff09 	bl	80032e2 <HAL_UART_Transmit>
		 	 flag = 1; //flag = 1 ; Command Found
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		 	 break;
 80054d6:	e039      	b.n	800554c <CommandOperation+0x1a0>

		 case CHN_BAUDRATE:// Change baudrate

			 HAL_UART_Transmit(&huart2, "Waiting for modified baudrate\n", strlen( "Waiting for modified baudrate\n"),1000);
 80054d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054dc:	221e      	movs	r2, #30
 80054de:	4920      	ldr	r1, [pc, #128]	; (8005560 <CommandOperation+0x1b4>)
 80054e0:	481d      	ldr	r0, [pc, #116]	; (8005558 <CommandOperation+0x1ac>)
 80054e2:	f7fd fefe 	bl	80032e2 <HAL_UART_Transmit>
			 do
			 {
				 memset(temp,0,64);
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f002 f818 	bl	8007524 <memset>
				 HAL_UART_Receive(&huart2, &temp, 64,1000);
 80054f4:	f107 0108 	add.w	r1, r7, #8
 80054f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	4816      	ldr	r0, [pc, #88]	; (8005558 <CommandOperation+0x1ac>)
 8005500:	f7fd ff88 	bl	8003414 <HAL_UART_Receive>

			 }while(!strlen(temp));
 8005504:	f107 0308 	add.w	r3, r7, #8
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0eb      	beq.n	80054e6 <CommandOperation+0x13a>

			 PRT_Handle->Budrate = checkBudrate(temp);
 800550e:	f107 0308 	add.w	r3, r7, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff31 	bl	800537a <checkBudrate>
 8005518:	4602      	mov	r2, r0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	61da      	str	r2, [r3, #28]
			 flag = ChangeBaudrate(  PRT_Handle->Budrate );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff ff35 	bl	8005392 <ChangeBaudrate>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 800552e:	e00d      	b.n	800554c <CommandOperation+0x1a0>

		 case PRINTREPORT:
			 	 printReport();
 8005530:	f000 f81a 	bl	8005568 <printReport>
			 	 break;
 8005534:	e00a      	b.n	800554c <CommandOperation+0x1a0>
		 default:
			 HAL_UART_Transmit(&huart2, "This is not know Command\n", strlen(  "This is not know Command\n"),1000);
 8005536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553a:	2219      	movs	r2, #25
 800553c:	4909      	ldr	r1, [pc, #36]	; (8005564 <CommandOperation+0x1b8>)
 800553e:	4806      	ldr	r0, [pc, #24]	; (8005558 <CommandOperation+0x1ac>)
 8005540:	f7fd fecf 	bl	80032e2 <HAL_UART_Transmit>
			 flag = 0; //flag = 0 ; Command Not Found
 8005544:	2300      	movs	r3, #0
 8005546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			 break;
 800554a:	bf00      	nop

		 }//end-Switch



	 return flag;
 800554c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005550:	4618      	mov	r0, r3
 8005552:	3750      	adds	r7, #80	; 0x50
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200000c4 	.word	0x200000c4
 800555c:	08007774 	.word	0x08007774
 8005560:	08007778 	.word	0x08007778
 8005564:	08007798 	.word	0x08007798

08005568 <printReport>:


uint8_t printReport(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
	/*
	 * Use it as per requirement and Conditions.
	 */

	return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <PRT_Report>:
 * @ pData :  Received RAW data from User
 * @ return : converted data address into post scripts
 */

uint8_t *PRT_Report(uint8_t *pData)
{
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

	memset(dData,0,2000);
 8005580:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005584:	2100      	movs	r1, #0
 8005586:	4865      	ldr	r0, [pc, #404]	; (800571c <PRT_Report+0x1a4>)
 8005588:	f001 ffcc 	bl	8007524 <memset>

	  if(strlen(pData) > 15)
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7fa fe25 	bl	80001dc <strlen>
 8005592:	4603      	mov	r3, r0
 8005594:	2b0f      	cmp	r3, #15
 8005596:	d97f      	bls.n	8005698 <PRT_Report+0x120>
		  {
			  uint16_t startIdx =0;   // starting index of Buffer data
 8005598:	2300      	movs	r3, #0
 800559a:	827b      	strh	r3, [r7, #18]
			  uint16_t lastIdx =0;    // Last index of Buffer data
 800559c:	2300      	movs	r3, #0
 800559e:	823b      	strh	r3, [r7, #16]
			  uint8_t *startAddr; // starting address of Buffer data
			  uint8_t *lastAddr;  // Last address of Buffer data

			  strcat(dData, "/Courier findfont [ 12 0 0 12 0 0] makefont setfont \r\n");
 80055a0:	485e      	ldr	r0, [pc, #376]	; (800571c <PRT_Report+0x1a4>)
 80055a2:	f7fa fe1b 	bl	80001dc <strlen>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	4b5c      	ldr	r3, [pc, #368]	; (800571c <PRT_Report+0x1a4>)
 80055ac:	4413      	add	r3, r2
 80055ae:	4a5c      	ldr	r2, [pc, #368]	; (8005720 <PRT_Report+0x1a8>)
 80055b0:	4614      	mov	r4, r2
 80055b2:	469c      	mov	ip, r3
 80055b4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80055b8:	4665      	mov	r5, ip
 80055ba:	4626      	mov	r6, r4
 80055bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055be:	6028      	str	r0, [r5, #0]
 80055c0:	6069      	str	r1, [r5, #4]
 80055c2:	60aa      	str	r2, [r5, #8]
 80055c4:	60eb      	str	r3, [r5, #12]
 80055c6:	3410      	adds	r4, #16
 80055c8:	f10c 0c10 	add.w	ip, ip, #16
 80055cc:	4574      	cmp	r4, lr
 80055ce:	d1f3      	bne.n	80055b8 <PRT_Report+0x40>
 80055d0:	4663      	mov	r3, ip
 80055d2:	4622      	mov	r2, r4
 80055d4:	6810      	ldr	r0, [r2, #0]
 80055d6:	6018      	str	r0, [r3, #0]
 80055d8:	8891      	ldrh	r1, [r2, #4]
 80055da:	7992      	ldrb	r2, [r2, #6]
 80055dc:	8099      	strh	r1, [r3, #4]
 80055de:	719a      	strb	r2, [r3, #6]
			  strcat(dData, "/showline { gsave show grestore 0 -12  rmoveto } def \r\n");
 80055e0:	484e      	ldr	r0, [pc, #312]	; (800571c <PRT_Report+0x1a4>)
 80055e2:	f7fa fdfb 	bl	80001dc <strlen>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b4c      	ldr	r3, [pc, #304]	; (800571c <PRT_Report+0x1a4>)
 80055ec:	4413      	add	r3, r2
 80055ee:	4a4d      	ldr	r2, [pc, #308]	; (8005724 <PRT_Report+0x1ac>)
 80055f0:	4614      	mov	r4, r2
 80055f2:	469c      	mov	ip, r3
 80055f4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80055f8:	4665      	mov	r5, ip
 80055fa:	4626      	mov	r6, r4
 80055fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055fe:	6028      	str	r0, [r5, #0]
 8005600:	6069      	str	r1, [r5, #4]
 8005602:	60aa      	str	r2, [r5, #8]
 8005604:	60eb      	str	r3, [r5, #12]
 8005606:	3410      	adds	r4, #16
 8005608:	f10c 0c10 	add.w	ip, ip, #16
 800560c:	4574      	cmp	r4, lr
 800560e:	d1f3      	bne.n	80055f8 <PRT_Report+0x80>
 8005610:	4662      	mov	r2, ip
 8005612:	4623      	mov	r3, r4
 8005614:	cb03      	ldmia	r3!, {r0, r1}
 8005616:	6010      	str	r0, [r2, #0]
 8005618:	6051      	str	r1, [r2, #4]
			  strcat(dData, " 18   745  moveto \r\n");
 800561a:	4840      	ldr	r0, [pc, #256]	; (800571c <PRT_Report+0x1a4>)
 800561c:	f7fa fdde 	bl	80001dc <strlen>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	4b3d      	ldr	r3, [pc, #244]	; (800571c <PRT_Report+0x1a4>)
 8005626:	4413      	add	r3, r2
 8005628:	4a3f      	ldr	r2, [pc, #252]	; (8005728 <PRT_Report+0x1b0>)
 800562a:	461d      	mov	r5, r3
 800562c:	4614      	mov	r4, r2
 800562e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005630:	6028      	str	r0, [r5, #0]
 8005632:	6069      	str	r1, [r5, #4]
 8005634:	60aa      	str	r2, [r5, #8]
 8005636:	60eb      	str	r3, [r5, #12]
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	6128      	str	r0, [r5, #16]
 800563c:	7923      	ldrb	r3, [r4, #4]
 800563e:	752b      	strb	r3, [r5, #20]

			  for(int idx = 0; idx < strlen(pData); )
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e021      	b.n	800568a <PRT_Report+0x112>
			  {
				  startIdx  =  idx;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	827b      	strh	r3, [r7, #18]
				  startAddr = (pData+startIdx);
 800564a:	8a7b      	ldrh	r3, [r7, #18]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
				  lastAddr   = (uint8_t *)strstr(pData+startIdx, "\r\n" );
 8005652:	8a7b      	ldrh	r3, [r7, #18]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4413      	add	r3, r2
 8005658:	4934      	ldr	r1, [pc, #208]	; (800572c <PRT_Report+0x1b4>)
 800565a:	4618      	mov	r0, r3
 800565c:	f002 f831 	bl	80076c2 <strstr>
 8005660:	60b8      	str	r0, [r7, #8]

				  lastIdx = lastAddr - startAddr;
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	823b      	strh	r3, [r7, #16]

				  idx = idx  + lastIdx;
 800566a:	8a3b      	ldrh	r3, [r7, #16]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

				  fun2(pData, startIdx, lastIdx);
 8005672:	8a3a      	ldrh	r2, [r7, #16]
 8005674:	8a7b      	ldrh	r3, [r7, #18]
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8d1 	bl	8005820 <fun2>

				  idx++;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	3301      	adds	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
				  idx++;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
			  for(int idx = 0; idx < strlen(pData); )
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fa fda6 	bl	80001dc <strlen>
 8005690:	4602      	mov	r2, r0
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	d8d6      	bhi.n	8005646 <PRT_Report+0xce>
			  }//end -for(idx)
		  }//end- if()

	  	  strcat(dData," showpage \r\n");
 8005698:	4820      	ldr	r0, [pc, #128]	; (800571c <PRT_Report+0x1a4>)
 800569a:	f7fa fd9f 	bl	80001dc <strlen>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b1e      	ldr	r3, [pc, #120]	; (800571c <PRT_Report+0x1a4>)
 80056a4:	4413      	add	r3, r2
 80056a6:	4a22      	ldr	r2, [pc, #136]	; (8005730 <PRT_Report+0x1b8>)
 80056a8:	461c      	mov	r4, r3
 80056aa:	4613      	mov	r3, r2
 80056ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056ae:	6020      	str	r0, [r4, #0]
 80056b0:	6061      	str	r1, [r4, #4]
 80056b2:	60a2      	str	r2, [r4, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	7323      	strb	r3, [r4, #12]
		  strcat(dData, "18   745  moveto \r\n");
 80056b8:	4818      	ldr	r0, [pc, #96]	; (800571c <PRT_Report+0x1a4>)
 80056ba:	f7fa fd8f 	bl	80001dc <strlen>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <PRT_Report+0x1a4>)
 80056c4:	4413      	add	r3, r2
 80056c6:	4a1b      	ldr	r2, [pc, #108]	; (8005734 <PRT_Report+0x1bc>)
 80056c8:	461d      	mov	r5, r3
 80056ca:	4614      	mov	r4, r2
 80056cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ce:	6028      	str	r0, [r5, #0]
 80056d0:	6069      	str	r1, [r5, #4]
 80056d2:	60aa      	str	r2, [r5, #8]
 80056d4:	60eb      	str	r3, [r5, #12]
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	6128      	str	r0, [r5, #16]
		  strcat(dData, " showpage \r\n");
 80056da:	4810      	ldr	r0, [pc, #64]	; (800571c <PRT_Report+0x1a4>)
 80056dc:	f7fa fd7e 	bl	80001dc <strlen>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <PRT_Report+0x1a4>)
 80056e6:	4413      	add	r3, r2
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <PRT_Report+0x1c0>)
 80056ea:	461c      	mov	r4, r3
 80056ec:	4613      	mov	r3, r2
 80056ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056f0:	6020      	str	r0, [r4, #0]
 80056f2:	6061      	str	r1, [r4, #4]
 80056f4:	60a2      	str	r2, [r4, #8]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	81a3      	strh	r3, [r4, #12]

		  HAL_UART_Transmit(&huart2, dData, strlen(dData), 3000);
 80056fa:	4808      	ldr	r0, [pc, #32]	; (800571c <PRT_Report+0x1a4>)
 80056fc:	f7fa fd6e 	bl	80001dc <strlen>
 8005700:	4603      	mov	r3, r0
 8005702:	b29a      	uxth	r2, r3
 8005704:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005708:	4904      	ldr	r1, [pc, #16]	; (800571c <PRT_Report+0x1a4>)
 800570a:	480c      	ldr	r0, [pc, #48]	; (800573c <PRT_Report+0x1c4>)
 800570c:	f7fd fde9 	bl	80032e2 <HAL_UART_Transmit>
return dData;
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <PRT_Report+0x1a4>)

}//end-PRT_Report()
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571a:	bf00      	nop
 800571c:	20000128 	.word	0x20000128
 8005720:	080077b4 	.word	0x080077b4
 8005724:	080077ec 	.word	0x080077ec
 8005728:	08007824 	.word	0x08007824
 800572c:	0800783c 	.word	0x0800783c
 8005730:	08007840 	.word	0x08007840
 8005734:	08007850 	.word	0x08007850
 8005738:	08007864 	.word	0x08007864
 800573c:	200000c4 	.word	0x200000c4

08005740 <SendDataOnPrinter>:
 * @ buff :  received data
 */


uint8_t SendDataOnPrinter(USBH_HandleTypeDef *phost, PRT_HandleTypeDef *PRT_Handle, uint8_t *buff)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b09a      	sub	sp, #104	; 0x68
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	uint8_t temp[64],pktcnt=0,status;
 800574c:	2300      	movs	r3, #0
 800574e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint16_t XferSize=0;
 8005752:	2300      	movs	r3, #0
 8005754:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	memset(temp,0,64);
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	2240      	movs	r2, #64	; 0x40
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fedf 	bl	8007524 <memset>
	XferSize = strlen(buff);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fa fd38 	bl	80001dc <strlen>
 800576c:	4603      	mov	r3, r0
 800576e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8005772:	2300      	movs	r3, #0
 8005774:	65bb      	str	r3, [r7, #88]	; 0x58
 8005776:	e040      	b.n	80057fa <SendDataOnPrinter+0xba>
	  {
			// Number of packets are important because the max packet size is decided and can not send more than that.
			// Here in this case is 64 bytes. It is already decided by device/configuration structures.
			 for(int j=0; j < PRT_Handle->length; j++)
 8005778:	2300      	movs	r3, #0
 800577a:	657b      	str	r3, [r7, #84]	; 0x54
 800577c:	e00f      	b.n	800579e <SendDataOnPrinter+0x5e>
			 {
				 temp[j] = buff[i+j];
 800577e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005782:	4413      	add	r3, r2
 8005784:	461a      	mov	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	7819      	ldrb	r1, [r3, #0]
 800578c:	f107 0210 	add.w	r2, r7, #16
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	4413      	add	r3, r2
 8005794:	460a      	mov	r2, r1
 8005796:	701a      	strb	r2, [r3, #0]
			 for(int j=0; j < PRT_Handle->length; j++)
 8005798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579a:	3301      	adds	r3, #1
 800579c:	657b      	str	r3, [r7, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	891b      	ldrh	r3, [r3, #8]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a6:	4293      	cmp	r3, r2
 80057a8:	dbe9      	blt.n	800577e <SendDataOnPrinter+0x3e>
			 }//for(j)
			 PRT_Handle->buff = temp;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f107 0210 	add.w	r2, r7, #16
 80057b0:	615a      	str	r2, [r3, #20]
			 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->InPipe, 0);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6959      	ldr	r1, [r3, #20]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	891a      	ldrh	r2, [r3, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	7918      	ldrb	r0, [r3, #4]
 80057be:	2300      	movs	r3, #0
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4603      	mov	r3, r0
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f001 face 	bl	8006d66 <USBH_BulkSendData>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			 memset(temp,0,64);
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	2240      	movs	r2, #64	; 0x40
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 fea3 	bl	8007524 <memset>
			 USBH_Delay(10);
 80057de:	200a      	movs	r0, #10
 80057e0:	f001 fe2f 	bl	8007442 <USBH_Delay>
			 pktcnt++;
 80057e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057e8:	3301      	adds	r3, #1
 80057ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	 for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	891b      	ldrh	r3, [r3, #8]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f6:	4413      	add	r3, r2
 80057f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	891b      	ldrh	r3, [r3, #8]
 8005804:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8005808:	fbb1 f3f3 	udiv	r3, r1, r3
 800580c:	b29b      	uxth	r3, r3
 800580e:	429a      	cmp	r2, r3
 8005810:	d9b2      	bls.n	8005778 <SendDataOnPrinter+0x38>
	}

	 return status;
 8005812:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
}
 8005816:	4618      	mov	r0, r3
 8005818:	3760      	adds	r7, #96	; 0x60
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <fun2>:
 * @ lastIdx : last  index
 */


void fun2(uint8_t *pData, uint16_t startIdx, uint16_t lastIdx)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b0b7      	sub	sp, #220	; 0xdc
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
 800582c:	4613      	mov	r3, r2
 800582e:	803b      	strh	r3, [r7, #0]
	uint16_t idx=0;
 8005830:	2300      	movs	r3, #0
 8005832:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint8_t temp[200];
	memset(temp,0,200);
 8005836:	f107 030c 	add.w	r3, r7, #12
 800583a:	22c8      	movs	r2, #200	; 0xc8
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fe70 	bl	8007524 <memset>
	strcat(dData,"(");
 8005844:	4822      	ldr	r0, [pc, #136]	; (80058d0 <fun2+0xb0>)
 8005846:	f7fa fcc9 	bl	80001dc <strlen>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <fun2+0xb0>)
 8005850:	4413      	add	r3, r2
 8005852:	4920      	ldr	r1, [pc, #128]	; (80058d4 <fun2+0xb4>)
 8005854:	461a      	mov	r2, r3
 8005856:	460b      	mov	r3, r1
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	8013      	strh	r3, [r2, #0]
	while( idx <  lastIdx )
 800585c:	e010      	b.n	8005880 <fun2+0x60>
	{
		temp[idx++] =  pData[startIdx++];
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	807a      	strh	r2, [r7, #2]
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	441a      	add	r2, r3
 800586a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800586e:	1c59      	adds	r1, r3, #1
 8005870:	f8a7 10d6 	strh.w	r1, [r7, #214]	; 0xd6
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800587a:	440b      	add	r3, r1
 800587c:	f803 2ccc 	strb.w	r2, [r3, #-204]
	while( idx <  lastIdx )
 8005880:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8005884:	883b      	ldrh	r3, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3e9      	bcc.n	800585e <fun2+0x3e>
	}
	temp[idx] = '\0';
 800588a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800588e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8005892:	4413      	add	r3, r2
 8005894:	2200      	movs	r2, #0
 8005896:	f803 2ccc 	strb.w	r2, [r3, #-204]
	strcat(dData,temp);
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	4619      	mov	r1, r3
 80058a0:	480b      	ldr	r0, [pc, #44]	; (80058d0 <fun2+0xb0>)
 80058a2:	f001 feff 	bl	80076a4 <strcat>
	strcat(dData, ") showline \r\n");
 80058a6:	480a      	ldr	r0, [pc, #40]	; (80058d0 <fun2+0xb0>)
 80058a8:	f7fa fc98 	bl	80001dc <strlen>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <fun2+0xb0>)
 80058b2:	4413      	add	r3, r2
 80058b4:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <fun2+0xb8>)
 80058b6:	461c      	mov	r4, r3
 80058b8:	4613      	mov	r3, r2
 80058ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058bc:	6020      	str	r0, [r4, #0]
 80058be:	6061      	str	r1, [r4, #4]
 80058c0:	60a2      	str	r2, [r4, #8]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	81a3      	strh	r3, [r4, #12]
}
 80058c6:	bf00      	nop
 80058c8:	37dc      	adds	r7, #220	; 0xdc
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd90      	pop	{r4, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000128 	.word	0x20000128
 80058d4:	08007874 	.word	0x08007874
 80058d8:	08007878 	.word	0x08007878

080058dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80058f0:	2302      	movs	r3, #2
 80058f2:	e029      	b.n	8005948 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	79fa      	ldrb	r2, [r7, #7]
 80058f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f81f 	bl	8005950 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f001 fbcd 	bl	80070e0 <USBH_LL_Init>

  return USBH_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e009      	b.n	8005976 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	33e0      	adds	r3, #224	; 0xe0
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	2200      	movs	r2, #0
 800596e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b0e      	cmp	r3, #14
 800597a:	d9f2      	bls.n	8005962 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e009      	b.n	8005996 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800599c:	d3f1      	bcc.n	8005982 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d016      	beq.n	8005a3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10e      	bne.n	8005a34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	33de      	adds	r3, #222	; 0xde
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	e004      	b.n	8005a3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a34:	2302      	movs	r3, #2
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e001      	b.n	8005a3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	70fb      	strb	r3, [r7, #3]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70bb      	strb	r3, [r7, #2]
 8005a62:	4613      	mov	r3, r2
 8005a64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005a74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a76:	e025      	b.n	8005ac4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	221a      	movs	r2, #26
 8005a7c:	fb02 f303 	mul.w	r3, r2, r3
 8005a80:	3308      	adds	r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	3302      	adds	r3, #2
 8005a88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	795b      	ldrb	r3, [r3, #5]
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d002      	beq.n	8005a9a <USBH_FindInterface+0x4e>
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2bff      	cmp	r3, #255	; 0xff
 8005a98:	d111      	bne.n	8005abe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005a9e:	78ba      	ldrb	r2, [r7, #2]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d002      	beq.n	8005aaa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005aa4:	78bb      	ldrb	r3, [r7, #2]
 8005aa6:	2bff      	cmp	r3, #255	; 0xff
 8005aa8:	d109      	bne.n	8005abe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005aae:	787a      	ldrb	r2, [r7, #1]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d002      	beq.n	8005aba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ab4:	787b      	ldrb	r3, [r7, #1]
 8005ab6:	2bff      	cmp	r3, #255	; 0xff
 8005ab8:	d101      	bne.n	8005abe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	e006      	b.n	8005acc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d9d6      	bls.n	8005a78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005aca:	23ff      	movs	r3, #255	; 0xff
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fb39 	bl	8007158 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fc51 	bl	8007390 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b00:	2302      	movs	r3, #2
 8005b02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d102      	bne.n	8005b1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2203      	movs	r2, #3
 8005b18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b0b      	cmp	r3, #11
 8005b22:	f200 81b3 	bhi.w	8005e8c <USBH_Process+0x394>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <USBH_Process+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b8f 	.word	0x08005b8f
 8005b34:	08005bf7 	.word	0x08005bf7
 8005b38:	08005e27 	.word	0x08005e27
 8005b3c:	08005e8d 	.word	0x08005e8d
 8005b40:	08005c9b 	.word	0x08005c9b
 8005b44:	08005dcd 	.word	0x08005dcd
 8005b48:	08005cd1 	.word	0x08005cd1
 8005b4c:	08005cf1 	.word	0x08005cf1
 8005b50:	08005d11 	.word	0x08005d11
 8005b54:	08005d3f 	.word	0x08005d3f
 8005b58:	08005e0f 	.word	0x08005e0f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8193 	beq.w	8005e90 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005b70:	20c8      	movs	r0, #200	; 0xc8
 8005b72:	f001 fc66 	bl	8007442 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fb49 	bl	800720e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005b8c:	e180      	b.n	8005e90 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ba6:	e182      	b.n	8005eae <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bb2:	d914      	bls.n	8005bde <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005bba:	3301      	adds	r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d903      	bls.n	8005bd6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	220d      	movs	r2, #13
 8005bd2:	701a      	strb	r2, [r3, #0]
      break;
 8005bd4:	e16b      	b.n	8005eae <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
      break;
 8005bdc:	e167      	b.n	8005eae <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005be4:	f103 020a 	add.w	r2, r3, #10
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005bee:	200a      	movs	r0, #10
 8005bf0:	f001 fc27 	bl	8007442 <USBH_Delay>
      break;
 8005bf4:	e15b      	b.n	8005eae <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c06:	2104      	movs	r1, #4
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005c0c:	2064      	movs	r0, #100	; 0x64
 8005c0e:	f001 fc18 	bl	8007442 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 fad6 	bl	80071c4 <USBH_LL_GetSpeed>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2205      	movs	r2, #5
 8005c26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f001 f8ef 	bl	8006e0e <USBH_AllocPipe>
 8005c30:	4603      	mov	r3, r0
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 f8e7 	bl	8006e0e <USBH_AllocPipe>
 8005c40:	4603      	mov	r3, r0
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7919      	ldrb	r1, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	9202      	str	r2, [sp, #8]
 8005c60:	2200      	movs	r2, #0
 8005c62:	9201      	str	r2, [sp, #4]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	4603      	mov	r3, r0
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 f8a0 	bl	8006db0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7959      	ldrb	r1, [r3, #5]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005c84:	b292      	uxth	r2, r2
 8005c86:	9202      	str	r2, [sp, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	9201      	str	r2, [sp, #4]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2200      	movs	r2, #0
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f88c 	bl	8006db0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005c98:	e109      	b.n	8005eae <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f90c 	bl	8005eb8 <USBH_HandleEnum>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 80f3 	bne.w	8005e94 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d103      	bne.n	8005cc8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005cc6:	e0e5      	b.n	8005e94 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2207      	movs	r2, #7
 8005ccc:	701a      	strb	r2, [r3, #0]
      break;
 8005cce:	e0e1      	b.n	8005e94 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80de 	beq.w	8005e98 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2208      	movs	r2, #8
 8005cec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005cee:	e0d3      	b.n	8005e98 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fc20 	bl	8006540 <USBH_SetCfg>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80ca 	bne.w	8005e9c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2209      	movs	r2, #9
 8005d0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d0e:	e0c5      	b.n	8005e9c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005d1e:	2101      	movs	r1, #1
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fc30 	bl	8006586 <USBH_SetFeature>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 80b9 	bne.w	8005ea0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	220a      	movs	r2, #10
 8005d32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d34:	e0b4      	b.n	8005ea0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	220a      	movs	r2, #10
 8005d3a:	701a      	strb	r2, [r3, #0]
      break;
 8005d3c:	e0b0      	b.n	8005ea0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80ad 	beq.w	8005ea4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
 8005d56:	e016      	b.n	8005d86 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005d58:	7bfa      	ldrb	r2, [r7, #15]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	32de      	adds	r2, #222	; 0xde
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	791a      	ldrb	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d108      	bne.n	8005d80 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	32de      	adds	r2, #222	; 0xde
 8005d74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005d7e:	e005      	b.n	8005d8c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	3301      	adds	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0e5      	beq.n	8005d58 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2206      	movs	r2, #6
 8005dac:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005db4:	2103      	movs	r1, #3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005dba:	e073      	b.n	8005ea4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	220d      	movs	r2, #13
 8005dc0:	701a      	strb	r2, [r3, #0]
      break;
 8005dc2:	e06f      	b.n	8005ea4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	220d      	movs	r2, #13
 8005dc8:	701a      	strb	r2, [r3, #0]
      break;
 8005dca:	e06b      	b.n	8005ea4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d017      	beq.n	8005e06 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	220b      	movs	r2, #11
 8005df2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005df4:	e058      	b.n	8005ea8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d154      	bne.n	8005ea8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	220d      	movs	r2, #13
 8005e02:	701a      	strb	r2, [r3, #0]
      break;
 8005e04:	e050      	b.n	8005ea8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	220d      	movs	r2, #13
 8005e0a:	701a      	strb	r2, [r3, #0]
      break;
 8005e0c:	e04c      	b.n	8005ea8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d049      	beq.n	8005eac <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
     //   phost->gState = HOST_CLASS_REQUEST;

      }
      break;
 8005e24:	e042      	b.n	8005eac <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fd8e 	bl	8005950 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e62:	2105      	movs	r1, #5
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d107      	bne.n	8005e84 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe2b 	bl	8005ad8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e82:	e014      	b.n	8005eae <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 f967 	bl	8007158 <USBH_LL_Start>
      break;
 8005e8a:	e010      	b.n	8005eae <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005e8c:	bf00      	nop
 8005e8e:	e00e      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005e90:	bf00      	nop
 8005e92:	e00c      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005e94:	bf00      	nop
 8005e96:	e00a      	b.n	8005eae <USBH_Process+0x3b6>
    break;
 8005e98:	bf00      	nop
 8005e9a:	e008      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005e9c:	bf00      	nop
 8005e9e:	e006      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e004      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005ea4:	bf00      	nop
 8005ea6:	e002      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005ea8:	bf00      	nop
 8005eaa:	e000      	b.n	8005eae <USBH_Process+0x3b6>
      break;
 8005eac:	bf00      	nop
  }
  return USBH_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af04      	add	r7, sp, #16
 8005ebe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b07      	cmp	r3, #7
 8005ece:	f200 81c1 	bhi.w	8006254 <USBH_HandleEnum+0x39c>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <USBH_HandleEnum+0x20>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005fb7 	.word	0x08005fb7
 8005ee0:	08006021 	.word	0x08006021
 8005ee4:	080060af 	.word	0x080060af
 8005ee8:	08006119 	.word	0x08006119
 8005eec:	08006189 	.word	0x08006189
 8005ef0:	080061cf 	.word	0x080061cf
 8005ef4:	08006215 	.word	0x08006215
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005ef8:	2108      	movs	r1, #8
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa50 	bl	80063a0 <USBH_Get_DevDesc>
 8005f00:	4603      	mov	r3, r0
 8005f02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d130      	bne.n	8005f6c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7919      	ldrb	r1, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f2e:	b292      	uxth	r2, r2
 8005f30:	9202      	str	r2, [sp, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	9201      	str	r2, [sp, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 ff37 	bl	8006db0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7959      	ldrb	r1, [r3, #5]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f56:	b292      	uxth	r2, r2
 8005f58:	9202      	str	r2, [sp, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	9201      	str	r2, [sp, #4]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4603      	mov	r3, r0
 8005f62:	2200      	movs	r2, #0
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 ff23 	bl	8006db0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005f6a:	e175      	b.n	8006258 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	f040 8172 	bne.w	8006258 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d903      	bls.n	8005f96 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	220d      	movs	r2, #13
 8005f92:	701a      	strb	r2, [r3, #0]
      break;
 8005f94:	e160      	b.n	8006258 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	795b      	ldrb	r3, [r3, #5]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ff57 	bl	8006e50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	791b      	ldrb	r3, [r3, #4]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 ff51 	bl	8006e50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
      break;
 8005fb4:	e150      	b.n	8006258 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005fb6:	2112      	movs	r1, #18
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9f1 	bl	80063a0 <USBH_Get_DevDesc>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d103      	bne.n	8005fd0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005fce:	e145      	b.n	800625c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	f040 8142 	bne.w	800625c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fde:	3301      	adds	r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d903      	bls.n	8005ffa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	220d      	movs	r2, #13
 8005ff6:	701a      	strb	r2, [r3, #0]
      break;
 8005ff8:	e130      	b.n	800625c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	795b      	ldrb	r3, [r3, #5]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 ff25 	bl	8006e50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 ff1f 	bl	8006e50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
      break;
 800601e:	e11d      	b.n	800625c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006020:	2101      	movs	r1, #1
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa68 	bl	80064f8 <USBH_SetAddress>
 8006028:	4603      	mov	r3, r0
 800602a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d132      	bne.n	8006098 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006032:	2002      	movs	r0, #2
 8006034:	f001 fa05 	bl	8007442 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2203      	movs	r2, #3
 8006044:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	7919      	ldrb	r1, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800605a:	b292      	uxth	r2, r2
 800605c:	9202      	str	r2, [sp, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	9201      	str	r2, [sp, #4]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4603      	mov	r3, r0
 8006066:	2280      	movs	r2, #128	; 0x80
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fea1 	bl	8006db0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7959      	ldrb	r1, [r3, #5]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006082:	b292      	uxth	r2, r2
 8006084:	9202      	str	r2, [sp, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	9201      	str	r2, [sp, #4]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	4603      	mov	r3, r0
 800608e:	2200      	movs	r2, #0
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fe8d 	bl	8006db0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006096:	e0e3      	b.n	8006260 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b03      	cmp	r3, #3
 800609c:	f040 80e0 	bne.w	8006260 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	220d      	movs	r2, #13
 80060a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	705a      	strb	r2, [r3, #1]
      break;
 80060ac:	e0d8      	b.n	8006260 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80060ae:	2109      	movs	r1, #9
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f99d 	bl	80063f0 <USBH_Get_CfgDesc>
 80060b6:	4603      	mov	r3, r0
 80060b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2204      	movs	r2, #4
 80060c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80060c6:	e0cd      	b.n	8006264 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	f040 80ca 	bne.w	8006264 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060d6:	3301      	adds	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d903      	bls.n	80060f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	220d      	movs	r2, #13
 80060ee:	701a      	strb	r2, [r3, #0]
      break;
 80060f0:	e0b8      	b.n	8006264 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	795b      	ldrb	r3, [r3, #5]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fea9 	bl	8006e50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	791b      	ldrb	r3, [r3, #4]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fea3 	bl	8006e50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	701a      	strb	r2, [r3, #0]
      break;
 8006116:	e0a5      	b.n	8006264 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f965 	bl	80063f0 <USBH_Get_CfgDesc>
 8006126:	4603      	mov	r3, r0
 8006128:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2205      	movs	r2, #5
 8006134:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006136:	e097      	b.n	8006268 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	2b03      	cmp	r3, #3
 800613c:	f040 8094 	bne.w	8006268 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006146:	3301      	adds	r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006156:	2b03      	cmp	r3, #3
 8006158:	d903      	bls.n	8006162 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	220d      	movs	r2, #13
 800615e:	701a      	strb	r2, [r3, #0]
      break;
 8006160:	e082      	b.n	8006268 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	795b      	ldrb	r3, [r3, #5]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fe71 	bl	8006e50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	791b      	ldrb	r3, [r3, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fe6b 	bl	8006e50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
      break;
 8006186:	e06f      	b.n	8006268 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800618e:	2b00      	cmp	r3, #0
 8006190:	d019      	beq.n	80061c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800619e:	23ff      	movs	r3, #255	; 0xff
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f949 	bl	8006438 <USBH_Get_StringDesc>
 80061a6:	4603      	mov	r3, r0
 80061a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2206      	movs	r2, #6
 80061b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80061b6:	e059      	b.n	800626c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d156      	bne.n	800626c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2206      	movs	r2, #6
 80061c2:	705a      	strb	r2, [r3, #1]
      break;
 80061c4:	e052      	b.n	800626c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2206      	movs	r2, #6
 80061ca:	705a      	strb	r2, [r3, #1]
      break;
 80061cc:	e04e      	b.n	800626c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d019      	beq.n	800620c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80061e4:	23ff      	movs	r3, #255	; 0xff
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f926 	bl	8006438 <USBH_Get_StringDesc>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2207      	movs	r2, #7
 80061fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80061fc:	e038      	b.n	8006270 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d135      	bne.n	8006270 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2207      	movs	r2, #7
 8006208:	705a      	strb	r2, [r3, #1]
      break;
 800620a:	e031      	b.n	8006270 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2207      	movs	r2, #7
 8006210:	705a      	strb	r2, [r3, #1]
      break;
 8006212:	e02d      	b.n	8006270 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800622a:	23ff      	movs	r3, #255	; 0xff
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f903 	bl	8006438 <USBH_Get_StringDesc>
 8006232:	4603      	mov	r3, r0
 8006234:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006240:	e018      	b.n	8006274 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d115      	bne.n	8006274 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
      break;
 800624c:	e012      	b.n	8006274 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
      break;
 8006252:	e00f      	b.n	8006274 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006254:	bf00      	nop
 8006256:	e00e      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006258:	bf00      	nop
 800625a:	e00c      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 800625c:	bf00      	nop
 800625e:	e00a      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006260:	bf00      	nop
 8006262:	e008      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006264:	bf00      	nop
 8006266:	e006      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <USBH_HandleEnum+0x3be>
      break;
 8006274:	bf00      	nop
  }
  return Status;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f804 	bl	80062c2 <USBH_HandleSof>
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d10a      	bne.n	80062ea <USBH_HandleSof+0x28>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
  }
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006302:	bf00      	nop
}
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800631e:	bf00      	nop
}
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 ff08 	bl	800718e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd63 	bl	8006e50 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	795b      	ldrb	r3, [r3, #5]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fd5d 	bl	8006e50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063be:	2100      	movs	r1, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f864 	bl	800648e <USBH_GetDescriptor>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	b292      	uxth	r2, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	f000 f8f4 	bl	80065ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	331c      	adds	r3, #28
 8006400:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f83d 	bl	800648e <USBH_GetDescriptor>
 8006414:	4603      	mov	r3, r0
 8006416:	72fb      	strb	r3, [r7, #11]
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006424:	887a      	ldrh	r2, [r7, #2]
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f940 	bl	80066ae <USBH_ParseCfgDesc>
  }

  return status;
 800642e:	7afb      	ldrb	r3, [r7, #11]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	461a      	mov	r2, r3
 8006444:	460b      	mov	r3, r1
 8006446:	72fb      	strb	r3, [r7, #11]
 8006448:	4613      	mov	r3, r2
 800644a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006454:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	460b      	mov	r3, r1
 8006462:	2100      	movs	r1, #0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f812 	bl	800648e <USBH_GetDescriptor>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]
 800646e:	7dfb      	ldrb	r3, [r7, #23]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d107      	bne.n	8006484 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800647a:	893a      	ldrh	r2, [r7, #8]
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa13 	bl	80068aa <USBH_ParseStringDesc>
  }

  return status;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	72fb      	strb	r3, [r7, #11]
 800649c:	4613      	mov	r3, r2
 800649e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	789b      	ldrb	r3, [r3, #2]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d11c      	bne.n	80064e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2206      	movs	r2, #6
 80064b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	893a      	ldrh	r2, [r7, #8]
 80064be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80064c0:	893b      	ldrh	r3, [r7, #8]
 80064c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ca:	d104      	bne.n	80064d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f240 4209 	movw	r2, #1033	; 0x409
 80064d2:	829a      	strh	r2, [r3, #20]
 80064d4:	e002      	b.n	80064dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8b3a      	ldrh	r2, [r7, #24]
 80064e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80064e2:	8b3b      	ldrh	r3, [r7, #24]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa2c 	bl	8006946 <USBH_CtlReq>
 80064ee:	4603      	mov	r3, r0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	789b      	ldrb	r3, [r3, #2]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10f      	bne.n	800652c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2205      	movs	r2, #5
 8006516:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800652c:	2200      	movs	r2, #0
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa08 	bl	8006946 <USBH_CtlReq>
 8006536:	4603      	mov	r3, r0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d10e      	bne.n	8006572 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2209      	movs	r2, #9
 800655e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006572:	2200      	movs	r2, #0
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9e5 	bl	8006946 <USBH_CtlReq>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	460b      	mov	r3, r1
 8006590:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	789b      	ldrb	r3, [r3, #2]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10f      	bne.n	80065ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2203      	movs	r2, #3
 80065a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80065ba:	2200      	movs	r2, #0
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9c1 	bl	8006946 <USBH_CtlReq>
 80065c4:	4603      	mov	r3, r0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	785a      	ldrb	r2, [r3, #1]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	3302      	adds	r3, #2
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3303      	adds	r3, #3
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4313      	orrs	r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	791a      	ldrb	r2, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	795a      	ldrb	r2, [r3, #5]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	799a      	ldrb	r2, [r3, #6]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	79da      	ldrb	r2, [r3, #7]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d939      	bls.n	80066a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3308      	adds	r3, #8
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	b29a      	uxth	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	3309      	adds	r3, #9
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	b29b      	uxth	r3, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	330a      	adds	r3, #10
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b29a      	uxth	r2, r3
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	330b      	adds	r3, #11
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	330c      	adds	r3, #12
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	330d      	adds	r3, #13
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b29b      	uxth	r3, r3
 800667a:	4313      	orrs	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7b9a      	ldrb	r2, [r3, #14]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	7bda      	ldrb	r2, [r3, #15]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	7c1a      	ldrb	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	7c5a      	ldrb	r2, [r3, #17]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	745a      	strb	r2, [r3, #17]
  }
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b08a      	sub	sp, #40	; 0x28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	785a      	ldrb	r2, [r3, #1]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	3302      	adds	r3, #2
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3303      	adds	r3, #3
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	791a      	ldrb	r2, [r3, #4]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	795a      	ldrb	r2, [r3, #5]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	799a      	ldrb	r2, [r3, #6]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	79da      	ldrb	r2, [r3, #7]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	7a1a      	ldrb	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d95f      	bls.n	80067ea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800672a:	2309      	movs	r3, #9
 800672c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006732:	e051      	b.n	80067d8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006734:	f107 0316 	add.w	r3, r7, #22
 8006738:	4619      	mov	r1, r3
 800673a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800673c:	f000 f8e8 	bl	8006910 <USBH_GetNextDesc>
 8006740:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b04      	cmp	r3, #4
 8006748:	d146      	bne.n	80067d8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800674a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674e:	221a      	movs	r2, #26
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	3308      	adds	r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	3302      	adds	r3, #2
 800675c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800675e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006760:	69f8      	ldr	r0, [r7, #28]
 8006762:	f000 f846 	bl	80067f2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006770:	e022      	b.n	80067b8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006772:	f107 0316 	add.w	r3, r7, #22
 8006776:	4619      	mov	r1, r3
 8006778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800677a:	f000 f8c9 	bl	8006910 <USBH_GetNextDesc>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b05      	cmp	r3, #5
 8006786:	d117      	bne.n	80067b8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800678c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006790:	3201      	adds	r2, #1
 8006792:	00d2      	lsls	r2, r2, #3
 8006794:	211a      	movs	r1, #26
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	3308      	adds	r3, #8
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	3304      	adds	r3, #4
 80067a4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80067a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067a8:	69b8      	ldr	r0, [r7, #24]
 80067aa:	f000 f851 	bl	8006850 <USBH_ParseEPDesc>
            ep_ix++;
 80067ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80067b2:	3301      	adds	r3, #1
 80067b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	791b      	ldrb	r3, [r3, #4]
 80067bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d204      	bcs.n	80067ce <USBH_ParseCfgDesc+0x120>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	885a      	ldrh	r2, [r3, #2]
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d8d1      	bhi.n	8006772 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80067ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067d2:	3301      	adds	r3, #1
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80067d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d804      	bhi.n	80067ea <USBH_ParseCfgDesc+0x13c>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	885a      	ldrh	r2, [r3, #2]
 80067e4:	8afb      	ldrh	r3, [r7, #22]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d8a4      	bhi.n	8006734 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80067ea:	bf00      	nop
 80067ec:	3728      	adds	r7, #40	; 0x28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	785a      	ldrb	r2, [r3, #1]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	789a      	ldrb	r2, [r3, #2]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	78da      	ldrb	r2, [r3, #3]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	791a      	ldrb	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	795a      	ldrb	r2, [r3, #5]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	799a      	ldrb	r2, [r3, #6]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	79da      	ldrb	r2, [r3, #7]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	7a1a      	ldrb	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	721a      	strb	r2, [r3, #8]
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	785a      	ldrb	r2, [r3, #1]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	789a      	ldrb	r2, [r3, #2]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	78da      	ldrb	r2, [r3, #3]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	3304      	adds	r3, #4
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	3305      	adds	r3, #5
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	b29b      	uxth	r3, r3
 800688e:	4313      	orrs	r3, r2
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	799a      	ldrb	r2, [r3, #6]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	719a      	strb	r2, [r3, #6]
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d120      	bne.n	8006904 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	1e9a      	subs	r2, r3, #2
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bf28      	it	cs
 80068ce:	4613      	movcs	r3, r2
 80068d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3302      	adds	r3, #2
 80068d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80068d8:	2300      	movs	r3, #0
 80068da:	82fb      	strh	r3, [r7, #22]
 80068dc:	e00b      	b.n	80068f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80068de:	8afb      	ldrh	r3, [r7, #22]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80068f0:	8afb      	ldrh	r3, [r7, #22]
 80068f2:	3302      	adds	r3, #2
 80068f4:	82fb      	strh	r3, [r7, #22]
 80068f6:	8afa      	ldrh	r2, [r7, #22]
 80068f8:	8abb      	ldrh	r3, [r7, #20]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d3ef      	bcc.n	80068de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
  }
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	4413      	add	r3, r2
 8006926:	b29a      	uxth	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	4613      	mov	r3, r2
 8006952:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	789b      	ldrb	r3, [r3, #2]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d002      	beq.n	8006966 <USBH_CtlReq+0x20>
 8006960:	2b02      	cmp	r3, #2
 8006962:	d00f      	beq.n	8006984 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006964:	e027      	b.n	80069b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	88fa      	ldrh	r2, [r7, #6]
 8006970:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2202      	movs	r2, #2
 800697c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
      break;
 8006982:	e018      	b.n	80069b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f81b 	bl	80069c0 <USBH_HandleControl>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <USBH_CtlReq+0x54>
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b03      	cmp	r3, #3
 8006998:	d106      	bne.n	80069a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	761a      	strb	r2, [r3, #24]
      break;
 80069a6:	e005      	b.n	80069b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d102      	bne.n	80069b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	709a      	strb	r2, [r3, #2]
      break;
 80069b4:	bf00      	nop
  }
  return status;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7e1b      	ldrb	r3, [r3, #24]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	2b0a      	cmp	r3, #10
 80069d8:	f200 8158 	bhi.w	8006c8c <USBH_HandleControl+0x2cc>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBH_HandleControl+0x24>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	08006a2b 	.word	0x08006a2b
 80069ec:	08006a95 	.word	0x08006a95
 80069f0:	08006abb 	.word	0x08006abb
 80069f4:	08006af3 	.word	0x08006af3
 80069f8:	08006b1f 	.word	0x08006b1f
 80069fc:	08006b71 	.word	0x08006b71
 8006a00:	08006b93 	.word	0x08006b93
 8006a04:	08006bcf 	.word	0x08006bcf
 8006a08:	08006bf7 	.word	0x08006bf7
 8006a0c:	08006c35 	.word	0x08006c35
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 0110 	add.w	r1, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	795b      	ldrb	r3, [r3, #5]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f945 	bl	8006cac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	761a      	strb	r2, [r3, #24]
      break;
 8006a28:	e13b      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	795b      	ldrb	r3, [r3, #5]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fc99 	bl	8007368 <USBH_LL_GetURBState>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d11e      	bne.n	8006a7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7c1b      	ldrb	r3, [r3, #16]
 8006a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8adb      	ldrh	r3, [r3, #22]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006a52:	7b7b      	ldrb	r3, [r7, #13]
 8006a54:	2b80      	cmp	r3, #128	; 0x80
 8006a56:	d103      	bne.n	8006a60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a5e:	e117      	b.n	8006c90 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2205      	movs	r2, #5
 8006a64:	761a      	strb	r2, [r3, #24]
      break;
 8006a66:	e113      	b.n	8006c90 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006a68:	7b7b      	ldrb	r3, [r7, #13]
 8006a6a:	2b80      	cmp	r3, #128	; 0x80
 8006a6c:	d103      	bne.n	8006a76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2209      	movs	r2, #9
 8006a72:	761a      	strb	r2, [r3, #24]
      break;
 8006a74:	e10c      	b.n	8006c90 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2207      	movs	r2, #7
 8006a7a:	761a      	strb	r2, [r3, #24]
      break;
 8006a7c:	e108      	b.n	8006c90 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d003      	beq.n	8006a8c <USBH_HandleControl+0xcc>
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	f040 8102 	bne.w	8006c90 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	220b      	movs	r2, #11
 8006a90:	761a      	strb	r2, [r3, #24]
      break;
 8006a92:	e0fd      	b.n	8006c90 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6899      	ldr	r1, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	899a      	ldrh	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	791b      	ldrb	r3, [r3, #4]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f93c 	bl	8006d2a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	761a      	strb	r2, [r3, #24]
      break;
 8006ab8:	e0f3      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fc51 	bl	8007368 <USBH_LL_GetURBState>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2209      	movs	r2, #9
 8006ad4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d102      	bne.n	8006ae2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006adc:	2303      	movs	r3, #3
 8006ade:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ae0:	e0d8      	b.n	8006c94 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	f040 80d5 	bne.w	8006c94 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220b      	movs	r2, #11
 8006aee:	761a      	strb	r2, [r3, #24]
      break;
 8006af0:	e0d0      	b.n	8006c94 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6899      	ldr	r1, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	899a      	ldrh	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	7958      	ldrb	r0, [r3, #5]
 8006afe:	2301      	movs	r3, #1
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	4603      	mov	r3, r0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f8eb 	bl	8006ce0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2206      	movs	r2, #6
 8006b1a:	761a      	strb	r2, [r3, #24]
      break;
 8006b1c:	e0c1      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	795b      	ldrb	r3, [r3, #5]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fc1f 	bl	8007368 <USBH_LL_GetURBState>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d103      	bne.n	8006b3c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2207      	movs	r2, #7
 8006b38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b3a:	e0ad      	b.n	8006c98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d105      	bne.n	8006b4e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	220c      	movs	r2, #12
 8006b46:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4c:	e0a4      	b.n	8006c98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d103      	bne.n	8006b5c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2205      	movs	r2, #5
 8006b58:	761a      	strb	r2, [r3, #24]
      break;
 8006b5a:	e09d      	b.n	8006c98 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	f040 809a 	bne.w	8006c98 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	220b      	movs	r2, #11
 8006b68:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6e:	e093      	b.n	8006c98 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2100      	movs	r1, #0
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8d6 	bl	8006d2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	761a      	strb	r2, [r3, #24]

      break;
 8006b90:	e087      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fbe5 	bl	8007368 <USBH_LL_GetURBState>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d105      	bne.n	8006bb4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	220d      	movs	r2, #13
 8006bac:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006bb2:	e073      	b.n	8006c9c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d103      	bne.n	8006bc2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	220b      	movs	r2, #11
 8006bbe:	761a      	strb	r2, [r3, #24]
      break;
 8006bc0:	e06c      	b.n	8006c9c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d169      	bne.n	8006c9c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	73fb      	strb	r3, [r7, #15]
      break;
 8006bcc:	e066      	b.n	8006c9c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	795a      	ldrb	r2, [r3, #5]
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f87f 	bl	8006ce0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	220a      	movs	r2, #10
 8006bf2:	761a      	strb	r2, [r3, #24]
      break;
 8006bf4:	e055      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	795b      	ldrb	r3, [r3, #5]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fbb3 	bl	8007368 <USBH_LL_GetURBState>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d105      	bne.n	8006c18 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	220d      	movs	r2, #13
 8006c14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c16:	e043      	b.n	8006ca0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d103      	bne.n	8006c26 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2209      	movs	r2, #9
 8006c22:	761a      	strb	r2, [r3, #24]
      break;
 8006c24:	e03c      	b.n	8006ca0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d139      	bne.n	8006ca0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	220b      	movs	r2, #11
 8006c30:	761a      	strb	r2, [r3, #24]
      break;
 8006c32:	e035      	b.n	8006ca0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7e5b      	ldrb	r3, [r3, #25]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	765a      	strb	r2, [r3, #25]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	7e5b      	ldrb	r3, [r3, #25]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d806      	bhi.n	8006c56 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006c54:	e025      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c5c:	2106      	movs	r1, #6
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f8ee 	bl	8006e50 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8e8 	bl	8006e50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006c86:	2302      	movs	r3, #2
 8006c88:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8a:	e00a      	b.n	8006ca2 <USBH_HandleControl+0x2e2>

    default:
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e008      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
      break;
 8006c90:	bf00      	nop
 8006c92:	e006      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
      break;
 8006c94:	bf00      	nop
 8006c96:	e004      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
      break;
 8006c98:	bf00      	nop
 8006c9a:	e002      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e000      	b.n	8006ca2 <USBH_HandleControl+0x2e2>
      break;
 8006ca0:	bf00      	nop
  }

  return status;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af04      	add	r7, sp, #16
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006cba:	79f9      	ldrb	r1, [r7, #7]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	9302      	str	r3, [sp, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2200      	movs	r2, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fb18 	bl	8007306 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af04      	add	r7, sp, #16
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	460b      	mov	r3, r1
 8006cf0:	80fb      	strh	r3, [r7, #6]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d04:	7979      	ldrb	r1, [r7, #5]
 8006d06:	7e3b      	ldrb	r3, [r7, #24]
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	9302      	str	r3, [sp, #8]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	2301      	movs	r3, #1
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	2300      	movs	r3, #0
 8006d18:	2200      	movs	r2, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 faf3 	bl	8007306 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af04      	add	r7, sp, #16
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	4611      	mov	r1, r2
 8006d36:	461a      	mov	r2, r3
 8006d38:	460b      	mov	r3, r1
 8006d3a:	80fb      	strh	r3, [r7, #6]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d40:	7979      	ldrb	r1, [r7, #5]
 8006d42:	2300      	movs	r3, #0
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	2301      	movs	r3, #1
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	2300      	movs	r3, #0
 8006d54:	2201      	movs	r2, #1
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fad5 	bl	8007306 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006d5c:	2300      	movs	r3, #0

}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af04      	add	r7, sp, #16
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	4611      	mov	r1, r2
 8006d72:	461a      	mov	r2, r3
 8006d74:	460b      	mov	r3, r1
 8006d76:	80fb      	strh	r3, [r7, #6]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	763b      	strb	r3, [r7, #24]
  }

 // do_ping = 1U;

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006d8a:	7979      	ldrb	r1, [r7, #5]
 8006d8c:	7e3b      	ldrb	r3, [r7, #24]
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	9302      	str	r3, [sp, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fab0 	bl	8007306 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af04      	add	r7, sp, #16
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	70fb      	strb	r3, [r7, #3]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70bb      	strb	r3, [r7, #2]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006dca:	7878      	ldrb	r0, [r7, #1]
 8006dcc:	78ba      	ldrb	r2, [r7, #2]
 8006dce:	78f9      	ldrb	r1, [r7, #3]
 8006dd0:	8b3b      	ldrh	r3, [r7, #24]
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	7d3b      	ldrb	r3, [r7, #20]
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	7c3b      	ldrb	r3, [r7, #16]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	4603      	mov	r3, r0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa43 	bl	800726a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa62 	bl	80072c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f836 	bl	8006e8c <USBH_GetFreePipe>
 8006e20:	4603      	mov	r3, r0
 8006e22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00a      	beq.n	8006e44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	89fb      	ldrh	r3, [r7, #14]
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	33e0      	adds	r3, #224	; 0xe0
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	b2db      	uxtb	r3, r3
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d80d      	bhi.n	8006e7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	33e0      	adds	r3, #224	; 0xe0
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	33e0      	adds	r3, #224	; 0xe0
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	e00f      	b.n	8006ebe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	33e0      	adds	r3, #224	; 0xe0
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	e007      	b.n	8006ec8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b0a      	cmp	r3, #10
 8006ec2:	d9ec      	bls.n	8006e9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	490e      	ldr	r1, [pc, #56]	; (8006f14 <MX_USB_HOST_Init+0x40>)
 8006edc:	480e      	ldr	r0, [pc, #56]	; (8006f18 <MX_USB_HOST_Init+0x44>)
 8006ede:	f7fe fcfd 	bl	80058dc <USBH_Init>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006ee8:	f7f9 fbe6 	bl	80006b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 8006eec:	490b      	ldr	r1, [pc, #44]	; (8006f1c <MX_USB_HOST_Init+0x48>)
 8006eee:	480a      	ldr	r0, [pc, #40]	; (8006f18 <MX_USB_HOST_Init+0x44>)
 8006ef0:	f7fe fd82 	bl	80059f8 <USBH_RegisterClass>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006efa:	f7f9 fbdd 	bl	80006b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006efe:	4806      	ldr	r0, [pc, #24]	; (8006f18 <MX_USB_HOST_Init+0x44>)
 8006f00:	f7fe fdea 	bl	8005ad8 <USBH_Start>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f0a:	f7f9 fbd5 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	200008f8 	.word	0x200008f8
 8006f1c:	2000000c 	.word	0x2000000c

08006f20 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f24:	4802      	ldr	r0, [pc, #8]	; (8006f30 <MX_USB_HOST_Process+0x10>)
 8006f26:	f7fe fde7 	bl	8005af8 <USBH_Process>
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	200008f8 	.word	0x200008f8

08006f34 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d819      	bhi.n	8006f7c <USBH_UserProcess+0x48>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBH_UserProcess+0x1c>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f7d 	.word	0x08006f7d
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006f65 	.word	0x08006f65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <USBH_UserProcess+0x58>)
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]
  break;
 8006f6a:	e008      	b.n	8006f7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <USBH_UserProcess+0x58>)
 8006f6e:	2202      	movs	r2, #2
 8006f70:	701a      	strb	r2, [r3, #0]
  break;
 8006f72:	e004      	b.n	8006f7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <USBH_UserProcess+0x58>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	701a      	strb	r2, [r3, #0]
  break;
 8006f7a:	e000      	b.n	8006f7e <USBH_UserProcess+0x4a>

  default:
  break;
 8006f7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	200000b4 	.word	0x200000b4

08006f90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f98:	f107 0314 	add.w	r3, r7, #20
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	609a      	str	r2, [r3, #8]
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fb0:	d13a      	bne.n	8007028 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8006fbc:	f043 0301 	orr.w	r3, r3, #1
 8006fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc2:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006fce:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fe0:	230a      	movs	r3, #10
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4812      	ldr	r0, [pc, #72]	; (8007034 <HAL_HCD_MspInit+0xa4>)
 8006fec:	f7f9 fe26 	bl	8000c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff4:	4a0e      	ldr	r2, [pc, #56]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	6353      	str	r3, [r2, #52]	; 0x34
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8007002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007004:	4a0a      	ldr	r2, [pc, #40]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 8007006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800700a:	6453      	str	r3, [r2, #68]	; 0x44
 800700c:	4b08      	ldr	r3, [pc, #32]	; (8007030 <HAL_HCD_MspInit+0xa0>)
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007018:	2200      	movs	r2, #0
 800701a:	2100      	movs	r1, #0
 800701c:	2043      	movs	r0, #67	; 0x43
 800701e:	f7f9 fdd6 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007022:	2043      	movs	r0, #67	; 0x43
 8007024:	f7f9 fdef 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007028:	bf00      	nop
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	40020000 	.word	0x40020000

08007038 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff f929 	bl	800629e <USBH_LL_IncTimer>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff f961 	bl	800632a <USBH_LL_Connect>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff f96a 	bl	8006358 <USBH_LL_Disconnect>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
 8007098:	4613      	mov	r3, r2
 800709a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f91b 	bl	80062f2 <USBH_LL_PortEnabled>
} 
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff f91b 	bl	800630e <USBH_LL_PortDisabled>
} 
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d12a      	bne.n	8007148 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80070f2:	4a18      	ldr	r2, [pc, #96]	; (8007154 <USBH_LL_Init+0x74>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a15      	ldr	r2, [pc, #84]	; (8007154 <USBH_LL_Init+0x74>)
 80070fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <USBH_LL_Init+0x74>)
 8007104:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007108:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <USBH_LL_Init+0x74>)
 800710c:	2208      	movs	r2, #8
 800710e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007110:	4b10      	ldr	r3, [pc, #64]	; (8007154 <USBH_LL_Init+0x74>)
 8007112:	2201      	movs	r2, #1
 8007114:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <USBH_LL_Init+0x74>)
 8007118:	2200      	movs	r2, #0
 800711a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <USBH_LL_Init+0x74>)
 800711e:	2202      	movs	r2, #2
 8007120:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <USBH_LL_Init+0x74>)
 8007124:	2201      	movs	r2, #1
 8007126:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007128:	480a      	ldr	r0, [pc, #40]	; (8007154 <USBH_LL_Init+0x74>)
 800712a:	f7f9 ff3a 	bl	8000fa2 <HAL_HCD_Init>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007134:	f7f9 fac0 	bl	80006b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007138:	4806      	ldr	r0, [pc, #24]	; (8007154 <USBH_LL_Init+0x74>)
 800713a:	f7fa fb3d 	bl	80017b8 <HAL_HCD_GetCurrentFrame>
 800713e:	4603      	mov	r3, r0
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff f89c 	bl	8006280 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000cd0 	.word	0x20000cd0

08007158 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800716e:	4618      	mov	r0, r3
 8007170:	f7fa faaa 	bl	80016c8 <HAL_HCD_Start>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f96c 	bl	8007458 <USBH_Get_USB_Status>
 8007180:	4603      	mov	r3, r0
 8007182:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fa fab2 	bl	800170e <HAL_HCD_Stop>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f951 	bl	8007458 <USBH_Get_USB_Status>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fa fafc 	bl	80017d4 <HAL_HCD_GetCurrentSpeed>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d007      	beq.n	80071f2 <USBH_LL_GetSpeed+0x2e>
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d302      	bcc.n	80071ec <USBH_LL_GetSpeed+0x28>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d006      	beq.n	80071f8 <USBH_LL_GetSpeed+0x34>
 80071ea:	e008      	b.n	80071fe <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
    break;
 80071f0:	e008      	b.n	8007204 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80071f2:	2301      	movs	r3, #1
 80071f4:	73fb      	strb	r3, [r7, #15]
    break;
 80071f6:	e005      	b.n	8007204 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80071f8:	2302      	movs	r3, #2
 80071fa:	73fb      	strb	r3, [r7, #15]
    break;
 80071fc:	e002      	b.n	8007204 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
    break;
 8007202:	bf00      	nop
  }
  return  speed;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007224:	4618      	mov	r0, r3
 8007226:	f7fa fa8f 	bl	8001748 <HAL_HCD_ResetPort>
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 f911 	bl	8007458 <USBH_Get_USB_Status>
 8007236:	4603      	mov	r3, r0
 8007238:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800723a:	7bbb      	ldrb	r3, [r7, #14]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f7fa fa97 	bl	800178e <HAL_HCD_HC_GetXferCount>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800726a:	b590      	push	{r4, r7, lr}
 800726c:	b089      	sub	sp, #36	; 0x24
 800726e:	af04      	add	r7, sp, #16
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	4608      	mov	r0, r1
 8007274:	4611      	mov	r1, r2
 8007276:	461a      	mov	r2, r3
 8007278:	4603      	mov	r3, r0
 800727a:	70fb      	strb	r3, [r7, #3]
 800727c:	460b      	mov	r3, r1
 800727e:	70bb      	strb	r3, [r7, #2]
 8007280:	4613      	mov	r3, r2
 8007282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007292:	787c      	ldrb	r4, [r7, #1]
 8007294:	78ba      	ldrb	r2, [r7, #2]
 8007296:	78f9      	ldrb	r1, [r7, #3]
 8007298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4623      	mov	r3, r4
 80072aa:	f7f9 fedc 	bl	8001066 <HAL_HCD_HC_Init>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f8cf 	bl	8007458 <USBH_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072be:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd90      	pop	{r4, r7, pc}

080072c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072e2:	78fa      	ldrb	r2, [r7, #3]
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f9 ff55 	bl	8001196 <HAL_HCD_HC_Halt>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f8b0 	bl	8007458 <USBH_Get_USB_Status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007306:	b590      	push	{r4, r7, lr}
 8007308:	b089      	sub	sp, #36	; 0x24
 800730a:	af04      	add	r7, sp, #16
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	461a      	mov	r2, r3
 8007314:	4603      	mov	r3, r0
 8007316:	70fb      	strb	r3, [r7, #3]
 8007318:	460b      	mov	r3, r1
 800731a:	70bb      	strb	r3, [r7, #2]
 800731c:	4613      	mov	r3, r2
 800731e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800732e:	787c      	ldrb	r4, [r7, #1]
 8007330:	78ba      	ldrb	r2, [r7, #2]
 8007332:	78f9      	ldrb	r1, [r7, #3]
 8007334:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007338:	9303      	str	r3, [sp, #12]
 800733a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	4623      	mov	r3, r4
 800734a:	f7f9 ff47 	bl	80011dc <HAL_HCD_HC_SubmitRequest>
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 f87f 	bl	8007458 <USBH_Get_USB_Status>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800735e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	bd90      	pop	{r4, r7, pc}

08007368 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7fa f9f0 	bl	8001764 <HAL_HCD_HC_GetURBState>
 8007384:	4603      	mov	r3, r0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  if (phost->id == HOST_FS)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d10f      	bne.n	80073c6 <USBH_LL_DriverVBUS+0x36>
  {
    if (state == 0)
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <USBH_LL_DriverVBUS+0x2a>
    {
      /* Drive high Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_HIGH_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80073ac:	2200      	movs	r2, #0
 80073ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073b2:	4809      	ldr	r0, [pc, #36]	; (80073d8 <USBH_LL_DriverVBUS+0x48>)
 80073b4:	f7f9 fddc 	bl	8000f70 <HAL_GPIO_WritePin>
 80073b8:	e005      	b.n	80073c6 <USBH_LL_DriverVBUS+0x36>
    else
    {
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80073ba:	2200      	movs	r2, #0
 80073bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <USBH_LL_DriverVBUS+0x48>)
 80073c2:	f7f9 fdd5 	bl	8000f70 <HAL_GPIO_WritePin>
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80073c6:	20c8      	movs	r0, #200	; 0xc8
 80073c8:	f7f9 fb04 	bl	80009d4 <HAL_Delay>
  return USBH_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40020000 	.word	0x40020000

080073dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
 80073e8:	4613      	mov	r3, r2
 80073ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	68f9      	ldr	r1, [r7, #12]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	440b      	add	r3, r1
 8007402:	333b      	adds	r3, #59	; 0x3b
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	68f9      	ldr	r1, [r7, #12]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	440b      	add	r3, r1
 8007418:	3350      	adds	r3, #80	; 0x50
 800741a:	78ba      	ldrb	r2, [r7, #2]
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e009      	b.n	8007434 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	440b      	add	r3, r1
 800742e:	3351      	adds	r3, #81	; 0x51
 8007430:	78ba      	ldrb	r2, [r7, #2]
 8007432:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7f9 fac2 	bl	80009d4 <HAL_Delay>
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d817      	bhi.n	800749c <USBH_Get_USB_Status+0x44>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <USBH_Get_USB_Status+0x1c>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007485 	.word	0x08007485
 8007478:	0800748b 	.word	0x0800748b
 800747c:	08007491 	.word	0x08007491
 8007480:	08007497 	.word	0x08007497
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
    break;
 8007488:	e00b      	b.n	80074a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800748a:	2302      	movs	r3, #2
 800748c:	73fb      	strb	r3, [r7, #15]
    break;
 800748e:	e008      	b.n	80074a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
    break;
 8007494:	e005      	b.n	80074a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007496:	2302      	movs	r3, #2
 8007498:	73fb      	strb	r3, [r7, #15]
    break;
 800749a:	e002      	b.n	80074a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800749c:	2302      	movs	r3, #2
 800749e:	73fb      	strb	r3, [r7, #15]
    break;
 80074a0:	bf00      	nop
  }
  return usb_status;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <__errno>:
 80074b0:	4b01      	ldr	r3, [pc, #4]	; (80074b8 <__errno+0x8>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	2000002c 	.word	0x2000002c

080074bc <__libc_init_array>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4e0d      	ldr	r6, [pc, #52]	; (80074f4 <__libc_init_array+0x38>)
 80074c0:	4c0d      	ldr	r4, [pc, #52]	; (80074f8 <__libc_init_array+0x3c>)
 80074c2:	1ba4      	subs	r4, r4, r6
 80074c4:	10a4      	asrs	r4, r4, #2
 80074c6:	2500      	movs	r5, #0
 80074c8:	42a5      	cmp	r5, r4
 80074ca:	d109      	bne.n	80074e0 <__libc_init_array+0x24>
 80074cc:	4e0b      	ldr	r6, [pc, #44]	; (80074fc <__libc_init_array+0x40>)
 80074ce:	4c0c      	ldr	r4, [pc, #48]	; (8007500 <__libc_init_array+0x44>)
 80074d0:	f000 f914 	bl	80076fc <_init>
 80074d4:	1ba4      	subs	r4, r4, r6
 80074d6:	10a4      	asrs	r4, r4, #2
 80074d8:	2500      	movs	r5, #0
 80074da:	42a5      	cmp	r5, r4
 80074dc:	d105      	bne.n	80074ea <__libc_init_array+0x2e>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074e4:	4798      	blx	r3
 80074e6:	3501      	adds	r5, #1
 80074e8:	e7ee      	b.n	80074c8 <__libc_init_array+0xc>
 80074ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074ee:	4798      	blx	r3
 80074f0:	3501      	adds	r5, #1
 80074f2:	e7f2      	b.n	80074da <__libc_init_array+0x1e>
 80074f4:	080078a8 	.word	0x080078a8
 80074f8:	080078a8 	.word	0x080078a8
 80074fc:	080078a8 	.word	0x080078a8
 8007500:	080078ac 	.word	0x080078ac

08007504 <malloc>:
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <malloc+0xc>)
 8007506:	4601      	mov	r1, r0
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f000 b861 	b.w	80075d0 <_malloc_r>
 800750e:	bf00      	nop
 8007510:	2000002c 	.word	0x2000002c

08007514 <free>:
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <free+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f000 b80b 	b.w	8007534 <_free_r>
 800751e:	bf00      	nop
 8007520:	2000002c 	.word	0x2000002c

08007524 <memset>:
 8007524:	4402      	add	r2, r0
 8007526:	4603      	mov	r3, r0
 8007528:	4293      	cmp	r3, r2
 800752a:	d100      	bne.n	800752e <memset+0xa>
 800752c:	4770      	bx	lr
 800752e:	f803 1b01 	strb.w	r1, [r3], #1
 8007532:	e7f9      	b.n	8007528 <memset+0x4>

08007534 <_free_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4605      	mov	r5, r0
 8007538:	2900      	cmp	r1, #0
 800753a:	d045      	beq.n	80075c8 <_free_r+0x94>
 800753c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007540:	1f0c      	subs	r4, r1, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	bfb8      	it	lt
 8007546:	18e4      	addlt	r4, r4, r3
 8007548:	f000 f8d5 	bl	80076f6 <__malloc_lock>
 800754c:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <_free_r+0x98>)
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	4610      	mov	r0, r2
 8007552:	b933      	cbnz	r3, 8007562 <_free_r+0x2e>
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	6014      	str	r4, [r2, #0]
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755e:	f000 b8cb 	b.w	80076f8 <__malloc_unlock>
 8007562:	42a3      	cmp	r3, r4
 8007564:	d90c      	bls.n	8007580 <_free_r+0x4c>
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1862      	adds	r2, r4, r1
 800756a:	4293      	cmp	r3, r2
 800756c:	bf04      	itt	eq
 800756e:	681a      	ldreq	r2, [r3, #0]
 8007570:	685b      	ldreq	r3, [r3, #4]
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	bf04      	itt	eq
 8007576:	1852      	addeq	r2, r2, r1
 8007578:	6022      	streq	r2, [r4, #0]
 800757a:	6004      	str	r4, [r0, #0]
 800757c:	e7ec      	b.n	8007558 <_free_r+0x24>
 800757e:	4613      	mov	r3, r2
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	b10a      	cbz	r2, 8007588 <_free_r+0x54>
 8007584:	42a2      	cmp	r2, r4
 8007586:	d9fa      	bls.n	800757e <_free_r+0x4a>
 8007588:	6819      	ldr	r1, [r3, #0]
 800758a:	1858      	adds	r0, r3, r1
 800758c:	42a0      	cmp	r0, r4
 800758e:	d10b      	bne.n	80075a8 <_free_r+0x74>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	4401      	add	r1, r0
 8007594:	1858      	adds	r0, r3, r1
 8007596:	4282      	cmp	r2, r0
 8007598:	6019      	str	r1, [r3, #0]
 800759a:	d1dd      	bne.n	8007558 <_free_r+0x24>
 800759c:	6810      	ldr	r0, [r2, #0]
 800759e:	6852      	ldr	r2, [r2, #4]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	4401      	add	r1, r0
 80075a4:	6019      	str	r1, [r3, #0]
 80075a6:	e7d7      	b.n	8007558 <_free_r+0x24>
 80075a8:	d902      	bls.n	80075b0 <_free_r+0x7c>
 80075aa:	230c      	movs	r3, #12
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	e7d3      	b.n	8007558 <_free_r+0x24>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428a      	cmp	r2, r1
 80075b6:	bf04      	itt	eq
 80075b8:	6811      	ldreq	r1, [r2, #0]
 80075ba:	6852      	ldreq	r2, [r2, #4]
 80075bc:	6062      	str	r2, [r4, #4]
 80075be:	bf04      	itt	eq
 80075c0:	1809      	addeq	r1, r1, r0
 80075c2:	6021      	streq	r1, [r4, #0]
 80075c4:	605c      	str	r4, [r3, #4]
 80075c6:	e7c7      	b.n	8007558 <_free_r+0x24>
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	bf00      	nop
 80075cc:	200000b8 	.word	0x200000b8

080075d0 <_malloc_r>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	1ccd      	adds	r5, r1, #3
 80075d4:	f025 0503 	bic.w	r5, r5, #3
 80075d8:	3508      	adds	r5, #8
 80075da:	2d0c      	cmp	r5, #12
 80075dc:	bf38      	it	cc
 80075de:	250c      	movcc	r5, #12
 80075e0:	2d00      	cmp	r5, #0
 80075e2:	4606      	mov	r6, r0
 80075e4:	db01      	blt.n	80075ea <_malloc_r+0x1a>
 80075e6:	42a9      	cmp	r1, r5
 80075e8:	d903      	bls.n	80075f2 <_malloc_r+0x22>
 80075ea:	230c      	movs	r3, #12
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	2000      	movs	r0, #0
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	f000 f880 	bl	80076f6 <__malloc_lock>
 80075f6:	4a21      	ldr	r2, [pc, #132]	; (800767c <_malloc_r+0xac>)
 80075f8:	6814      	ldr	r4, [r2, #0]
 80075fa:	4621      	mov	r1, r4
 80075fc:	b991      	cbnz	r1, 8007624 <_malloc_r+0x54>
 80075fe:	4c20      	ldr	r4, [pc, #128]	; (8007680 <_malloc_r+0xb0>)
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	b91b      	cbnz	r3, 800760c <_malloc_r+0x3c>
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f83d 	bl	8007684 <_sbrk_r>
 800760a:	6020      	str	r0, [r4, #0]
 800760c:	4629      	mov	r1, r5
 800760e:	4630      	mov	r0, r6
 8007610:	f000 f838 	bl	8007684 <_sbrk_r>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d124      	bne.n	8007662 <_malloc_r+0x92>
 8007618:	230c      	movs	r3, #12
 800761a:	6033      	str	r3, [r6, #0]
 800761c:	4630      	mov	r0, r6
 800761e:	f000 f86b 	bl	80076f8 <__malloc_unlock>
 8007622:	e7e4      	b.n	80075ee <_malloc_r+0x1e>
 8007624:	680b      	ldr	r3, [r1, #0]
 8007626:	1b5b      	subs	r3, r3, r5
 8007628:	d418      	bmi.n	800765c <_malloc_r+0x8c>
 800762a:	2b0b      	cmp	r3, #11
 800762c:	d90f      	bls.n	800764e <_malloc_r+0x7e>
 800762e:	600b      	str	r3, [r1, #0]
 8007630:	50cd      	str	r5, [r1, r3]
 8007632:	18cc      	adds	r4, r1, r3
 8007634:	4630      	mov	r0, r6
 8007636:	f000 f85f 	bl	80076f8 <__malloc_unlock>
 800763a:	f104 000b 	add.w	r0, r4, #11
 800763e:	1d23      	adds	r3, r4, #4
 8007640:	f020 0007 	bic.w	r0, r0, #7
 8007644:	1ac3      	subs	r3, r0, r3
 8007646:	d0d3      	beq.n	80075f0 <_malloc_r+0x20>
 8007648:	425a      	negs	r2, r3
 800764a:	50e2      	str	r2, [r4, r3]
 800764c:	e7d0      	b.n	80075f0 <_malloc_r+0x20>
 800764e:	428c      	cmp	r4, r1
 8007650:	684b      	ldr	r3, [r1, #4]
 8007652:	bf16      	itet	ne
 8007654:	6063      	strne	r3, [r4, #4]
 8007656:	6013      	streq	r3, [r2, #0]
 8007658:	460c      	movne	r4, r1
 800765a:	e7eb      	b.n	8007634 <_malloc_r+0x64>
 800765c:	460c      	mov	r4, r1
 800765e:	6849      	ldr	r1, [r1, #4]
 8007660:	e7cc      	b.n	80075fc <_malloc_r+0x2c>
 8007662:	1cc4      	adds	r4, r0, #3
 8007664:	f024 0403 	bic.w	r4, r4, #3
 8007668:	42a0      	cmp	r0, r4
 800766a:	d005      	beq.n	8007678 <_malloc_r+0xa8>
 800766c:	1a21      	subs	r1, r4, r0
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f808 	bl	8007684 <_sbrk_r>
 8007674:	3001      	adds	r0, #1
 8007676:	d0cf      	beq.n	8007618 <_malloc_r+0x48>
 8007678:	6025      	str	r5, [r4, #0]
 800767a:	e7db      	b.n	8007634 <_malloc_r+0x64>
 800767c:	200000b8 	.word	0x200000b8
 8007680:	200000bc 	.word	0x200000bc

08007684 <_sbrk_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4c06      	ldr	r4, [pc, #24]	; (80076a0 <_sbrk_r+0x1c>)
 8007688:	2300      	movs	r3, #0
 800768a:	4605      	mov	r5, r0
 800768c:	4608      	mov	r0, r1
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	f7f9 f8c2 	bl	8000818 <_sbrk>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_sbrk_r+0x1a>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	b103      	cbz	r3, 800769e <_sbrk_r+0x1a>
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20000f94 	.word	0x20000f94

080076a4 <strcat>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4603      	mov	r3, r0
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	1c5c      	adds	r4, r3, #1
 80076ac:	b93a      	cbnz	r2, 80076be <strcat+0x1a>
 80076ae:	3b01      	subs	r3, #1
 80076b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d1f9      	bne.n	80076b0 <strcat+0xc>
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	4623      	mov	r3, r4
 80076c0:	e7f2      	b.n	80076a8 <strcat+0x4>

080076c2 <strstr>:
 80076c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c4:	7803      	ldrb	r3, [r0, #0]
 80076c6:	b17b      	cbz	r3, 80076e8 <strstr+0x26>
 80076c8:	4604      	mov	r4, r0
 80076ca:	7823      	ldrb	r3, [r4, #0]
 80076cc:	4620      	mov	r0, r4
 80076ce:	1c66      	adds	r6, r4, #1
 80076d0:	b17b      	cbz	r3, 80076f2 <strstr+0x30>
 80076d2:	1e4a      	subs	r2, r1, #1
 80076d4:	1e63      	subs	r3, r4, #1
 80076d6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80076da:	b14d      	cbz	r5, 80076f0 <strstr+0x2e>
 80076dc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80076e0:	42af      	cmp	r7, r5
 80076e2:	4634      	mov	r4, r6
 80076e4:	d0f7      	beq.n	80076d6 <strstr+0x14>
 80076e6:	e7f0      	b.n	80076ca <strstr+0x8>
 80076e8:	780b      	ldrb	r3, [r1, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf18      	it	ne
 80076ee:	2000      	movne	r0, #0
 80076f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f2:	4618      	mov	r0, r3
 80076f4:	e7fc      	b.n	80076f0 <strstr+0x2e>

080076f6 <__malloc_lock>:
 80076f6:	4770      	bx	lr

080076f8 <__malloc_unlock>:
 80076f8:	4770      	bx	lr
	...

080076fc <_init>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr

08007708 <_fini>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr
