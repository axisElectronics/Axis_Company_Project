
Port_405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f24  08006f24  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f2c  08006f2c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  20000090  08006fc4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08006fc4  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196b9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b0  00000000  00000000  00039779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0003cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0003dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022090  00000000  00000000  0003e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f90  00000000  00000000  000608a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be29f  00000000  00000000  00071838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ac  00000000  00000000  0012fb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ec4 	.word	0x08006ec4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006ec4 	.word	0x08006ec4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ee 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f810 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8a4 	bl	8000628 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 f912 	bl	8006708 <MX_USB_HOST_Init>
  MX_USART2_UART_Init(Bud_9600);
 80004e4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80004e8:	f000 f872 	bl	80005d0 <MX_USART2_UART_Init>

//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
//  HAL_Delay(5000);
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

  USBH_HID_KeybdInit(&hUsbHostFS);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <main+0x28>)
 80004ee:	f004 fa19 	bl	8004924 <USBH_HID_KeybdInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f2:	f006 f92f 	bl	8006754 <MX_USB_HOST_Process>
 80004f6:	e7fc      	b.n	80004f2 <main+0x22>
 80004f8:	20000128 	.word	0x20000128

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fc0a 	bl	8006d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	; (80005cc <SystemClock_Config+0xd0>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	; 0xa8
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fa3f 	bl	8002a04 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f874 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fca0 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ba:	f000 f85d 	bl	8000678 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(uint32_t Budrate)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART2_UART_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = Budrate;
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_USART2_UART_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART2_UART_Init+0x50>)
 800060a:	f002 fe6f 	bl	80032ec <HAL_UART_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000614:	f000 f830 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000c0 	.word	0x200000c0
 8000624:	40004400 	.word	0x40004400

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_GPIO_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_GPIO_Init+0x4c>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_GPIO_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_GPIO_Init+0x4c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <MX_GPIO_Init+0x4c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_GPIO_Init+0x4c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	4a0f      	ldr	r2, [pc, #60]	; (80006d4 <HAL_MspInit+0x4c>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6453      	str	r3, [r2, #68]	; 0x44
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x4c>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a19      	ldr	r2, [pc, #100]	; (800075c <HAL_UART_MspInit+0x84>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d12b      	bne.n	8000752 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_UART_MspInit+0x88>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_UART_MspInit+0x88>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_UART_MspInit+0x88>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_UART_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <HAL_UART_MspInit+0x88>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_UART_MspInit+0x88>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000732:	230c      	movs	r3, #12
 8000734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000742:	2307      	movs	r3, #7
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <HAL_UART_MspInit+0x8c>)
 800074e:	f000 fa59 	bl	8000c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40004400 	.word	0x40004400
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:
  * @brief This function handles Hard fault interrupt.
  */
extern UART_HandleTypeDef huart2;

void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
 while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f8d0 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <OTG_FS_IRQHandler+0x10>)
 80007c2:	f000 fe25 	bl	8001410 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000500 	.word	0x20000500

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f006 fa56 	bl	8006cb0 <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20020000 	.word	0x20020000
 8000830:	00000400 	.word	0x00000400
 8000834:	200000ac 	.word	0x200000ac
 8000838:	20000818 	.word	0x20000818

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f006 fa15 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe1d 	bl	80004d0 <main>
  bx  lr    
 8000896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80008a4:	08006f34 	.word	0x08006f34
  ldr r2, =_sbss
 80008a8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80008ac:	20000814 	.word	0x20000814

080008b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_Init+0x40>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_Init+0x40>)
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x40>)
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f94f 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fece 	bl	8000688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023c00 	.word	0x40023c00

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f967 	bl	8000bea <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f92f 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	20000104 	.word	0x20000104

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000104 	.word	0x20000104

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff3e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff31 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
 8000c1e:	e16b      	b.n	8000ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c20:	2201      	movs	r2, #1
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 815a 	bne.w	8000ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d130      	bne.n	8000cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	091b      	lsrs	r3, r3, #4
 8000ca2:	f003 0201 	and.w	r2, r3, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d017      	beq.n	8000cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d123      	bne.n	8000d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	220f      	movs	r2, #15
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	69b9      	ldr	r1, [r7, #24]
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	2203      	movs	r2, #3
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0203 	and.w	r2, r3, #3
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80b4 	beq.w	8000ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b60      	ldr	r3, [pc, #384]	; (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a5f      	ldr	r2, [pc, #380]	; (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <HAL_GPIO_Init+0x30c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da6:	4a5b      	ldr	r2, [pc, #364]	; (8000f14 <HAL_GPIO_Init+0x310>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a52      	ldr	r2, [pc, #328]	; (8000f18 <HAL_GPIO_Init+0x314>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d02b      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a51      	ldr	r2, [pc, #324]	; (8000f1c <HAL_GPIO_Init+0x318>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d025      	beq.n	8000e26 <HAL_GPIO_Init+0x222>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <HAL_GPIO_Init+0x31c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d01f      	beq.n	8000e22 <HAL_GPIO_Init+0x21e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <HAL_GPIO_Init+0x320>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d019      	beq.n	8000e1e <HAL_GPIO_Init+0x21a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <HAL_GPIO_Init+0x324>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0x216>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_GPIO_Init+0x328>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d00d      	beq.n	8000e16 <HAL_GPIO_Init+0x212>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_GPIO_Init+0x32c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0x20e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	; (8000f34 <HAL_GPIO_Init+0x330>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_Init+0x20a>
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	e00e      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e0e:	2308      	movs	r3, #8
 8000e10:	e00c      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e12:	2306      	movs	r3, #6
 8000e14:	e00a      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x228>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	f002 0203 	and.w	r2, r2, #3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e3c:	4935      	ldr	r1, [pc, #212]	; (8000f14 <HAL_GPIO_Init+0x310>)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e6e:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_GPIO_Init+0x334>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	f67f ae90 	bls.w	8000c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b08f      	sub	sp, #60	; 0x3c
 8000f40:	af0a      	add	r7, sp, #40	; 0x28
 8000f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e054      	b.n	8000ff8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d106      	bne.n	8000f6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f005 fc2b 	bl	80067c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fdb3 	bl	8003af8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	687e      	ldr	r6, [r7, #4]
 8000f9a:	466d      	mov	r5, sp
 8000f9c:	f106 0410 	add.w	r4, r6, #16
 8000fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb0:	1d33      	adds	r3, r6, #4
 8000fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f002 fd2d 	bl	8003a14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fdaa 	bl	8003b1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	687e      	ldr	r6, [r7, #4]
 8000fce:	466d      	mov	r5, sp
 8000fd0:	f106 0410 	add.w	r4, r6, #16
 8000fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe4:	1d33      	adds	r3, r6, #4
 8000fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f002 febd 	bl	8003d68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001000 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af04      	add	r7, sp, #16
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4603      	mov	r3, r0
 8001010:	70fb      	strb	r3, [r7, #3]
 8001012:	460b      	mov	r3, r1
 8001014:	70bb      	strb	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_HCD_HC_Init+0x28>
 8001024:	2302      	movs	r3, #2
 8001026:	e076      	b.n	8001116 <HAL_HCD_HC_Init+0x116>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	212c      	movs	r1, #44	; 0x2c
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	4413      	add	r3, r2
 800103c:	333d      	adds	r3, #61	; 0x3d
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	212c      	movs	r1, #44	; 0x2c
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	4413      	add	r3, r2
 800104e:	3338      	adds	r3, #56	; 0x38
 8001050:	787a      	ldrb	r2, [r7, #1]
 8001052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	212c      	movs	r1, #44	; 0x2c
 800105a:	fb01 f303 	mul.w	r3, r1, r3
 800105e:	4413      	add	r3, r2
 8001060:	3340      	adds	r3, #64	; 0x40
 8001062:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001064:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	212c      	movs	r1, #44	; 0x2c
 800106c:	fb01 f303 	mul.w	r3, r1, r3
 8001070:	4413      	add	r3, r2
 8001072:	3339      	adds	r3, #57	; 0x39
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	212c      	movs	r1, #44	; 0x2c
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	4413      	add	r3, r2
 8001084:	333f      	adds	r3, #63	; 0x3f
 8001086:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800108a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	78ba      	ldrb	r2, [r7, #2]
 8001090:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001094:	b2d0      	uxtb	r0, r2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	212c      	movs	r1, #44	; 0x2c
 800109a:	fb01 f303 	mul.w	r3, r1, r3
 800109e:	4413      	add	r3, r2
 80010a0:	333a      	adds	r3, #58	; 0x3a
 80010a2:	4602      	mov	r2, r0
 80010a4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da09      	bge.n	80010c2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	212c      	movs	r1, #44	; 0x2c
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	333b      	adds	r3, #59	; 0x3b
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e008      	b.n	80010d4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	212c      	movs	r1, #44	; 0x2c
 80010c8:	fb01 f303 	mul.w	r3, r1, r3
 80010cc:	4413      	add	r3, r2
 80010ce:	333b      	adds	r3, #59	; 0x3b
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	212c      	movs	r1, #44	; 0x2c
 80010da:	fb01 f303 	mul.w	r3, r1, r3
 80010de:	4413      	add	r3, r2
 80010e0:	333c      	adds	r3, #60	; 0x3c
 80010e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010e6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	787c      	ldrb	r4, [r7, #1]
 80010ee:	78ba      	ldrb	r2, [r7, #2]
 80010f0:	78f9      	ldrb	r1, [r7, #3]
 80010f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	4623      	mov	r3, r4
 8001104:	f002 ffb2 	bl	800406c <USB_HC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_HCD_HC_Halt+0x1e>
 8001138:	2302      	movs	r3, #2
 800113a:	e00f      	b.n	800115c <HAL_HCD_HC_Halt+0x3e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f003 f9ee 	bl	800452e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	4608      	mov	r0, r1
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	4603      	mov	r3, r0
 8001174:	70fb      	strb	r3, [r7, #3]
 8001176:	460b      	mov	r3, r1
 8001178:	70bb      	strb	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	212c      	movs	r1, #44	; 0x2c
 8001184:	fb01 f303 	mul.w	r3, r1, r3
 8001188:	4413      	add	r3, r2
 800118a:	333b      	adds	r3, #59	; 0x3b
 800118c:	78ba      	ldrb	r2, [r7, #2]
 800118e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	212c      	movs	r1, #44	; 0x2c
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	4413      	add	r3, r2
 800119c:	333f      	adds	r3, #63	; 0x3f
 800119e:	787a      	ldrb	r2, [r7, #1]
 80011a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011a2:	7c3b      	ldrb	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d112      	bne.n	80011ce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	212c      	movs	r1, #44	; 0x2c
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	3342      	adds	r3, #66	; 0x42
 80011b6:	2203      	movs	r2, #3
 80011b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	333d      	adds	r3, #61	; 0x3d
 80011c8:	7f3a      	ldrb	r2, [r7, #28]
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e008      	b.n	80011e0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	212c      	movs	r1, #44	; 0x2c
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	4413      	add	r3, r2
 80011da:	3342      	adds	r3, #66	; 0x42
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	f200 80c6 	bhi.w	8001374 <HAL_HCD_HC_SubmitRequest+0x210>
 80011e8:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	08001201 	.word	0x08001201
 80011f4:	08001361 	.word	0x08001361
 80011f8:	08001265 	.word	0x08001265
 80011fc:	080012e3 	.word	0x080012e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001200:	7c3b      	ldrb	r3, [r7, #16]
 8001202:	2b01      	cmp	r3, #1
 8001204:	f040 80b8 	bne.w	8001378 <HAL_HCD_HC_SubmitRequest+0x214>
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 80b4 	bne.w	8001378 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001210:	8b3b      	ldrh	r3, [r7, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	212c      	movs	r1, #44	; 0x2c
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	4413      	add	r3, r2
 8001222:	3355      	adds	r3, #85	; 0x55
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	212c      	movs	r1, #44	; 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3355      	adds	r3, #85	; 0x55
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	212c      	movs	r1, #44	; 0x2c
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	4413      	add	r3, r2
 8001248:	3342      	adds	r3, #66	; 0x42
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800124e:	e093      	b.n	8001378 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	212c      	movs	r1, #44	; 0x2c
 8001256:	fb01 f303 	mul.w	r3, r1, r3
 800125a:	4413      	add	r3, r2
 800125c:	3342      	adds	r3, #66	; 0x42
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
      break;
 8001262:	e089      	b.n	8001378 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001264:	78bb      	ldrb	r3, [r7, #2]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d11d      	bne.n	80012a6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	212c      	movs	r1, #44	; 0x2c
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	3355      	adds	r3, #85	; 0x55
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	212c      	movs	r1, #44	; 0x2c
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4413      	add	r3, r2
 800128a:	3342      	adds	r3, #66	; 0x42
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001290:	e073      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	212c      	movs	r1, #44	; 0x2c
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3342      	adds	r3, #66	; 0x42
 80012a0:	2202      	movs	r2, #2
 80012a2:	701a      	strb	r2, [r3, #0]
      break;
 80012a4:	e069      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	212c      	movs	r1, #44	; 0x2c
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	3354      	adds	r3, #84	; 0x54
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	212c      	movs	r1, #44	; 0x2c
 80012c0:	fb01 f303 	mul.w	r3, r1, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	3342      	adds	r3, #66	; 0x42
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
      break;
 80012cc:	e055      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	212c      	movs	r1, #44	; 0x2c
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	4413      	add	r3, r2
 80012da:	3342      	adds	r3, #66	; 0x42
 80012dc:	2202      	movs	r2, #2
 80012de:	701a      	strb	r2, [r3, #0]
      break;
 80012e0:	e04b      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80012e2:	78bb      	ldrb	r3, [r7, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11d      	bne.n	8001324 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	212c      	movs	r1, #44	; 0x2c
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	3355      	adds	r3, #85	; 0x55
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	3342      	adds	r3, #66	; 0x42
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800130e:	e034      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	212c      	movs	r1, #44	; 0x2c
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	3342      	adds	r3, #66	; 0x42
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
      break;
 8001322:	e02a      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	212c      	movs	r1, #44	; 0x2c
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4413      	add	r3, r2
 8001330:	3354      	adds	r3, #84	; 0x54
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	212c      	movs	r1, #44	; 0x2c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	3342      	adds	r3, #66	; 0x42
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
      break;
 800134a:	e016      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	212c      	movs	r1, #44	; 0x2c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3342      	adds	r3, #66	; 0x42
 800135a:	2202      	movs	r2, #2
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e00c      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	212c      	movs	r1, #44	; 0x2c
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	4413      	add	r3, r2
 800136c:	3342      	adds	r3, #66	; 0x42
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
      break;
 8001372:	e002      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001374:	bf00      	nop
 8001376:	e000      	b.n	800137a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001378:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	212c      	movs	r1, #44	; 0x2c
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	4413      	add	r3, r2
 8001386:	3344      	adds	r3, #68	; 0x44
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	8b3a      	ldrh	r2, [r7, #24]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	202c      	movs	r0, #44	; 0x2c
 8001394:	fb00 f303 	mul.w	r3, r0, r3
 8001398:	440b      	add	r3, r1
 800139a:	334c      	adds	r3, #76	; 0x4c
 800139c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	212c      	movs	r1, #44	; 0x2c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	3360      	adds	r3, #96	; 0x60
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	212c      	movs	r1, #44	; 0x2c
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	3350      	adds	r3, #80	; 0x50
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	212c      	movs	r1, #44	; 0x2c
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	3339      	adds	r3, #57	; 0x39
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	3361      	adds	r3, #97	; 0x61
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	222c      	movs	r2, #44	; 0x2c
 80013ee:	fb02 f303 	mul.w	r3, r2, r3
 80013f2:	3338      	adds	r3, #56	; 0x38
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	18d1      	adds	r1, r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	f002 ff42 	bl	8004288 <USB_HC_StartXfer>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop

08001410 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fc5b 	bl	8003ce2 <USB_GetMode>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	f040 80ef 	bne.w	8001612 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 fc3f 	bl	8003cbc <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80e5 	beq.w	8001610 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fc36 	bl	8003cbc <USB_ReadInterrupts>
 8001450:	4603      	mov	r3, r0
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800145a:	d104      	bne.n	8001466 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001464:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fc26 	bl	8003cbc <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800147a:	d104      	bne.n	8001486 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fc16 	bl	8003cbc <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800149a:	d104      	bne.n	80014a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fc06 	bl	8003cbc <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d103      	bne.n	80014c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fbf8 	bl	8003cbc <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d6:	d115      	bne.n	8001504 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f005 f9d6 	bl	80068a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fcee 	bl	8003ee0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fbd7 	bl	8003cbc <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d102      	bne.n	8001520 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f001 f9ff 	bl	800291e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fbc9 	bl	8003cbc <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b08      	cmp	r3, #8
 8001532:	d106      	bne.n	8001542 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f005 f999 	bl	800686c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fbb8 	bl	8003cbc <USB_ReadInterrupts>
 800154c:	4603      	mov	r3, r0
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b10      	cmp	r3, #16
 8001554:	d101      	bne.n	800155a <HAL_HCD_IRQHandler+0x14a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_HCD_IRQHandler+0x14c>
 800155a:	2300      	movs	r3, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0210 	bic.w	r2, r2, #16
 800156e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 f902 	bl	800277a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0210 	orr.w	r2, r2, #16
 8001584:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fb96 	bl	8003cbc <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800159a:	d13a      	bne.n	8001612 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 ffb3 	bl	800450c <USB_HC_ReadInterrupt>
 80015a6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e025      	b.n	80015fa <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d018      	beq.n	80015f4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015d8:	d106      	bne.n	80015e8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8ab 	bl	800173c <HCD_HC_IN_IRQHandler>
 80015e6:	e005      	b.n	80015f4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fcc6 	bl	8001f80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3d4      	bcc.n	80015ae <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800160c:	615a      	str	r2, [r3, #20]
 800160e:	e000      	b.n	8001612 <HAL_HCD_IRQHandler+0x202>
      return;
 8001610:	bf00      	nop
    }
  }
}
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_HCD_Start+0x16>
 800162a:	2302      	movs	r3, #2
 800162c:	e013      	b.n	8001656 <HAL_HCD_Start+0x3e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fa4b 	bl	8003ad6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fcae 	bl	8003fa8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_HCD_Stop+0x16>
 8001670:	2302      	movs	r3, #2
 8001672:	e00d      	b.n	8001690 <HAL_HCD_Stop+0x32>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 f8ad 	bl	80047e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fc55 	bl	8003f54 <USB_ResetPort>
 80016aa:	4603      	mov	r3, r0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	3360      	adds	r3, #96	; 0x60
 80016ce:	781b      	ldrb	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	212c      	movs	r1, #44	; 0x2c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	3350      	adds	r3, #80	; 0x50
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fc99 	bl	8004048 <USB_GetCurrentFrame>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fc74 	bl	800401a <USB_GetHostSpeed>
 8001732:	4603      	mov	r3, r0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d119      	bne.n	80017a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	015a      	lsls	r2, r3, #5
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4413      	add	r3, r2
 8001774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001778:	461a      	mov	r2, r3
 800177a:	2304      	movs	r3, #4
 800177c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4413      	add	r3, r2
 8001786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	0151      	lsls	r1, r2, #5
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	440a      	add	r2, r1
 8001794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	60d3      	str	r3, [r2, #12]
 800179e:	e101      	b.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b6:	d12b      	bne.n	8001810 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017c4:	461a      	mov	r2, r3
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	212c      	movs	r1, #44	; 0x2c
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	3361      	adds	r3, #97	; 0x61
 80017da:	2207      	movs	r2, #7
 80017dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	0151      	lsls	r1, r2, #5
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	440a      	add	r2, r1
 80017f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fe90 	bl	800452e <USB_HC_Halt>
 800180e:	e0c9      	b.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4413      	add	r3, r2
 8001818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b20      	cmp	r3, #32
 8001824:	d109      	bne.n	800183a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4413      	add	r3, r2
 800182e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001832:	461a      	mov	r2, r3
 8001834:	2320      	movs	r3, #32
 8001836:	6093      	str	r3, [r2, #8]
 8001838:	e0b4      	b.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b08      	cmp	r3, #8
 800184e:	d133      	bne.n	80018b8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4413      	add	r3, r2
 8001858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	0151      	lsls	r1, r2, #5
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	440a      	add	r2, r1
 8001866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3361      	adds	r3, #97	; 0x61
 800187e:	2205      	movs	r2, #5
 8001880:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	461a      	mov	r2, r3
 8001890:	2310      	movs	r3, #16
 8001892:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	461a      	mov	r2, r3
 80018a2:	2308      	movs	r3, #8
 80018a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fe3c 	bl	800452e <USB_HC_Halt>
 80018b6:	e075      	b.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ce:	d134      	bne.n	800193a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	0151      	lsls	r1, r2, #5
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	440a      	add	r2, r1
 80018e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3361      	adds	r3, #97	; 0x61
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4413      	add	r3, r2
 800190a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800190e:	461a      	mov	r2, r3
 8001910:	2310      	movs	r3, #16
 8001912:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001920:	461a      	mov	r2, r3
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fdfb 	bl	800452e <USB_HC_Halt>
 8001938:	e034      	b.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194c:	2b80      	cmp	r3, #128	; 0x80
 800194e:	d129      	bne.n	80019a4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4413      	add	r3, r2
 8001958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	0151      	lsls	r1, r2, #5
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	440a      	add	r2, r1
 8001966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3361      	adds	r3, #97	; 0x61
 800197e:	2206      	movs	r2, #6
 8001980:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fdce 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	461a      	mov	r2, r3
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ba:	d122      	bne.n	8001a02 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	0151      	lsls	r1, r2, #5
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	440a      	add	r2, r1
 80019d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fda1 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f8:	461a      	mov	r2, r3
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a00:	e2ba      	b.n	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	015a      	lsls	r2, r3, #5
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 811b 	bne.w	8001c50 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d019      	beq.n	8001a56 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3348      	adds	r3, #72	; 0x48
 8001a30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	0159      	lsls	r1, r3, #5
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	440b      	add	r3, r1
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a44:	1ad2      	subs	r2, r2, r3
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	202c      	movs	r0, #44	; 0x2c
 8001a4c:	fb00 f303 	mul.w	r3, r0, r3
 8001a50:	440b      	add	r3, r1
 8001a52:	3350      	adds	r3, #80	; 0x50
 8001a54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	3361      	adds	r3, #97	; 0x61
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	335c      	adds	r3, #92	; 0x5c
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	461a      	mov	r2, r3
 8001a88:	2301      	movs	r3, #1
 8001a8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	333f      	adds	r3, #63	; 0x3f
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	333f      	adds	r3, #63	; 0x3f
 8001aae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d121      	bne.n	8001af8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	0151      	lsls	r1, r2, #5
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	440a      	add	r2, r1
 8001aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fd25 	bl	800452e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af0:	461a      	mov	r2, r3
 8001af2:	2310      	movs	r3, #16
 8001af4:	6093      	str	r3, [r2, #8]
 8001af6:	e066      	b.n	8001bc6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	333f      	adds	r3, #63	; 0x3f
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d127      	bne.n	8001b5c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b2a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3360      	adds	r3, #96	; 0x60
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	b2d9      	uxtb	r1, r3
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	fb00 f303 	mul.w	r3, r0, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f004 feb3 	bl	80068c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b5a:	e034      	b.n	8001bc6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	333f      	adds	r3, #63	; 0x3f
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d12a      	bne.n	8001bc6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3360      	adds	r3, #96	; 0x60
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	212c      	movs	r1, #44	; 0x2c
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3354      	adds	r3, #84	; 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2d8      	uxtb	r0, r3
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3354      	adds	r3, #84	; 0x54
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	b2d9      	uxtb	r1, r3
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	202c      	movs	r0, #44	; 0x2c
 8001bb4:	fb00 f303 	mul.w	r3, r0, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f004 fe7d 	bl	80068c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d12b      	bne.n	8001c26 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3348      	adds	r3, #72	; 0x48
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	202c      	movs	r0, #44	; 0x2c
 8001be4:	fb00 f202 	mul.w	r2, r0, r2
 8001be8:	440a      	add	r2, r1
 8001bea:	3240      	adds	r2, #64	; 0x40
 8001bec:	8812      	ldrh	r2, [r2, #0]
 8001bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 81be 	beq.w	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3354      	adds	r3, #84	; 0x54
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f083 0301 	eor.w	r3, r3, #1
 8001c10:	b2d8      	uxtb	r0, r3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3354      	adds	r3, #84	; 0x54
 8001c20:	4602      	mov	r2, r0
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	e1a8      	b.n	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3354      	adds	r3, #84	; 0x54
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2d8      	uxtb	r0, r3
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3354      	adds	r3, #84	; 0x54
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	701a      	strb	r2, [r3, #0]
}
 8001c4e:	e193      	b.n	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	f040 8106 	bne.w	8001e74 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	0151      	lsls	r1, r2, #5
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	440a      	add	r2, r1
 8001c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3361      	adds	r3, #97	; 0x61
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d109      	bne.n	8001cb0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3360      	adds	r3, #96	; 0x60
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e0c9      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3361      	adds	r3, #97	; 0x61
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d109      	bne.n	8001cd8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3360      	adds	r3, #96	; 0x60
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e0b5      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3361      	adds	r3, #97	; 0x61
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b06      	cmp	r3, #6
 8001cea:	d009      	beq.n	8001d00 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3361      	adds	r3, #97	; 0x61
 8001cfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d150      	bne.n	8001da2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	335c      	adds	r3, #92	; 0x5c
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	202c      	movs	r0, #44	; 0x2c
 8001d18:	fb00 f303 	mul.w	r3, r0, r3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	335c      	adds	r3, #92	; 0x5c
 8001d20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	335c      	adds	r3, #92	; 0x5c
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d912      	bls.n	8001d5c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	335c      	adds	r3, #92	; 0x5c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3360      	adds	r3, #96	; 0x60
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d5a:	e073      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d84:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d8c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001da0:	e050      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3361      	adds	r3, #97	; 0x61
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d122      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3360      	adds	r3, #96	; 0x60
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dde:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001de6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e023      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3361      	adds	r3, #97	; 0x61
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	d119      	bne.n	8001e44 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	335c      	adds	r3, #92	; 0x5c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	202c      	movs	r0, #44	; 0x2c
 8001e28:	fb00 f303 	mul.w	r3, r0, r3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	335c      	adds	r3, #92	; 0x5c
 8001e30:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	212c      	movs	r1, #44	; 0x2c
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3360      	adds	r3, #96	; 0x60
 8001e40:	2204      	movs	r2, #4
 8001e42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2302      	movs	r3, #2
 8001e54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	202c      	movs	r0, #44	; 0x2c
 8001e60:	fb00 f303 	mul.w	r3, r0, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	3360      	adds	r3, #96	; 0x60
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f004 fd27 	bl	80068c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e72:	e081      	b.n	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d176      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	333f      	adds	r3, #63	; 0x3f
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d121      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	335c      	adds	r3, #92	; 0x5c
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	0151      	lsls	r1, r2, #5
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fb27 	bl	800452e <USB_HC_Halt>
 8001ee0:	e041      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	333f      	adds	r3, #63	; 0x3f
 8001f04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d12d      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	335c      	adds	r3, #92	; 0x5c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d120      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3361      	adds	r3, #97	; 0x61
 8001f32:	2203      	movs	r2, #3
 8001f34:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	0151      	lsls	r1, r2, #5
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fae4 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2310      	movs	r3, #16
 8001f76:	6093      	str	r3, [r2, #8]
}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d119      	bne.n	8001fe4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	0151      	lsls	r1, r2, #5
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001fe2:	e3c6      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d13e      	bne.n	8002078 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	2320      	movs	r3, #32
 800200a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	333d      	adds	r3, #61	; 0x3d
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 83a8 	bne.w	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	333d      	adds	r3, #61	; 0x3d
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	0151      	lsls	r1, r2, #5
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	440a      	add	r2, r1
 800205c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fa5c 	bl	800452e <USB_HC_Halt>
}
 8002076:	e37c      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208e:	d122      	bne.n	80020d6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fa37 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d2:	6093      	str	r3, [r2, #8]
}
 80020d4:	e34d      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d150      	bne.n	800218e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	335c      	adds	r3, #92	; 0x5c
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d111      	bne.n	8002138 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	333d      	adds	r3, #61	; 0x3d
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	2340      	movs	r3, #64	; 0x40
 8002136:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	0151      	lsls	r1, r2, #5
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	440a      	add	r2, r1
 800214e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f002 f9e3 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	2301      	movs	r3, #1
 8002178:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3361      	adds	r3, #97	; 0x61
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
}
 800218c:	e2f1      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d13c      	bne.n	800221e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	2204      	movs	r2, #4
 80021b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	333d      	adds	r3, #61	; 0x3d
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f002 f992 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	6093      	str	r3, [r2, #8]
}
 800221c:	e2a9      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b08      	cmp	r3, #8
 8002232:	d12a      	bne.n	800228a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	461a      	mov	r2, r3
 8002242:	2308      	movs	r3, #8
 8002244:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	0151      	lsls	r1, r2, #5
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	440a      	add	r2, r1
 800225c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f002 f95c 	bl	800452e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3361      	adds	r3, #97	; 0x61
 8002284:	2205      	movs	r2, #5
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	e273      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b10      	cmp	r3, #16
 800229e:	d150      	bne.n	8002342 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	335c      	adds	r3, #92	; 0x5c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	2203      	movs	r2, #3
 80022c2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	333d      	adds	r3, #61	; 0x3d
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d112      	bne.n	80022fe <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	212c      	movs	r1, #44	; 0x2c
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	333c      	adds	r3, #60	; 0x3c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d108      	bne.n	80022fe <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	333d      	adds	r3, #61	; 0x3d
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	0151      	lsls	r1, r2, #5
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	440a      	add	r2, r1
 8002314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 f900 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2310      	movs	r3, #16
 800233e:	6093      	str	r3, [r2, #8]
}
 8002340:	e217      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d174      	bne.n	8002442 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d121      	bne.n	80023a4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3361      	adds	r3, #97	; 0x61
 800236e:	2206      	movs	r2, #6
 8002370:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	440a      	add	r2, r1
 8002388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f002 f8c6 	bl	800452e <USB_HC_Halt>
 80023a2:	e044      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	335c      	adds	r3, #92	; 0x5c
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	202c      	movs	r0, #44	; 0x2c
 80023bc:	fb00 f303 	mul.w	r3, r0, r3
 80023c0:	440b      	add	r3, r1
 80023c2:	335c      	adds	r3, #92	; 0x5c
 80023c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d920      	bls.n	800241c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	335c      	adds	r3, #92	; 0x5c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3360      	adds	r3, #96	; 0x60
 80023fa:	2204      	movs	r2, #4
 80023fc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	b2d9      	uxtb	r1, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	202c      	movs	r0, #44	; 0x2c
 8002408:	fb00 f303 	mul.w	r3, r0, r3
 800240c:	4413      	add	r3, r2
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f004 fa53 	bl	80068c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800241a:	e008      	b.n	800242e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3360      	adds	r3, #96	; 0x60
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	6093      	str	r3, [r2, #8]
}
 8002440:	e197      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d134      	bne.n	80024c4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	440a      	add	r2, r1
 8002470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f002 f852 	bl	800452e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	2310      	movs	r3, #16
 800249a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2208      	movs	r2, #8
 80024c0:	701a      	strb	r2, [r3, #0]
}
 80024c2:	e156      	b.n	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	f040 814b 	bne.w	8002772 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	0151      	lsls	r1, r2, #5
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	440a      	add	r2, r1
 80024f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f6:	f023 0302 	bic.w	r3, r3, #2
 80024fa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d179      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	333f      	adds	r3, #63	; 0x3f
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d00a      	beq.n	800254c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333f      	adds	r3, #63	; 0x3f
 8002544:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	f040 80fc 	bne.w	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d142      	bne.n	80025da <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	334c      	adds	r3, #76	; 0x4c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80ed 	beq.w	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	334c      	adds	r3, #76	; 0x4c
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	202c      	movs	r0, #44	; 0x2c
 8002580:	fb00 f202 	mul.w	r2, r0, r2
 8002584:	440a      	add	r2, r1
 8002586:	3240      	adds	r2, #64	; 0x40
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	4413      	add	r3, r2
 800258c:	3b01      	subs	r3, #1
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	202c      	movs	r0, #44	; 0x2c
 8002594:	fb00 f202 	mul.w	r2, r0, r2
 8002598:	440a      	add	r2, r1
 800259a:	3240      	adds	r2, #64	; 0x40
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80ca 	beq.w	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3355      	adds	r3, #85	; 0x55
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3355      	adds	r3, #85	; 0x55
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e0b4      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3355      	adds	r3, #85	; 0x55
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2d8      	uxtb	r0, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3355      	adds	r3, #85	; 0x55
 80025fe:	4602      	mov	r2, r0
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e09f      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d109      	bne.n	800262c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e08b      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d109      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e077      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d109      	bne.n	800267c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	2205      	movs	r2, #5
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e063      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	; 0x61
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b06      	cmp	r3, #6
 800268e:	d009      	beq.n	80026a4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d14f      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	335c      	adds	r3, #92	; 0x5c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	202c      	movs	r0, #44	; 0x2c
 80026bc:	fb00 f303 	mul.w	r3, r0, r3
 80026c0:	440b      	add	r3, r1
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d912      	bls.n	8002700 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	2204      	movs	r2, #4
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e021      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3360      	adds	r3, #96	; 0x60
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002728:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002730:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	461a      	mov	r2, r3
 8002752:	2302      	movs	r3, #2
 8002754:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	b2d9      	uxtb	r1, r3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	202c      	movs	r0, #44	; 0x2c
 8002760:	fb00 f303 	mul.w	r3, r0, r3
 8002764:	4413      	add	r3, r2
 8002766:	3360      	adds	r3, #96	; 0x60
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f004 f8a7 	bl	80068c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	; 0x28
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	0c5b      	lsrs	r3, r3, #17
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d004      	beq.n	80027c0 <HCD_RXQLVL_IRQHandler+0x46>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	f000 80a9 	beq.w	8002910 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027be:	e0aa      	b.n	8002916 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80a6 	beq.w	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3344      	adds	r3, #68	; 0x44
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 809b 	beq.w	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3350      	adds	r3, #80	; 0x50
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	441a      	add	r2, r3
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	202c      	movs	r0, #44	; 0x2c
 80027f8:	fb00 f303 	mul.w	r3, r0, r3
 80027fc:	440b      	add	r3, r1
 80027fe:	334c      	adds	r3, #76	; 0x4c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d87a      	bhi.n	80028fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3344      	adds	r3, #68	; 0x44
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	b292      	uxth	r2, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f001 fa23 	bl	8003c6a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3344      	adds	r3, #68	; 0x44
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	441a      	add	r2, r3
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	202c      	movs	r0, #44	; 0x2c
 800283e:	fb00 f303 	mul.w	r3, r0, r3
 8002842:	440b      	add	r3, r1
 8002844:	3344      	adds	r3, #68	; 0x44
 8002846:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3350      	adds	r3, #80	; 0x50
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	441a      	add	r2, r3
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	202c      	movs	r0, #44	; 0x2c
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	440b      	add	r3, r1
 8002868:	3350      	adds	r3, #80	; 0x50
 800286a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	0cdb      	lsrs	r3, r3, #19
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3340      	adds	r3, #64	; 0x40
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4293      	cmp	r3, r2
 8002898:	d13c      	bne.n	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d039      	beq.n	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3354      	adds	r3, #84	; 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3354      	adds	r3, #84	; 0x54
 80028f6:	4602      	mov	r2, r0
 80028f8:	701a      	strb	r2, [r3, #0]
      break;
 80028fa:	e00b      	b.n	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	2204      	movs	r2, #4
 800290c:	701a      	strb	r2, [r3, #0]
      break;
 800290e:	e001      	b.n	8002914 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002910:	bf00      	nop
 8002912:	e000      	b.n	8002916 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002914:	bf00      	nop
  }
}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800294a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d10b      	bne.n	800296e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f003 ff91 	bl	8006888 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b08      	cmp	r3, #8
 8002976:	d132      	bne.n	80029de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d126      	bne.n	80029d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d113      	bne.n	80029ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800299c:	d106      	bne.n	80029ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2102      	movs	r1, #2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fa9b 	bl	8003ee0 <USB_InitFSLSPClkSel>
 80029aa:	e011      	b.n	80029d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fa94 	bl	8003ee0 <USB_InitFSLSPClkSel>
 80029b8:	e00a      	b.n	80029d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029c8:	461a      	mov	r2, r3
 80029ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f003 ff83 	bl	80068dc <HAL_HCD_PortEnabled_Callback>
 80029d6:	e002      	b.n	80029de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f003 ff8d 	bl	80068f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d103      	bne.n	80029f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f043 0320 	orr.w	r3, r3, #32
 80029ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e264      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d075      	beq.n	8002b0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4ba0      	ldr	r3, [pc, #640]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b9d      	ldr	r3, [pc, #628]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b99      	ldr	r3, [pc, #612]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e23f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x74>
 8002a6a:	4b91      	ldr	r3, [pc, #580]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a90      	ldr	r2, [pc, #576]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a8a      	ldr	r2, [pc, #552]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a87      	ldr	r2, [pc, #540]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	4b84      	ldr	r3, [pc, #528]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a83      	ldr	r2, [pc, #524]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a80      	ldr	r2, [pc, #512]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fd ff60 	bl	8000980 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fd ff5c 	bl	8000980 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e204      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fd ff4c 	bl	8000980 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fd ff48 	bl	8000980 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1f0      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d063      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b5f      	ldr	r3, [pc, #380]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1c4      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4952      	ldr	r1, [pc, #328]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e03a      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCC_OscConfig+0x2b0>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fd ff01 	bl	8000980 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b82:	f7fd fefd 	bl	8000980 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e1a5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4940      	ldr	r1, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0x2b0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fd fee0 	bl	8000980 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7fd fedc 	bl	8000980 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e184      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_OscConfig+0x2b4>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfc:	f7fd fec0 	bl	8000980 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fd febc 	bl	8000980 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e164      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x200>
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x2b4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fd fea9 	bl	8000980 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fd fea5 	bl	8000980 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e14d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a0 	beq.w	8002d9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_RCC_OscConfig+0x2b8>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fd fe6b 	bl	8000980 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e011      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	42470000 	.word	0x42470000
 8002cb8:	42470e80 	.word	0x42470e80
 8002cbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fd fe5e 	bl	8000980 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e106      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x4e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
 8002ce6:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a80      	ldr	r2, [pc, #512]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x32a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x312>
 8002cfc:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b78      	ldr	r3, [pc, #480]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a77      	ldr	r2, [pc, #476]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x32a>
 8002d16:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a74      	ldr	r2, [pc, #464]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a71      	ldr	r2, [pc, #452]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7fd fe23 	bl	8000980 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fd fe1f 	bl	8000980 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0c5      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x33a>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fd fe0d 	bl	8000980 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fe09 	bl	8000980 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0af      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 809b 	beq.w	8002ede <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d05c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d141      	bne.n	8002e40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fddd 	bl	8000980 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fd fdd9 	bl	8000980 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e081      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	4b43      	ldr	r3, [pc, #268]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	019b      	lsls	r3, r3, #6
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fd fdb2 	bl	8000980 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fd fdae 	bl	8000980 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e056      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x41c>
 8002e3e:	e04e      	b.n	8002ede <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fd fd9b 	bl	8000980 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fd fd97 	bl	8000980 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e03f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x44a>
 8002e6c:	e037      	b.n	8002ede <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e032      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d028      	beq.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d11a      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d001      	beq.n	8002ede <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470060 	.word	0x42470060

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fd fccc 	bl	8000980 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fd fcc8 	bl	8000980 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f821 	bl	80030c0 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fc2c 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08006f0c 	.word	0x08006f0c
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	2300      	movs	r3, #0
 80030d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d8:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d00d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x40>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	f200 80bd 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3a>
 80030f2:	e0b7      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b61      	ldr	r3, [pc, #388]	; (800327c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030f6:	60bb      	str	r3, [r7, #8]
       break;
 80030f8:	e0b7      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030fc:	60bb      	str	r3, [r7, #8]
      break;
 80030fe:	e0b4      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003100:	4b5d      	ldr	r3, [pc, #372]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003108:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310a:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04d      	beq.n	80031b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b58      	ldr	r3, [pc, #352]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	ea02 0800 	and.w	r8, r2, r0
 800312e:	ea03 0901 	and.w	r9, r3, r1
 8003132:	4640      	mov	r0, r8
 8003134:	4649      	mov	r1, r9
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	014b      	lsls	r3, r1, #5
 8003140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003144:	0142      	lsls	r2, r0, #5
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	ebb0 0008 	subs.w	r0, r0, r8
 800314e:	eb61 0109 	sbc.w	r1, r1, r9
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003160:	0182      	lsls	r2, r0, #6
 8003162:	1a12      	subs	r2, r2, r0
 8003164:	eb63 0301 	sbc.w	r3, r3, r1
 8003168:	f04f 0000 	mov.w	r0, #0
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	00d9      	lsls	r1, r3, #3
 8003172:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003176:	00d0      	lsls	r0, r2, #3
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	eb12 0208 	adds.w	r2, r2, r8
 8003180:	eb43 0309 	adc.w	r3, r3, r9
 8003184:	f04f 0000 	mov.w	r0, #0
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	0259      	lsls	r1, r3, #9
 800318e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003192:	0250      	lsls	r0, r2, #9
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	f7fd f818 	bl	80001d8 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e04a      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b2:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	ea02 0400 	and.w	r4, r2, r0
 80031ca:	ea03 0501 	and.w	r5, r3, r1
 80031ce:	4620      	mov	r0, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	014b      	lsls	r3, r1, #5
 80031dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031e0:	0142      	lsls	r2, r0, #5
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	1b00      	subs	r0, r0, r4
 80031e8:	eb61 0105 	sbc.w	r1, r1, r5
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	018b      	lsls	r3, r1, #6
 80031f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031fa:	0182      	lsls	r2, r0, #6
 80031fc:	1a12      	subs	r2, r2, r0
 80031fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	00d9      	lsls	r1, r3, #3
 800320c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003210:	00d0      	lsls	r0, r2, #3
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	1912      	adds	r2, r2, r4
 8003218:	eb45 0303 	adc.w	r3, r5, r3
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	0299      	lsls	r1, r3, #10
 8003226:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800322a:	0290      	lsls	r0, r2, #10
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	461a      	mov	r2, r3
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	f7fc ffcc 	bl	80001d8 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	60bb      	str	r3, [r7, #8]
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003266:	60bb      	str	r3, [r7, #8]
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	68bb      	ldr	r3, [r7, #8]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08006f1c 	.word	0x08006f1c

080032c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032c8:	f7ff ffdc 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0b5b      	lsrs	r3, r3, #13
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	08006f1c 	.word	0x08006f1c

080032ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e03f      	b.n	800337e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd f9e0 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9a7 	bl	8003684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b08a      	sub	sp, #40	; 0x28
 800338a:	af02      	add	r7, sp, #8
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d17c      	bne.n	80034a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_Transmit+0x2c>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e075      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Transmit+0x3e>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e06e      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2221      	movs	r2, #33	; 0x21
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033da:	f7fd fad1 	bl	8000980 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	88fa      	ldrh	r2, [r7, #6]
 80033ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d108      	bne.n	8003408 <HAL_UART_Transmit+0x82>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e003      	b.n	8003410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003418:	e02a      	b.n	8003470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f8e2 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e036      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10b      	bne.n	8003452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	3302      	adds	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e007      	b.n	8003462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1cf      	bne.n	800341a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8b2 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	; 0x28
 80034ae:	af02      	add	r7, sp, #8
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	f040 808c 	bne.w	80035e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_UART_Receive+0x2e>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e084      	b.n	80035e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Receive+0x40>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e07d      	b.n	80035e6 <HAL_UART_Receive+0x13c>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2222      	movs	r2, #34	; 0x22
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003506:	f7fd fa3b 	bl	8000980 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d108      	bne.n	8003534 <HAL_UART_Receive+0x8a>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e003      	b.n	800353c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003544:	e043      	b.n	80035ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2120      	movs	r1, #32
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f84c 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e042      	b.n	80035e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	b29a      	uxth	r2, r3
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	3302      	adds	r3, #2
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e01f      	b.n	80035c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d007      	beq.n	800359a <HAL_UART_Receive+0xf0>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_UART_Receive+0xfe>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e008      	b.n	80035ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1b6      	bne.n	8003546 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fe:	e02c      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d028      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <UART_WaitOnFlagUntilTimeout+0x30>
 800360e:	f7fd f9b7 	bl	8000980 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d21d      	bcs.n	800365a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800362c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d0c3      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003688:	b09f      	sub	sp, #124	; 0x7c
 800368a:	af00      	add	r7, sp, #0
 800368c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369a:	68d9      	ldr	r1, [r3, #12]
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	ea40 0301 	orr.w	r3, r0, r1
 80036a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c8:	f021 010c 	bic.w	r1, r1, #12
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d2:	430b      	orrs	r3, r1
 80036d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e2:	6999      	ldr	r1, [r3, #24]
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	ea40 0301 	orr.w	r3, r0, r1
 80036ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4bc5      	ldr	r3, [pc, #788]	; (8003a08 <UART_SetConfig+0x384>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d004      	beq.n	8003702 <UART_SetConfig+0x7e>
 80036f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4bc3      	ldr	r3, [pc, #780]	; (8003a0c <UART_SetConfig+0x388>)
 80036fe:	429a      	cmp	r2, r3
 8003700:	d103      	bne.n	800370a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003702:	f7ff fddf 	bl	80032c4 <HAL_RCC_GetPCLK2Freq>
 8003706:	6778      	str	r0, [r7, #116]	; 0x74
 8003708:	e002      	b.n	8003710 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800370a:	f7ff fdc7 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 800370e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003718:	f040 80b6 	bne.w	8003888 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800371c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371e:	461c      	mov	r4, r3
 8003720:	f04f 0500 	mov.w	r5, #0
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	1891      	adds	r1, r2, r2
 800372a:	6439      	str	r1, [r7, #64]	; 0x40
 800372c:	415b      	adcs	r3, r3
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
 8003730:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003734:	1912      	adds	r2, r2, r4
 8003736:	eb45 0303 	adc.w	r3, r5, r3
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	00d9      	lsls	r1, r3, #3
 8003744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003748:	00d0      	lsls	r0, r2, #3
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	1911      	adds	r1, r2, r4
 8003750:	6639      	str	r1, [r7, #96]	; 0x60
 8003752:	416b      	adcs	r3, r5
 8003754:	667b      	str	r3, [r7, #100]	; 0x64
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	1891      	adds	r1, r2, r2
 8003762:	63b9      	str	r1, [r7, #56]	; 0x38
 8003764:	415b      	adcs	r3, r3
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800376c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003770:	f7fc fd32 	bl	80001d8 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4ba5      	ldr	r3, [pc, #660]	; (8003a10 <UART_SetConfig+0x38c>)
 800377a:	fba3 2302 	umull	r2, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	011e      	lsls	r6, r3, #4
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	461c      	mov	r4, r3
 8003786:	f04f 0500 	mov.w	r5, #0
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	1891      	adds	r1, r2, r2
 8003790:	6339      	str	r1, [r7, #48]	; 0x30
 8003792:	415b      	adcs	r3, r3
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800379a:	1912      	adds	r2, r2, r4
 800379c:	eb45 0303 	adc.w	r3, r5, r3
 80037a0:	f04f 0000 	mov.w	r0, #0
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ae:	00d0      	lsls	r0, r2, #3
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	1911      	adds	r1, r2, r4
 80037b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b8:	416b      	adcs	r3, r5
 80037ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	1891      	adds	r1, r2, r2
 80037c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80037ca:	415b      	adcs	r3, r3
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037d6:	f7fc fcff 	bl	80001d8 <__aeabi_uldivmod>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <UART_SetConfig+0x38c>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2164      	movs	r1, #100	; 0x64
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a87      	ldr	r2, [pc, #540]	; (8003a10 <UART_SetConfig+0x38c>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003800:	441e      	add	r6, r3
 8003802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003804:	4618      	mov	r0, r3
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	1894      	adds	r4, r2, r2
 8003810:	623c      	str	r4, [r7, #32]
 8003812:	415b      	adcs	r3, r3
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800381a:	1812      	adds	r2, r2, r0
 800381c:	eb41 0303 	adc.w	r3, r1, r3
 8003820:	f04f 0400 	mov.w	r4, #0
 8003824:	f04f 0500 	mov.w	r5, #0
 8003828:	00dd      	lsls	r5, r3, #3
 800382a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800382e:	00d4      	lsls	r4, r2, #3
 8003830:	4622      	mov	r2, r4
 8003832:	462b      	mov	r3, r5
 8003834:	1814      	adds	r4, r2, r0
 8003836:	653c      	str	r4, [r7, #80]	; 0x50
 8003838:	414b      	adcs	r3, r1
 800383a:	657b      	str	r3, [r7, #84]	; 0x54
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	461a      	mov	r2, r3
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	1891      	adds	r1, r2, r2
 8003848:	61b9      	str	r1, [r7, #24]
 800384a:	415b      	adcs	r3, r3
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003856:	f7fc fcbf 	bl	80001d8 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b6c      	ldr	r3, [pc, #432]	; (8003a10 <UART_SetConfig+0x38c>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	; 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	3332      	adds	r3, #50	; 0x32
 8003872:	4a67      	ldr	r2, [pc, #412]	; (8003a10 <UART_SetConfig+0x38c>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4432      	add	r2, r6
 8003884:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003886:	e0b9      	b.n	80039fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388a:	461c      	mov	r4, r3
 800388c:	f04f 0500 	mov.w	r5, #0
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	1891      	adds	r1, r2, r2
 8003896:	6139      	str	r1, [r7, #16]
 8003898:	415b      	adcs	r3, r3
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038a0:	1912      	adds	r2, r2, r4
 80038a2:	eb45 0303 	adc.w	r3, r5, r3
 80038a6:	f04f 0000 	mov.w	r0, #0
 80038aa:	f04f 0100 	mov.w	r1, #0
 80038ae:	00d9      	lsls	r1, r3, #3
 80038b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b4:	00d0      	lsls	r0, r2, #3
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	eb12 0804 	adds.w	r8, r2, r4
 80038be:	eb43 0905 	adc.w	r9, r3, r5
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	008b      	lsls	r3, r1, #2
 80038d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038da:	0082      	lsls	r2, r0, #2
 80038dc:	4640      	mov	r0, r8
 80038de:	4649      	mov	r1, r9
 80038e0:	f7fc fc7a 	bl	80001d8 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <UART_SetConfig+0x38c>)
 80038ea:	fba3 2302 	umull	r2, r3, r3, r2
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	011e      	lsls	r6, r3, #4
 80038f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f4:	4618      	mov	r0, r3
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	1894      	adds	r4, r2, r2
 8003900:	60bc      	str	r4, [r7, #8]
 8003902:	415b      	adcs	r3, r3
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390a:	1812      	adds	r2, r2, r0
 800390c:	eb41 0303 	adc.w	r3, r1, r3
 8003910:	f04f 0400 	mov.w	r4, #0
 8003914:	f04f 0500 	mov.w	r5, #0
 8003918:	00dd      	lsls	r5, r3, #3
 800391a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800391e:	00d4      	lsls	r4, r2, #3
 8003920:	4622      	mov	r2, r4
 8003922:	462b      	mov	r3, r5
 8003924:	1814      	adds	r4, r2, r0
 8003926:	64bc      	str	r4, [r7, #72]	; 0x48
 8003928:	414b      	adcs	r3, r1
 800392a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800392c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4618      	mov	r0, r3
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003944:	0082      	lsls	r2, r0, #2
 8003946:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800394a:	f7fc fc45 	bl	80001d8 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <UART_SetConfig+0x38c>)
 8003954:	fba3 1302 	umull	r1, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2164      	movs	r1, #100	; 0x64
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <UART_SetConfig+0x38c>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003972:	441e      	add	r6, r3
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	4618      	mov	r0, r3
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	1894      	adds	r4, r2, r2
 8003982:	603c      	str	r4, [r7, #0]
 8003984:	415b      	adcs	r3, r3
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800398c:	1812      	adds	r2, r2, r0
 800398e:	eb41 0303 	adc.w	r3, r1, r3
 8003992:	f04f 0400 	mov.w	r4, #0
 8003996:	f04f 0500 	mov.w	r5, #0
 800399a:	00dd      	lsls	r5, r3, #3
 800399c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039a0:	00d4      	lsls	r4, r2, #3
 80039a2:	4622      	mov	r2, r4
 80039a4:	462b      	mov	r3, r5
 80039a6:	eb12 0a00 	adds.w	sl, r2, r0
 80039aa:	eb43 0b01 	adc.w	fp, r3, r1
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039c6:	0082      	lsls	r2, r0, #2
 80039c8:	4650      	mov	r0, sl
 80039ca:	4659      	mov	r1, fp
 80039cc:	f7fc fc04 	bl	80001d8 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <UART_SetConfig+0x38c>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2164      	movs	r1, #100	; 0x64
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <UART_SetConfig+0x38c>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4432      	add	r2, r6
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	377c      	adds	r7, #124	; 0x7c
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a06:	bf00      	nop
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f

08003a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a14:	b084      	sub	sp, #16
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	f107 001c 	add.w	r0, r7, #28
 8003a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d122      	bne.n	8003a72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f94a 	bl	8003d00 <USB_CoreReset>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e01a      	b.n	8003aa8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f93e 	bl	8003d00 <USB_CoreReset>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9a:	e005      	b.n	8003aa8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10b      	bne.n	8003ac6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f043 0206 	orr.w	r2, r3, #6
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad2:	b004      	add	sp, #16
 8003ad4:	4770      	bx	lr

08003ad6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 0201 	bic.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d106      	bne.n	8003b46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e00b      	b.n	8003b5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	e001      	b.n	8003b5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e003      	b.n	8003b66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003b5e:	2032      	movs	r0, #50	; 0x32
 8003b60:	f7fc ff1a 	bl	8000998 <HAL_Delay>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a09      	ldr	r2, [pc, #36]	; (8003bb8 <USB_FlushTxFifo+0x48>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d0f0      	beq.n	8003b8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2210      	movs	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <USB_FlushRxFifo+0x40>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e006      	b.n	8003bee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d0f0      	beq.n	8003bce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	00030d40 	.word	0x00030d40

08003c00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	460b      	mov	r3, r1
 8003c10:	71fb      	strb	r3, [r7, #7]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11a      	bne.n	8003c5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c26:	88bb      	ldrh	r3, [r7, #4]
 8003c28:	3303      	adds	r3, #3
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e00f      	b.n	8003c54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	031a      	lsls	r2, r3, #12
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c40:	461a      	mov	r2, r3
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3eb      	bcc.n	8003c34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b089      	sub	sp, #36	; 0x24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	3303      	adds	r3, #3
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e00b      	b.n	8003ca6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3ef      	bcc.n	8003c8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003cae:	69fb      	ldr	r3, [r7, #28]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3724      	adds	r7, #36	; 0x24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0301 	and.w	r3, r3, #1
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a13      	ldr	r2, [pc, #76]	; (8003d64 <USB_CoreReset+0x64>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e01b      	b.n	8003d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	daf2      	bge.n	8003d0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <USB_CoreReset+0x64>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e006      	b.n	8003d56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d0f0      	beq.n	8003d36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	00030d40 	.word	0x00030d40

08003d68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 001c 	add.w	r0, r7, #28
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d84:	461a      	mov	r2, r3
 8003d86:	2300      	movs	r3, #0
 8003d88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10a      	bne.n	8003dd6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e014      	b.n	8003e00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e009      	b.n	8003e00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e00:	2110      	movs	r1, #16
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff feb4 	bl	8003b70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff fed7 	bl	8003bbc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e015      	b.n	8003e40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	461a      	mov	r2, r3
 8003e36:	2300      	movs	r3, #0
 8003e38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3e5      	bcc.n	8003e14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003e48:	2101      	movs	r1, #1
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8ac 	bl	8003fa8 <USB_DriveVbus>

  HAL_Delay(200U);
 8003e50:	20c8      	movs	r0, #200	; 0xc8
 8003e52:	f7fc fda1 	bl	8000998 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <USB_HostInit+0x164>)
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <USB_HostInit+0x168>)
 8003e82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003e86:	e009      	b.n	8003e9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <USB_HostInit+0x16c>)
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <USB_HostInit+0x170>)
 8003e98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f043 0210 	orr.w	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <USB_HostInit+0x174>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec6:	b004      	add	sp, #16
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	01000200 	.word	0x01000200
 8003ed0:	00e00300 	.word	0x00e00300
 8003ed4:	00600080 	.word	0x00600080
 8003ed8:	004000e0 	.word	0x004000e0
 8003edc:	a3200008 	.word	0xa3200008

08003ee0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f2e:	6053      	str	r3, [r2, #4]
 8003f30:	e009      	b.n	8003f46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d106      	bne.n	8003f46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003f84:	2064      	movs	r0, #100	; 0x64
 8003f86:	f7fc fd07 	bl	8000998 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003f98:	200a      	movs	r0, #10
 8003f9a:	f7fc fcfd 	bl	8000998 <HAL_Delay>

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <USB_DriveVbus+0x44>
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d106      	bne.n	8003fec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff6:	d109      	bne.n	800400c <USB_DriveVbus+0x64>
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800400a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0c5b      	lsrs	r3, r3, #17
 8004038:	f003 0303 	and.w	r3, r3, #3
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	b29b      	uxth	r3, r3
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	70fb      	strb	r3, [r7, #3]
 800407e:	460b      	mov	r3, r1
 8004080:	70bb      	strb	r3, [r7, #2]
 8004082:	4613      	mov	r3, r2
 8004084:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	461a      	mov	r2, r3
 800409c:	f04f 33ff 	mov.w	r3, #4294967295
 80040a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80040a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d87e      	bhi.n	80041a8 <USB_HC_Init+0x13c>
 80040aa:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <USB_HC_Init+0x44>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	0800416b 	.word	0x0800416b
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	0800412d 	.word	0x0800412d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040cc:	461a      	mov	r2, r3
 80040ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80040d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80040d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da10      	bge.n	80040fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80040fc:	e057      	b.n	80041ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d051      	beq.n	80041ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	440a      	add	r2, r1
 8004120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004124:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004128:	60d3      	str	r3, [r2, #12]
      break;
 800412a:	e040      	b.n	80041ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	f240 639d 	movw	r3, #1693	; 0x69d
 800413e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da34      	bge.n	80041b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	440a      	add	r2, r1
 800415e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004168:	e023      	b.n	80041b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	461a      	mov	r2, r3
 8004178:	f240 2325 	movw	r3, #549	; 0x225
 800417c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800417e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da17      	bge.n	80041b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	440a      	add	r2, r1
 800419c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80041a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80041a6:	e006      	b.n	80041b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]
      break;
 80041ac:	e004      	b.n	80041b8 <USB_HC_Init+0x14c>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <USB_HC_Init+0x14c>
      break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <USB_HC_Init+0x14c>
      break;
 80041b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2101      	movs	r1, #1
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80041d2:	4313      	orrs	r3, r2
 80041d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80041e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da03      	bge.n	80041f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80041ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e001      	b.n	80041f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff0f 	bl	800401a <USB_GetHostSpeed>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80041fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004202:	2b02      	cmp	r3, #2
 8004204:	d106      	bne.n	8004214 <USB_HC_Init+0x1a8>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d003      	beq.n	8004214 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800420c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e001      	b.n	8004218 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004218:	787b      	ldrb	r3, [r7, #1]
 800421a:	059b      	lsls	r3, r3, #22
 800421c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004220:	78bb      	ldrb	r3, [r7, #2]
 8004222:	02db      	lsls	r3, r3, #11
 8004224:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004228:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800422a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800422e:	049b      	lsls	r3, r3, #18
 8004230:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004234:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004236:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004238:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800423c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	0159      	lsls	r1, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	440b      	add	r3, r1
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004254:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004256:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800425a:	2b03      	cmp	r3, #3
 800425c:	d10f      	bne.n	800427e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	440a      	add	r2, r1
 8004274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004278:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800427e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80042a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02d      	beq.n	800430e <USB_HC_StartXfer+0x86>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	791b      	ldrb	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d129      	bne.n	800430e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d117      	bne.n	80042f0 <USB_HC_StartXfer+0x68>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	79db      	ldrb	r3, [r3, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <USB_HC_StartXfer+0x48>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	79db      	ldrb	r3, [r3, #7]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d10f      	bne.n	80042f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <USB_HC_StartXfer+0x86>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	795b      	ldrb	r3, [r3, #5]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fa2f 	bl	8004768 <USB_DoPing>
      return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e0f8      	b.n	8004500 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	8912      	ldrh	r2, [r2, #8]
 800431e:	4413      	add	r3, r2
 8004320:	3b01      	subs	r3, #1
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	8912      	ldrh	r2, [r2, #8]
 8004326:	fbb3 f3f2 	udiv	r3, r3, r2
 800432a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800432c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	429a      	cmp	r2, r3
 8004332:	d90b      	bls.n	800434c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	8912      	ldrh	r2, [r2, #8]
 800433e:	fb02 f203 	mul.w	r2, r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	e001      	b.n	800434c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004348:	2301      	movs	r3, #1
 800434a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	8912      	ldrh	r2, [r2, #8]
 800435a:	fb02 f203 	mul.w	r2, r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e003      	b.n	800436c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004376:	04d9      	lsls	r1, r3, #19
 8004378:	4b63      	ldr	r3, [pc, #396]	; (8004508 <USB_HC_StartXfer+0x280>)
 800437a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800437c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	7a9b      	ldrb	r3, [r3, #10]
 8004382:	075b      	lsls	r3, r3, #29
 8004384:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004388:	69f9      	ldr	r1, [r7, #28]
 800438a:	0148      	lsls	r0, r1, #5
 800438c:	6a39      	ldr	r1, [r7, #32]
 800438e:	4401      	add	r1, r0
 8004390:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004394:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004396:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	460a      	mov	r2, r1
 80043b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	bf0c      	ite	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	2300      	movne	r3, #0
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	7e7b      	ldrb	r3, [r7, #25]
 80043fa:	075b      	lsls	r3, r3, #29
 80043fc:	69f9      	ldr	r1, [r7, #28]
 80043fe:	0148      	lsls	r0, r1, #5
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	4401      	add	r1, r0
 8004404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004422:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e003      	b.n	800443e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800443c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004444:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e04e      	b.n	8004500 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d149      	bne.n	80044fe <USB_HC_StartXfer+0x276>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d045      	beq.n	80044fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	79db      	ldrb	r3, [r3, #7]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d830      	bhi.n	80044dc <USB_HC_StartXfer+0x254>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <USB_HC_StartXfer+0x1f8>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004491 	.word	0x08004491
 8004484:	080044b5 	.word	0x080044b5
 8004488:	08004491 	.word	0x08004491
 800448c:	080044b5 	.word	0x080044b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	3303      	adds	r3, #3
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800449a:	8afa      	ldrh	r2, [r7, #22]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d91c      	bls.n	80044e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80044b2:	e015      	b.n	80044e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	3303      	adds	r3, #3
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80044be:	8afa      	ldrh	r2, [r7, #22]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90a      	bls.n	80044e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80044da:	e003      	b.n	80044e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <USB_HC_StartXfer+0x25e>
        break;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <USB_HC_StartXfer+0x25e>
        break;
 80044e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	68d9      	ldr	r1, [r3, #12]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785a      	ldrb	r2, [r3, #1]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2000      	movs	r0, #0
 80044f6:	9000      	str	r0, [sp, #0]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fb81 	bl	8003c00 <USB_WritePacket>
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	1ff80000 	.word	0x1ff80000

0800450c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	b29b      	uxth	r3, r3
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800452e:	b480      	push	{r7}
 8004530:	b089      	sub	sp, #36	; 0x24
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	4413      	add	r3, r2
 8004564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0fdb      	lsrs	r3, r3, #31
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b20      	cmp	r3, #32
 800457c:	d104      	bne.n	8004588 <USB_HC_Halt+0x5a>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e0e8      	b.n	800475a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <USB_HC_Halt+0x66>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d173      	bne.n	800467c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 80cb 	bne.w	8004758 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d143      	bne.n	8004656 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	440a      	add	r2, r1
 8004604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800460c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	440a      	add	r2, r1
 8004624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800462c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3301      	adds	r3, #1
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800463a:	d81d      	bhi.n	8004678 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004652:	d0ec      	beq.n	800462e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004654:	e080      	b.n	8004758 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	440a      	add	r2, r1
 800466c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004674:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004676:	e06f      	b.n	8004758 <USB_HC_Halt+0x22a>
            break;
 8004678:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800467a:	e06d      	b.n	8004758 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	440a      	add	r2, r1
 8004692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d143      	bne.n	8004734 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	440a      	add	r2, r1
 8004702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800470a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3301      	adds	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004718:	d81d      	bhi.n	8004756 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004730:	d0ec      	beq.n	800470c <USB_HC_Halt+0x1de>
 8004732:	e011      	b.n	8004758 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	440a      	add	r2, r1
 800474a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e000      	b.n	8004758 <USB_HC_Halt+0x22a>
          break;
 8004756:	bf00      	nop
    }
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800477c:	2301      	movs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	04da      	lsls	r2, r3, #19
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <USB_DoPing+0x74>)
 8004786:	4013      	ands	r3, r2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	440a      	add	r2, r1
 8004790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004798:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	461a      	mov	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	1ff80000 	.word	0x1ff80000

080047e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff f981 	bl	8003af8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80047f6:	2110      	movs	r1, #16
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff f9b9 	bl	8003b70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff f9dc 	bl	8003bbc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e01f      	b.n	800484a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004820:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004828:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004830:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	3301      	adds	r3, #1
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	d9dc      	bls.n	800480a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e034      	b.n	80048c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800486c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004874:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800487c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	461a      	mov	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	3301      	adds	r3, #1
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800489c:	d80c      	bhi.n	80048b8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b4:	d0ec      	beq.n	8004890 <USB_StopHost+0xb0>
 80048b6:	e000      	b.n	80048ba <USB_StopHost+0xda>
        break;
 80048b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3301      	adds	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d9c7      	bls.n	8004856 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048cc:	461a      	mov	r2, r3
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff f8fa 	bl	8003ad6 <USB_EnableGlobalInt>

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004938:	2200      	movs	r2, #0
 800493a:	709a      	strb	r2, [r3, #2]
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 800493e:	789a      	ldrb	r2, [r3, #2]
 8004940:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004942:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004946:	2200      	movs	r2, #0
 8004948:	711a      	strb	r2, [r3, #4]
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 800494c:	791a      	ldrb	r2, [r3, #4]
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004950:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004954:	2200      	movs	r2, #0
 8004956:	719a      	strb	r2, [r3, #6]
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 800495a:	799a      	ldrb	r2, [r3, #6]
 800495c:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 800495e:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004962:	2200      	movs	r2, #0
 8004964:	721a      	strb	r2, [r3, #8]
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 8004968:	7a1a      	ldrb	r2, [r3, #8]
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <USBH_HID_KeybdInit+0xa4>)
 800496c:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e00c      	b.n	800498e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8004974:	4a15      	ldr	r2, [pc, #84]	; (80049cc <USBH_HID_KeybdInit+0xa8>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2100      	movs	r1, #0
 800497a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800497e:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <USBH_HID_KeybdInit+0xac>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2100      	movs	r1, #0
 8004984:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d9ef      	bls.n	8004974 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	8b1b      	ldrh	r3, [r3, #24]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d902      	bls.n	80049a2 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2208      	movs	r2, #8
 80049a0:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <USBH_HID_KeybdInit+0xac>)
 80049a6:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f103 0008 	add.w	r0, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80049b4:	2250      	movs	r2, #80	; 0x50
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7ff ff98 	bl	80048ec <USBH_HID_FifoInit>

  return USBH_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000118 	.word	0x20000118
 80049cc:	20000108 	.word	0x20000108
 80049d0:	20000110 	.word	0x20000110

080049d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80049e8:	2302      	movs	r3, #2
 80049ea:	e029      	b.n	8004a40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	79fa      	ldrb	r2, [r7, #7]
 80049f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f81f 	bl	8004a48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f001 ff6b 	bl	8006914 <USBH_LL_Init>

  return USBH_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e009      	b.n	8004a6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	33e0      	adds	r3, #224	; 0xe0
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b0e      	cmp	r3, #14
 8004a72:	d9f2      	bls.n	8004a5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e009      	b.n	8004a8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a94:	d3f1      	bcc.n	8004a7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2240      	movs	r2, #64	; 0x40
 8004aba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d016      	beq.n	8004b32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	33de      	adds	r3, #222	; 0xde
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	e004      	b.n	8004b36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	e001      	b.n	8004b36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004b32:	2302      	movs	r3, #2
 8004b34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	70fb      	strb	r3, [r7, #3]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70bb      	strb	r3, [r7, #2]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004b6c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004b6e:	e025      	b.n	8004bbc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	221a      	movs	r2, #26
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	3308      	adds	r3, #8
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	795b      	ldrb	r3, [r3, #5]
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d002      	beq.n	8004b92 <USBH_FindInterface+0x4e>
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	d111      	bne.n	8004bb6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004b96:	78ba      	ldrb	r2, [r7, #2]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d002      	beq.n	8004ba2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004b9c:	78bb      	ldrb	r3, [r7, #2]
 8004b9e:	2bff      	cmp	r3, #255	; 0xff
 8004ba0:	d109      	bne.n	8004bb6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004ba6:	787a      	ldrb	r2, [r7, #1]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d002      	beq.n	8004bb2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004bac:	787b      	ldrb	r3, [r7, #1]
 8004bae:	2bff      	cmp	r3, #255	; 0xff
 8004bb0:	d101      	bne.n	8004bb6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	e006      	b.n	8004bc4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d9d6      	bls.n	8004b70 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004bc2:	23ff      	movs	r3, #255	; 0xff
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 fed7 	bl	800698c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8004bde:	2101      	movs	r1, #1
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f001 fff0 	bl	8006bc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af04      	add	r7, sp, #16
 8004bf6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b0b      	cmp	r3, #11
 8004c1a:	f200 81b3 	bhi.w	8004f84 <USBH_Process+0x394>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <USBH_Process+0x34>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004c87 	.word	0x08004c87
 8004c2c:	08004cef 	.word	0x08004cef
 8004c30:	08004f1f 	.word	0x08004f1f
 8004c34:	08004f85 	.word	0x08004f85
 8004c38:	08004d93 	.word	0x08004d93
 8004c3c:	08004ec5 	.word	0x08004ec5
 8004c40:	08004dc9 	.word	0x08004dc9
 8004c44:	08004de9 	.word	0x08004de9
 8004c48:	08004e09 	.word	0x08004e09
 8004c4c:	08004e37 	.word	0x08004e37
 8004c50:	08004f07 	.word	0x08004f07
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8193 	beq.w	8004f88 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004c68:	20c8      	movs	r0, #200	; 0xc8
 8004c6a:	f001 ffea 	bl	8006c42 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fee9 	bl	8006a46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004c84:	e180      	b.n	8004f88 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004c9e:	e182      	b.n	8004fa6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004caa:	d914      	bls.n	8004cd6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d903      	bls.n	8004cce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	220d      	movs	r2, #13
 8004cca:	701a      	strb	r2, [r3, #0]
      break;
 8004ccc:	e16b      	b.n	8004fa6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
      break;
 8004cd4:	e167      	b.n	8004fa6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004cdc:	f103 020a 	add.w	r2, r3, #10
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f001 ffab 	bl	8006c42 <USBH_Delay>
      break;
 8004cec:	e15b      	b.n	8004fa6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004cfe:	2104      	movs	r1, #4
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004d04:	2064      	movs	r0, #100	; 0x64
 8004d06:	f001 ff9c 	bl	8006c42 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fe74 	bl	80069f8 <USBH_LL_GetSpeed>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004d20:	2100      	movs	r1, #0
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f001 f8ed 	bl	8005f02 <USBH_AllocPipe>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 f8e5 	bl	8005f02 <USBH_AllocPipe>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7919      	ldrb	r1, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004d54:	b292      	uxth	r2, r2
 8004d56:	9202      	str	r2, [sp, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	9201      	str	r2, [sp, #4]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 f89e 	bl	8005ea4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7959      	ldrb	r1, [r3, #5]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004d7c:	b292      	uxth	r2, r2
 8004d7e:	9202      	str	r2, [sp, #8]
 8004d80:	2200      	movs	r2, #0
 8004d82:	9201      	str	r2, [sp, #4]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4603      	mov	r3, r0
 8004d88:	2200      	movs	r2, #0
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f88a 	bl	8005ea4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004d90:	e109      	b.n	8004fa6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f90c 	bl	8004fb0 <USBH_HandleEnum>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f040 80f3 	bne.w	8004f8c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d103      	bne.n	8004dc0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004dbe:	e0e5      	b.n	8004f8c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2207      	movs	r2, #7
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e0e1      	b.n	8004f8c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80de 	beq.w	8004f90 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004dda:	2101      	movs	r1, #1
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2208      	movs	r2, #8
 8004de4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8004de6:	e0d3      	b.n	8004f90 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fc20 	bl	8005638 <USBH_SetCfg>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 80ca 	bne.w	8004f94 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2209      	movs	r2, #9
 8004e04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e06:	e0c5      	b.n	8004f94 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004e16:	2101      	movs	r1, #1
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc30 	bl	800567e <USBH_SetFeature>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 80b9 	bne.w	8004f98 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	220a      	movs	r2, #10
 8004e2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e2c:	e0b4      	b.n	8004f98 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	220a      	movs	r2, #10
 8004e32:	701a      	strb	r2, [r3, #0]
      break;
 8004e34:	e0b0      	b.n	8004f98 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80ad 	beq.w	8004f9c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	e016      	b.n	8004e7e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	32de      	adds	r2, #222	; 0xde
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	791a      	ldrb	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d108      	bne.n	8004e78 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	32de      	adds	r2, #222	; 0xde
 8004e6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8004e76:	e005      	b.n	8004e84 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0e5      	beq.n	8004e50 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d109      	bne.n	8004eb4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2206      	movs	r2, #6
 8004ea4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004eac:	2103      	movs	r1, #3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004eb2:	e073      	b.n	8004f9c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	220d      	movs	r2, #13
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e06f      	b.n	8004f9c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	220d      	movs	r2, #13
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e06b      	b.n	8004f9c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d017      	beq.n	8004efe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	4798      	blx	r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	220b      	movs	r2, #11
 8004eea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004eec:	e058      	b.n	8004fa0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d154      	bne.n	8004fa0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	220d      	movs	r2, #13
 8004efa:	701a      	strb	r2, [r3, #0]
      break;
 8004efc:	e050      	b.n	8004fa0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	220d      	movs	r2, #13
 8004f02:	701a      	strb	r2, [r3, #0]
      break;
 8004f04:	e04c      	b.n	8004fa0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d049      	beq.n	8004fa4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
      }
      break;
 8004f1c:	e042      	b.n	8004fa4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fd8e 	bl	8004a48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f5a:	2105      	movs	r1, #5
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fe2b 	bl	8004bd0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f7a:	e014      	b.n	8004fa6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fd05 	bl	800698c <USBH_LL_Start>
      break;
 8004f82:	e010      	b.n	8004fa6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8004f84:	bf00      	nop
 8004f86:	e00e      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e00c      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004f8c:	bf00      	nop
 8004f8e:	e00a      	b.n	8004fa6 <USBH_Process+0x3b6>
    break;
 8004f90:	bf00      	nop
 8004f92:	e008      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004f94:	bf00      	nop
 8004f96:	e006      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004f98:	bf00      	nop
 8004f9a:	e004      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <USBH_Process+0x3b6>
      break;
 8004fa4:	bf00      	nop
  }
  return USBH_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af04      	add	r7, sp, #16
 8004fb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	f200 81c1 	bhi.w	800534c <USBH_HandleEnum+0x39c>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <USBH_HandleEnum+0x20>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	080050af 	.word	0x080050af
 8004fd8:	08005119 	.word	0x08005119
 8004fdc:	080051a7 	.word	0x080051a7
 8004fe0:	08005211 	.word	0x08005211
 8004fe4:	08005281 	.word	0x08005281
 8004fe8:	080052c7 	.word	0x080052c7
 8004fec:	0800530d 	.word	0x0800530d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8004ff0:	2108      	movs	r1, #8
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa50 	bl	8005498 <USBH_Get_DevDesc>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d130      	bne.n	8005064 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	7919      	ldrb	r1, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005026:	b292      	uxth	r2, r2
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	9201      	str	r2, [sp, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4603      	mov	r3, r0
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 ff35 	bl	8005ea4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7959      	ldrb	r1, [r3, #5]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800504e:	b292      	uxth	r2, r2
 8005050:	9202      	str	r2, [sp, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	9201      	str	r2, [sp, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4603      	mov	r3, r0
 800505a:	2200      	movs	r2, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 ff21 	bl	8005ea4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005062:	e175      	b.n	8005350 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	2b03      	cmp	r3, #3
 8005068:	f040 8172 	bne.w	8005350 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005072:	3301      	adds	r3, #1
 8005074:	b2da      	uxtb	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005082:	2b03      	cmp	r3, #3
 8005084:	d903      	bls.n	800508e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	220d      	movs	r2, #13
 800508a:	701a      	strb	r2, [r3, #0]
      break;
 800508c:	e160      	b.n	8005350 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	795b      	ldrb	r3, [r3, #5]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 ff55 	bl	8005f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	791b      	ldrb	r3, [r3, #4]
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 ff4f 	bl	8005f44 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
      break;
 80050ac:	e150      	b.n	8005350 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80050ae:	2112      	movs	r1, #18
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9f1 	bl	8005498 <USBH_Get_DevDesc>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80050ba:	7bbb      	ldrb	r3, [r7, #14]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80050c6:	e145      	b.n	8005354 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	f040 8142 	bne.w	8005354 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050d6:	3301      	adds	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d903      	bls.n	80050f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	220d      	movs	r2, #13
 80050ee:	701a      	strb	r2, [r3, #0]
      break;
 80050f0:	e130      	b.n	8005354 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	795b      	ldrb	r3, [r3, #5]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 ff23 	bl	8005f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 ff1d 	bl	8005f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
      break;
 8005116:	e11d      	b.n	8005354 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005118:	2101      	movs	r1, #1
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa68 	bl	80055f0 <USBH_SetAddress>
 8005120:	4603      	mov	r3, r0
 8005122:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d132      	bne.n	8005190 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800512a:	2002      	movs	r0, #2
 800512c:	f001 fd89 	bl	8006c42 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2203      	movs	r2, #3
 800513c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7919      	ldrb	r1, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005152:	b292      	uxth	r2, r2
 8005154:	9202      	str	r2, [sp, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	9201      	str	r2, [sp, #4]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4603      	mov	r3, r0
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe9f 	bl	8005ea4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7959      	ldrb	r1, [r3, #5]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800517a:	b292      	uxth	r2, r2
 800517c:	9202      	str	r2, [sp, #8]
 800517e:	2200      	movs	r2, #0
 8005180:	9201      	str	r2, [sp, #4]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	2200      	movs	r2, #0
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fe8b 	bl	8005ea4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800518e:	e0e3      	b.n	8005358 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b03      	cmp	r3, #3
 8005194:	f040 80e0 	bne.w	8005358 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	220d      	movs	r2, #13
 800519c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	705a      	strb	r2, [r3, #1]
      break;
 80051a4:	e0d8      	b.n	8005358 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80051a6:	2109      	movs	r1, #9
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f99d 	bl	80054e8 <USBH_Get_CfgDesc>
 80051ae:	4603      	mov	r3, r0
 80051b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2204      	movs	r2, #4
 80051bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80051be:	e0cd      	b.n	800535c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f040 80ca 	bne.w	800535c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051ce:	3301      	adds	r3, #1
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d903      	bls.n	80051ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	220d      	movs	r2, #13
 80051e6:	701a      	strb	r2, [r3, #0]
      break;
 80051e8:	e0b8      	b.n	800535c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	795b      	ldrb	r3, [r3, #5]
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fea7 	bl	8005f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	791b      	ldrb	r3, [r3, #4]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fea1 	bl	8005f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
      break;
 800520e:	e0a5      	b.n	800535c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f965 	bl	80054e8 <USBH_Get_CfgDesc>
 800521e:	4603      	mov	r3, r0
 8005220:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2205      	movs	r2, #5
 800522c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800522e:	e097      	b.n	8005360 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2b03      	cmp	r3, #3
 8005234:	f040 8094 	bne.w	8005360 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800523e:	3301      	adds	r3, #1
 8005240:	b2da      	uxtb	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800524e:	2b03      	cmp	r3, #3
 8005250:	d903      	bls.n	800525a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	220d      	movs	r2, #13
 8005256:	701a      	strb	r2, [r3, #0]
      break;
 8005258:	e082      	b.n	8005360 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	795b      	ldrb	r3, [r3, #5]
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fe6f 	bl	8005f44 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	791b      	ldrb	r3, [r3, #4]
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fe69 	bl	8005f44 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
      break;
 800527e:	e06f      	b.n	8005360 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005286:	2b00      	cmp	r3, #0
 8005288:	d019      	beq.n	80052be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005296:	23ff      	movs	r3, #255	; 0xff
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f949 	bl	8005530 <USBH_Get_StringDesc>
 800529e:	4603      	mov	r3, r0
 80052a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2206      	movs	r2, #6
 80052ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80052ae:	e059      	b.n	8005364 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d156      	bne.n	8005364 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2206      	movs	r2, #6
 80052ba:	705a      	strb	r2, [r3, #1]
      break;
 80052bc:	e052      	b.n	8005364 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2206      	movs	r2, #6
 80052c2:	705a      	strb	r2, [r3, #1]
      break;
 80052c4:	e04e      	b.n	8005364 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d019      	beq.n	8005304 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80052dc:	23ff      	movs	r3, #255	; 0xff
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f926 	bl	8005530 <USBH_Get_StringDesc>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2207      	movs	r2, #7
 80052f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80052f4:	e038      	b.n	8005368 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d135      	bne.n	8005368 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2207      	movs	r2, #7
 8005300:	705a      	strb	r2, [r3, #1]
      break;
 8005302:	e031      	b.n	8005368 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2207      	movs	r2, #7
 8005308:	705a      	strb	r2, [r3, #1]
      break;
 800530a:	e02d      	b.n	8005368 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005322:	23ff      	movs	r3, #255	; 0xff
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f903 	bl	8005530 <USBH_Get_StringDesc>
 800532a:	4603      	mov	r3, r0
 800532c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005338:	e018      	b.n	800536c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d115      	bne.n	800536c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
      break;
 8005344:	e012      	b.n	800536c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
      break;
 800534a:	e00f      	b.n	800536c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800534c:	bf00      	nop
 800534e:	e00e      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005350:	bf00      	nop
 8005352:	e00c      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005354:	bf00      	nop
 8005356:	e00a      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005358:	bf00      	nop
 800535a:	e008      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 800535c:	bf00      	nop
 800535e:	e006      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005360:	bf00      	nop
 8005362:	e004      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005364:	bf00      	nop
 8005366:	e002      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <USBH_HandleEnum+0x3be>
      break;
 800536c:	bf00      	nop
  }
  return Status;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f804 	bl	80053ba <USBH_HandleSof>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b0b      	cmp	r3, #11
 80053ca:	d10a      	bne.n	80053e2 <USBH_HandleSof+0x28>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
  }
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80053fa:	bf00      	nop
}
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005416:	bf00      	nop
}
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 faa6 	bl	80069c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	791b      	ldrb	r3, [r3, #4]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fd61 	bl	8005f44 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	795b      	ldrb	r3, [r3, #5]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fd5b 	bl	8005f44 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f864 	bl	8005586 <USBH_GetDescriptor>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	b292      	uxth	r2, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f000 f8f4 	bl	80056c6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	331c      	adds	r3, #28
 80054f8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005504:	2100      	movs	r1, #0
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f83d 	bl	8005586 <USBH_GetDescriptor>
 800550c:	4603      	mov	r3, r0
 800550e:	72fb      	strb	r3, [r7, #11]
 8005510:	7afb      	ldrb	r3, [r7, #11]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d107      	bne.n	8005526 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800551c:	887a      	ldrh	r2, [r7, #2]
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f940 	bl	80057a6 <USBH_ParseCfgDesc>
  }

  return status;
 8005526:	7afb      	ldrb	r3, [r7, #11]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	461a      	mov	r2, r3
 800553c:	460b      	mov	r3, r1
 800553e:	72fb      	strb	r3, [r7, #11]
 8005540:	4613      	mov	r3, r2
 8005542:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800554c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005554:	893b      	ldrh	r3, [r7, #8]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	460b      	mov	r3, r1
 800555a:	2100      	movs	r1, #0
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f812 	bl	8005586 <USBH_GetDescriptor>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005572:	893a      	ldrh	r2, [r7, #8]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fa13 	bl	80059a2 <USBH_ParseStringDesc>
  }

  return status;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	72fb      	strb	r3, [r7, #11]
 8005594:	4613      	mov	r3, r2
 8005596:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	789b      	ldrb	r3, [r3, #2]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11c      	bne.n	80055da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2206      	movs	r2, #6
 80055b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	893a      	ldrh	r2, [r7, #8]
 80055b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80055b8:	893b      	ldrh	r3, [r7, #8]
 80055ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c2:	d104      	bne.n	80055ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f240 4209 	movw	r2, #1033	; 0x409
 80055ca:	829a      	strh	r2, [r3, #20]
 80055cc:	e002      	b.n	80055d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8b3a      	ldrh	r2, [r7, #24]
 80055d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80055da:	8b3b      	ldrh	r3, [r7, #24]
 80055dc:	461a      	mov	r2, r3
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fa2c 	bl	8005a3e <USBH_CtlReq>
 80055e6:	4603      	mov	r3, r0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	789b      	ldrb	r3, [r3, #2]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d10f      	bne.n	8005624 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2205      	movs	r2, #5
 800560e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005624:	2200      	movs	r2, #0
 8005626:	2100      	movs	r1, #0
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fa08 	bl	8005a3e <USBH_CtlReq>
 800562e:	4603      	mov	r3, r0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	789b      	ldrb	r3, [r3, #2]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d10e      	bne.n	800566a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2209      	movs	r2, #9
 8005656:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9e5 	bl	8005a3e <USBH_CtlReq>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	789b      	ldrb	r3, [r3, #2]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d10f      	bne.n	80056b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2203      	movs	r2, #3
 800569c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9c1 	bl	8005a3e <USBH_CtlReq>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	785a      	ldrb	r2, [r3, #1]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3302      	adds	r3, #2
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	3303      	adds	r3, #3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4313      	orrs	r3, r2
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	791a      	ldrb	r2, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	795a      	ldrb	r2, [r3, #5]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	799a      	ldrb	r2, [r3, #6]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	79da      	ldrb	r2, [r3, #7]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005720:	88fb      	ldrh	r3, [r7, #6]
 8005722:	2b08      	cmp	r3, #8
 8005724:	d939      	bls.n	800579a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3308      	adds	r3, #8
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29a      	uxth	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	3309      	adds	r3, #9
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	330a      	adds	r3, #10
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	330b      	adds	r3, #11
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	b29b      	uxth	r3, r3
 8005756:	4313      	orrs	r3, r2
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	330c      	adds	r3, #12
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	330d      	adds	r3, #13
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	b29b      	uxth	r3, r3
 8005772:	4313      	orrs	r3, r2
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	7b9a      	ldrb	r2, [r3, #14]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	7bda      	ldrb	r2, [r3, #15]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	7c1a      	ldrb	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7c5a      	ldrb	r2, [r3, #17]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	745a      	strb	r2, [r3, #17]
  }
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b08a      	sub	sp, #40	; 0x28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	4613      	mov	r3, r2
 80057b2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	785a      	ldrb	r2, [r3, #1]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3302      	adds	r3, #2
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	3303      	adds	r3, #3
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4313      	orrs	r3, r2
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	791a      	ldrb	r2, [r3, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	795a      	ldrb	r2, [r3, #5]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	799a      	ldrb	r2, [r3, #6]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	79da      	ldrb	r2, [r3, #7]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	7a1a      	ldrb	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	2b09      	cmp	r3, #9
 8005820:	d95f      	bls.n	80058e2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8005822:	2309      	movs	r3, #9
 8005824:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800582a:	e051      	b.n	80058d0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800582c:	f107 0316 	add.w	r3, r7, #22
 8005830:	4619      	mov	r1, r3
 8005832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005834:	f000 f8e8 	bl	8005a08 <USBH_GetNextDesc>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d146      	bne.n	80058d0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005846:	221a      	movs	r2, #26
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	3308      	adds	r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	3302      	adds	r3, #2
 8005854:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005858:	69f8      	ldr	r0, [r7, #28]
 800585a:	f000 f846 	bl	80058ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005868:	e022      	b.n	80058b0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800586a:	f107 0316 	add.w	r3, r7, #22
 800586e:	4619      	mov	r1, r3
 8005870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005872:	f000 f8c9 	bl	8005a08 <USBH_GetNextDesc>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b05      	cmp	r3, #5
 800587e:	d117      	bne.n	80058b0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005884:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005888:	3201      	adds	r2, #1
 800588a:	00d2      	lsls	r2, r2, #3
 800588c:	211a      	movs	r1, #26
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	3308      	adds	r3, #8
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	3304      	adds	r3, #4
 800589c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800589e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a0:	69b8      	ldr	r0, [r7, #24]
 80058a2:	f000 f851 	bl	8005948 <USBH_ParseEPDesc>
            ep_ix++;
 80058a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80058aa:	3301      	adds	r3, #1
 80058ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d204      	bcs.n	80058c6 <USBH_ParseCfgDesc+0x120>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	885a      	ldrh	r2, [r3, #2]
 80058c0:	8afb      	ldrh	r3, [r7, #22]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d8d1      	bhi.n	800586a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80058c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ca:	3301      	adds	r3, #1
 80058cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80058d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d804      	bhi.n	80058e2 <USBH_ParseCfgDesc+0x13c>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	885a      	ldrh	r2, [r3, #2]
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d8a4      	bhi.n	800582c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80058e2:	bf00      	nop
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781a      	ldrb	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	785a      	ldrb	r2, [r3, #1]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	789a      	ldrb	r2, [r3, #2]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	78da      	ldrb	r2, [r3, #3]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	791a      	ldrb	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	795a      	ldrb	r2, [r3, #5]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	799a      	ldrb	r2, [r3, #6]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	79da      	ldrb	r2, [r3, #7]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	7a1a      	ldrb	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	721a      	strb	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	785a      	ldrb	r2, [r3, #1]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	789a      	ldrb	r2, [r3, #2]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	78da      	ldrb	r2, [r3, #3]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	3304      	adds	r3, #4
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b29a      	uxth	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3305      	adds	r3, #5
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	799a      	ldrb	r2, [r3, #6]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	719a      	strb	r2, [r3, #6]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b087      	sub	sp, #28
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d120      	bne.n	80059fc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	1e9a      	subs	r2, r3, #2
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	bf28      	it	cs
 80059c6:	4613      	movcs	r3, r2
 80059c8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3302      	adds	r3, #2
 80059ce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80059d0:	2300      	movs	r3, #0
 80059d2:	82fb      	strh	r3, [r7, #22]
 80059d4:	e00b      	b.n	80059ee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	3301      	adds	r3, #1
 80059e6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	3302      	adds	r3, #2
 80059ec:	82fb      	strh	r3, [r7, #22]
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	8abb      	ldrh	r3, [r7, #20]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d3ef      	bcc.n	80059d6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
  }
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	789b      	ldrb	r3, [r3, #2]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d002      	beq.n	8005a5e <USBH_CtlReq+0x20>
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d00f      	beq.n	8005a7c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005a5c:	e027      	b.n	8005aae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2202      	movs	r2, #2
 8005a74:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7a:	e018      	b.n	8005aae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f81b 	bl	8005ab8 <USBH_HandleControl>
 8005a82:	4603      	mov	r3, r0
 8005a84:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <USBH_CtlReq+0x54>
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d106      	bne.n	8005aa0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	761a      	strb	r2, [r3, #24]
      break;
 8005a9e:	e005      	b.n	8005aac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d102      	bne.n	8005aac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	709a      	strb	r2, [r3, #2]
      break;
 8005aac:	bf00      	nop
  }
  return status;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7e1b      	ldrb	r3, [r3, #24]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	2b0a      	cmp	r3, #10
 8005ad0:	f200 8156 	bhi.w	8005d80 <USBH_HandleControl+0x2c8>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <USBH_HandleControl+0x24>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b23 	.word	0x08005b23
 8005ae4:	08005b8d 	.word	0x08005b8d
 8005ae8:	08005bb3 	.word	0x08005bb3
 8005aec:	08005beb 	.word	0x08005beb
 8005af0:	08005c15 	.word	0x08005c15
 8005af4:	08005c67 	.word	0x08005c67
 8005af8:	08005c89 	.word	0x08005c89
 8005afc:	08005cc5 	.word	0x08005cc5
 8005b00:	08005ceb 	.word	0x08005ceb
 8005b04:	08005d29 	.word	0x08005d29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f103 0110 	add.w	r1, r3, #16
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	795b      	ldrb	r3, [r3, #5]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f943 	bl	8005da0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	761a      	strb	r2, [r3, #24]
      break;
 8005b20:	e139      	b.n	8005d96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	795b      	ldrb	r3, [r3, #5]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 f839 	bl	8006ba0 <USBH_LL_GetURBState>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d11e      	bne.n	8005b76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	7c1b      	ldrb	r3, [r3, #16]
 8005b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8adb      	ldrh	r3, [r3, #22]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005b4a:	7b7b      	ldrb	r3, [r7, #13]
 8005b4c:	2b80      	cmp	r3, #128	; 0x80
 8005b4e:	d103      	bne.n	8005b58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2203      	movs	r2, #3
 8005b54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005b56:	e115      	b.n	8005d84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	761a      	strb	r2, [r3, #24]
      break;
 8005b5e:	e111      	b.n	8005d84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005b60:	7b7b      	ldrb	r3, [r7, #13]
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d103      	bne.n	8005b6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2209      	movs	r2, #9
 8005b6a:	761a      	strb	r2, [r3, #24]
      break;
 8005b6c:	e10a      	b.n	8005d84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2207      	movs	r2, #7
 8005b72:	761a      	strb	r2, [r3, #24]
      break;
 8005b74:	e106      	b.n	8005d84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d003      	beq.n	8005b84 <USBH_HandleControl+0xcc>
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	f040 8100 	bne.w	8005d84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	220b      	movs	r2, #11
 8005b88:	761a      	strb	r2, [r3, #24]
      break;
 8005b8a:	e0fb      	b.n	8005d84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	899a      	ldrh	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	791b      	ldrb	r3, [r3, #4]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f93a 	bl	8005e1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2204      	movs	r2, #4
 8005bae:	761a      	strb	r2, [r3, #24]
      break;
 8005bb0:	e0f1      	b.n	8005d96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	791b      	ldrb	r3, [r3, #4]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fff1 	bl	8006ba0 <USBH_LL_GetURBState>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005bc2:	7bbb      	ldrb	r3, [r7, #14]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2209      	movs	r2, #9
 8005bcc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d102      	bne.n	8005bda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005bd8:	e0d6      	b.n	8005d88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	f040 80d3 	bne.w	8005d88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	220b      	movs	r2, #11
 8005be6:	761a      	strb	r2, [r3, #24]
      break;
 8005be8:	e0ce      	b.n	8005d88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	899a      	ldrh	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	795b      	ldrb	r3, [r3, #5]
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	9000      	str	r0, [sp, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f8ea 	bl	8005dd4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2206      	movs	r2, #6
 8005c10:	761a      	strb	r2, [r3, #24]
      break;
 8005c12:	e0c0      	b.n	8005d96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	795b      	ldrb	r3, [r3, #5]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 ffc0 	bl	8006ba0 <USBH_LL_GetURBState>
 8005c20:	4603      	mov	r3, r0
 8005c22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d103      	bne.n	8005c32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005c30:	e0ac      	b.n	8005d8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8005c32:	7bbb      	ldrb	r3, [r7, #14]
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d105      	bne.n	8005c44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	220c      	movs	r2, #12
 8005c3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	73fb      	strb	r3, [r7, #15]
      break;
 8005c42:	e0a3      	b.n	8005d8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d103      	bne.n	8005c52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2205      	movs	r2, #5
 8005c4e:	761a      	strb	r2, [r3, #24]
      break;
 8005c50:	e09c      	b.n	8005d8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	f040 8099 	bne.w	8005d8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	220b      	movs	r2, #11
 8005c5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005c60:	2302      	movs	r3, #2
 8005c62:	73fb      	strb	r3, [r7, #15]
      break;
 8005c64:	e092      	b.n	8005d8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	791b      	ldrb	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8d5 	bl	8005e1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2208      	movs	r2, #8
 8005c84:	761a      	strb	r2, [r3, #24]

      break;
 8005c86:	e086      	b.n	8005d96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 ff86 	bl	8006ba0 <USBH_LL_GetURBState>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d105      	bne.n	8005caa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	220d      	movs	r2, #13
 8005ca2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005ca8:	e072      	b.n	8005d90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d103      	bne.n	8005cb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	220b      	movs	r2, #11
 8005cb4:	761a      	strb	r2, [r3, #24]
      break;
 8005cb6:	e06b      	b.n	8005d90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d168      	bne.n	8005d90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc2:	e065      	b.n	8005d90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	795b      	ldrb	r3, [r3, #5]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	9200      	str	r2, [sp, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f87f 	bl	8005dd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	761a      	strb	r2, [r3, #24]
      break;
 8005ce8:	e055      	b.n	8005d96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	795b      	ldrb	r3, [r3, #5]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ff55 	bl	8006ba0 <USBH_LL_GetURBState>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d105      	bne.n	8005d0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	220d      	movs	r2, #13
 8005d08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d0a:	e043      	b.n	8005d94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d103      	bne.n	8005d1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2209      	movs	r2, #9
 8005d16:	761a      	strb	r2, [r3, #24]
      break;
 8005d18:	e03c      	b.n	8005d94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d139      	bne.n	8005d94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	220b      	movs	r2, #11
 8005d24:	761a      	strb	r2, [r3, #24]
      break;
 8005d26:	e035      	b.n	8005d94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7e5b      	ldrb	r3, [r3, #25]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	765a      	strb	r2, [r3, #25]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7e5b      	ldrb	r3, [r3, #25]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d806      	bhi.n	8005d4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005d48:	e025      	b.n	8005d96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d50:	2106      	movs	r1, #6
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	795b      	ldrb	r3, [r3, #5]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f8ee 	bl	8005f44 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	791b      	ldrb	r3, [r3, #4]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f8e8 	bl	8005f44 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7e:	e00a      	b.n	8005d96 <USBH_HandleControl+0x2de>

    default:
      break;
 8005d80:	bf00      	nop
 8005d82:	e008      	b.n	8005d96 <USBH_HandleControl+0x2de>
      break;
 8005d84:	bf00      	nop
 8005d86:	e006      	b.n	8005d96 <USBH_HandleControl+0x2de>
      break;
 8005d88:	bf00      	nop
 8005d8a:	e004      	b.n	8005d96 <USBH_HandleControl+0x2de>
      break;
 8005d8c:	bf00      	nop
 8005d8e:	e002      	b.n	8005d96 <USBH_HandleControl+0x2de>
      break;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <USBH_HandleControl+0x2de>
      break;
 8005d94:	bf00      	nop
  }

  return status;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af04      	add	r7, sp, #16
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005dae:	79f9      	ldrb	r1, [r7, #7]
 8005db0:	2300      	movs	r3, #0
 8005db2:	9303      	str	r3, [sp, #12]
 8005db4:	2308      	movs	r3, #8
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 feba 	bl	8006b3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4611      	mov	r1, r2
 8005de0:	461a      	mov	r2, r3
 8005de2:	460b      	mov	r3, r1
 8005de4:	80fb      	strh	r3, [r7, #6]
 8005de6:	4613      	mov	r3, r2
 8005de8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005df8:	7979      	ldrb	r1, [r7, #5]
 8005dfa:	7e3b      	ldrb	r3, [r7, #24]
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	9302      	str	r3, [sp, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	2301      	movs	r3, #1
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fe95 	bl	8006b3e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b088      	sub	sp, #32
 8005e22:	af04      	add	r7, sp, #16
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	4611      	mov	r1, r2
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	80fb      	strh	r3, [r7, #6]
 8005e30:	4613      	mov	r3, r2
 8005e32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e34:	7979      	ldrb	r1, [r7, #5]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9303      	str	r3, [sp, #12]
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	2301      	movs	r3, #1
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	2201      	movs	r2, #1
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fe77 	bl	8006b3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005e50:	2300      	movs	r3, #0

}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b088      	sub	sp, #32
 8005e5e:	af04      	add	r7, sp, #16
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	4611      	mov	r1, r2
 8005e66:	461a      	mov	r2, r3
 8005e68:	460b      	mov	r3, r1
 8005e6a:	80fb      	strh	r3, [r7, #6]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005e7e:	7979      	ldrb	r1, [r7, #5]
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	9303      	str	r3, [sp, #12]
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	9302      	str	r3, [sp, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2302      	movs	r3, #2
 8005e92:	2200      	movs	r2, #0
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fe52 	bl	8006b3e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af04      	add	r7, sp, #16
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	70fb      	strb	r3, [r7, #3]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70bb      	strb	r3, [r7, #2]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8005ebe:	7878      	ldrb	r0, [r7, #1]
 8005ec0:	78ba      	ldrb	r2, [r7, #2]
 8005ec2:	78f9      	ldrb	r1, [r7, #3]
 8005ec4:	8b3b      	ldrh	r3, [r7, #24]
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	7d3b      	ldrb	r3, [r7, #20]
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	7c3b      	ldrb	r3, [r7, #16]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fde5 	bl	8006aa2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fe04 	bl	8006b00 <USBH_LL_ClosePipe>

  return USBH_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f836 	bl	8005f80 <USBH_GetFreePipe>
 8005f14:	4603      	mov	r3, r0
 8005f16:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8005f18:	89fb      	ldrh	r3, [r7, #14]
 8005f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00a      	beq.n	8005f38 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005f22:	78fa      	ldrb	r2, [r7, #3]
 8005f24:	89fb      	ldrh	r3, [r7, #14]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	33e0      	adds	r3, #224	; 0xe0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8005f38:	89fb      	ldrh	r3, [r7, #14]
 8005f3a:	b2db      	uxtb	r3, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	2b0a      	cmp	r3, #10
 8005f54:	d80d      	bhi.n	8005f72 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	33e0      	adds	r3, #224	; 0xe0
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	33e0      	adds	r3, #224	; 0xe0
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	e00f      	b.n	8005fb2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	33e0      	adds	r3, #224	; 0xe0
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	e007      	b.n	8005fbc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b0a      	cmp	r3, #10
 8005fb6:	d9ec      	bls.n	8005f92 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8005fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USBH_PRT_InterfaceInit>:
//}PRT_HandleTypeDef;

#define PRT_BOOT_CODE 1


static USBH_StatusTypeDef USBH_PRT_InterfaceInit(USBH_HandleTypeDef *phost){
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b089      	sub	sp, #36	; 0x24
 8005fcc:	af04      	add	r7, sp, #16
 8005fce:	6078      	str	r0, [r7, #4]

	// USBH_DeviceTypeDef  device;
	PRT_HandleTypeDef *PRT_Handle;
	phost->pActiveClass->pData = (PRT_HandleTypeDef *)USBH_malloc(sizeof(PRT_HandleTypeDef));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fd6:	2020      	movs	r0, #32
 8005fd8:	f000 fe94 	bl	8006d04 <malloc>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	61e3      	str	r3, [r4, #28]
	PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	60bb      	str	r3, [r7, #8]

	memset(PRT_Handle, 0, sizeof(PRT_HandleTypeDef));
 8005fea:	2220      	movs	r2, #32
 8005fec:	2100      	movs	r1, #0
 8005fee:	68b8      	ldr	r0, [r7, #8]
 8005ff0:	f000 fe98 	bl	8006d24 <memset>

	PRT_Handle->num = 0;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	709a      	strb	r2, [r3, #2]
	 PRT_Handle->poll = 10;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	729a      	strb	r2, [r3, #10]
	PRT_Handle->interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, PRT_BOOT_CODE, 0xFFU);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006006:	7919      	ldrb	r1, [r3, #4]
 8006008:	23ff      	movs	r3, #255	; 0xff
 800600a:	2201      	movs	r2, #1
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fe fd99 	bl	8004b44 <USBH_FindInterface>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	705a      	strb	r2, [r3, #1]
	PRT_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	785b      	ldrb	r3, [r3, #1]
 800601e:	4619      	mov	r1, r3
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	231a      	movs	r3, #26
 8006024:	fb03 f301 	mul.w	r3, r3, r1
 8006028:	4413      	add	r3, r2
 800602a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	71da      	strb	r2, [r3, #7]
    PRT_Handle->length    = phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].wMaxPacketSize;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	4619      	mov	r1, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	231a      	movs	r3, #26
 800603e:	fb03 f301 	mul.w	r3, r3, r1
 8006042:	4413      	add	r3, r2
 8006044:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	811a      	strh	r2, [r3, #8]

    PRT_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[0].bEndpointAddress);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	4619      	mov	r1, r3
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	231a      	movs	r3, #26
 8006058:	fb03 f301 	mul.w	r3, r3, r1
 800605c:	4413      	add	r3, r2
 800605e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	719a      	strb	r2, [r3, #6]
    PRT_Handle->InPipe = USBH_AllocPipe(phost, PRT_Handle->InEp);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	799b      	ldrb	r3, [r3, #6]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff ff47 	bl	8005f02 <USBH_AllocPipe>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	711a      	strb	r2, [r3, #4]

    PRT_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[1].bEndpointAddress);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	4619      	mov	r1, r3
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	231a      	movs	r3, #26
 8006086:	fb03 f301 	mul.w	r3, r3, r1
 800608a:	4413      	add	r3, r2
 800608c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	715a      	strb	r2, [r3, #5]
    PRT_Handle->OutPipe  = USBH_AllocPipe(phost, PRT_Handle->OutEp);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	795b      	ldrb	r3, [r3, #5]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff ff30 	bl	8005f02 <USBH_AllocPipe>
 80060a2:	4603      	mov	r3, r0
 80060a4:	461a      	mov	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	70da      	strb	r2, [r3, #3]

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
   if(phost->pActiveClass->ClassCode == USB_PRT_CLASS){
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	2b07      	cmp	r3, #7
 80060b4:	d107      	bne.n	80060c6 <USBH_PRT_InterfaceInit+0xfe>
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nPrinter class\r\n",(uint16_t)strlen("\nPrinter class\r\n"),( uint32_t) 1000);
 80060b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ba:	2210      	movs	r2, #16
 80060bc:	4932      	ldr	r1, [pc, #200]	; (8006188 <USBH_PRT_InterfaceInit+0x1c0>)
 80060be:	4833      	ldr	r0, [pc, #204]	; (800618c <USBH_PRT_InterfaceInit+0x1c4>)
 80060c0:	f7fd f961 	bl	8003386 <HAL_UART_Transmit>
 80060c4:	e006      	b.n	80060d4 <USBH_PRT_InterfaceInit+0x10c>
   }else{
	   HAL_UART_Transmit(&huart2, (uint8_t *)"\nNOT Printer class\r\n",(uint16_t)strlen("\nNOT Printer class\r\n"),( uint32_t) 1000);
 80060c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ca:	2214      	movs	r2, #20
 80060cc:	4930      	ldr	r1, [pc, #192]	; (8006190 <USBH_PRT_InterfaceInit+0x1c8>)
 80060ce:	482f      	ldr	r0, [pc, #188]	; (800618c <USBH_PRT_InterfaceInit+0x1c4>)
 80060d0:	f7fd f959 	bl	8003386 <HAL_UART_Transmit>


//	HAL_UART_Transmit(&huart2, (uint8_t *)phost->device.CfgDesc_Raw,(uint16_t)255 ,( uint32_t)1000);

   /* Decode endpoint IN and OUT address from interface descriptor */
     for (int num = 0; num < 2; num++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e04d      	b.n	8006176 <USBH_PRT_InterfaceInit+0x1ae>
     {
	   if (phost->device.CfgDesc.Itf_Desc[PRT_Handle->interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	4618      	mov	r0, r3
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	00d9      	lsls	r1, r3, #3
 80060e8:	231a      	movs	r3, #26
 80060ea:	fb03 f300 	mul.w	r3, r3, r0
 80060ee:	440b      	add	r3, r1
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 3346 	addw	r3, r3, #838	; 0x346
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da1c      	bge.n	8006138 <USBH_PRT_InterfaceInit+0x170>
		  {
			/* Open pipe for IN endpoint */
			USBH_OpenPipe(phost, PRT_Handle->InPipe, PRT_Handle->InEp, phost->device.address,
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	7919      	ldrb	r1, [r3, #4]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	7998      	ldrb	r0, [r3, #6]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	8912      	ldrh	r2, [r2, #8]
 8006116:	9202      	str	r2, [sp, #8]
 8006118:	2202      	movs	r2, #2
 800611a:	9201      	str	r2, [sp, #4]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	4623      	mov	r3, r4
 8006120:	4602      	mov	r2, r0
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff febe 	bl	8005ea4 <USBH_OpenPipe>
						  phost->device.speed, USB_EP_TYPE_BULK, PRT_Handle->length);

			USBH_LL_SetToggle(phost, PRT_Handle->InPipe, 0U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	791b      	ldrb	r3, [r3, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd56 	bl	8006be2 <USBH_LL_SetToggle>
 8006136:	e01b      	b.n	8006170 <USBH_PRT_InterfaceInit+0x1a8>
		  } else {



			   /* Open pipe for OUT endpoint */
			   USBH_OpenPipe(phost, PRT_Handle->OutPipe, PRT_Handle->OutEp, phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,PRT_Handle->length);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	78d9      	ldrb	r1, [r3, #3]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	7958      	ldrb	r0, [r3, #5]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	8912      	ldrh	r2, [r2, #8]
 8006150:	9202      	str	r2, [sp, #8]
 8006152:	2202      	movs	r2, #2
 8006154:	9201      	str	r2, [sp, #4]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4623      	mov	r3, r4
 800615a:	4602      	mov	r2, r0
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fea1 	bl	8005ea4 <USBH_OpenPipe>


			   USBH_LL_SetToggle(phost, PRT_Handle->OutPipe, 0U);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2200      	movs	r2, #0
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fd39 	bl	8006be2 <USBH_LL_SetToggle>
     for (int num = 0; num < 2; num++)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3301      	adds	r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	ddae      	ble.n	80060da <USBH_PRT_InterfaceInit+0x112>

		  }
     }

return USBH_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bd90      	pop	{r4, r7, pc}
 8006186:	bf00      	nop
 8006188:	08006ee0 	.word	0x08006ee0
 800618c:	200000c0 	.word	0x200000c0
 8006190:	08006ef4 	.word	0x08006ef4

08006194 <USBH_PRT_InterfaceDeInit>:


static USBH_StatusTypeDef USBH_PRT_InterfaceDeInit(USBH_HandleTypeDef *phost){
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->InPipe != 0x00U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	791b      	ldrb	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <USBH_PRT_InterfaceDeInit+0x38>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->InPipe);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fe94 	bl	8005ee2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->InPipe);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff febf 	bl	8005f44 <USBH_FreePipe>
	    PRT_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	711a      	strb	r2, [r3, #4]
	  }

	  if (PRT_Handle->OutPipe != 0x00U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	78db      	ldrb	r3, [r3, #3]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <USBH_PRT_InterfaceDeInit+0x5e>
	  {
	    USBH_ClosePipe(phost, PRT_Handle->OutPipe);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	78db      	ldrb	r3, [r3, #3]
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fe81 	bl	8005ee2 <USBH_ClosePipe>
	    USBH_FreePipe(phost, PRT_Handle->OutPipe);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	78db      	ldrb	r3, [r3, #3]
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff feac 	bl	8005f44 <USBH_FreePipe>
	    PRT_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	70da      	strb	r2, [r3, #3]
	  }

	  if (phost->pActiveClass->pData)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <USBH_PRT_InterfaceDeInit+0x82>
	  {
	    USBH_free(phost->pActiveClass->pData);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fd84 	bl	8006d14 <free>
	    phost->pActiveClass->pData = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006212:	2200      	movs	r2, #0
 8006214:	61da      	str	r2, [r3, #28]
	  }



HAL_Delay(500);
 8006216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800621a:	f7fa fbbd 	bl	8000998 <HAL_Delay>

return USBH_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBH_PRT_ClassRequest>:


static USBH_StatusTypeDef USBH_PRT_ClassRequest(USBH_HandleTypeDef *phost){
 8006228:	b580      	push	{r7, lr}
 800622a:	b0a8      	sub	sp, #160	; 0xa0
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

	uint8_t buff[150];
	memset(buff,0,150);
 8006230:	f107 0308 	add.w	r3, r7, #8
 8006234:	2296      	movs	r2, #150	; 0x96
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fd73 	bl	8006d24 <memset>

// some printers required these cammands and some are not. these commands give us some usefull infomation only.
// Although that infomation we don't required any where in this Driver.

	while( USBH_PRT_Get_Device_Id(phost, buff, 150) != USBH_OK);
 800623e:	bf00      	nop
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	2296      	movs	r2, #150	; 0x96
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa1a 	bl	8006682 <USBH_PRT_Get_Device_Id>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f5      	bne.n	8006240 <USBH_PRT_ClassRequest+0x18>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)strlen(buff) ,( uint32_t)1000);
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4618      	mov	r0, r3
 800625a:	f7f9 ffb5 	bl	80001c8 <strlen>
 800625e:	4603      	mov	r3, r0
 8006260:	b29a      	uxth	r2, r3
 8006262:	f107 0108 	add.w	r1, r7, #8
 8006266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800626a:	4817      	ldr	r0, [pc, #92]	; (80062c8 <USBH_PRT_ClassRequest+0xa0>)
 800626c:	f7fd f88b 	bl	8003386 <HAL_UART_Transmit>
	memset(buff,0,150);
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	2296      	movs	r2, #150	; 0x96
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fd53 	bl	8006d24 <memset>

	while( USBH_PRT_Get_Port_Status(phost, buff, 150) != USBH_OK);
 800627e:	bf00      	nop
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	2296      	movs	r2, #150	; 0x96
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa1b 	bl	80066c4 <USBH_PRT_Get_Port_Status>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f5      	bne.n	8006280 <USBH_PRT_ClassRequest+0x58>
	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)strlen(buff) ,( uint32_t)1000);
 8006294:	f107 0308 	add.w	r3, r7, #8
 8006298:	4618      	mov	r0, r3
 800629a:	f7f9 ff95 	bl	80001c8 <strlen>
 800629e:	4603      	mov	r3, r0
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f107 0108 	add.w	r1, r7, #8
 80062a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062aa:	4807      	ldr	r0, [pc, #28]	; (80062c8 <USBH_PRT_ClassRequest+0xa0>)
 80062ac:	f7fd f86b 	bl	8003386 <HAL_UART_Transmit>
	memset(buff,0,150);
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	2296      	movs	r2, #150	; 0x96
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fd33 	bl	8006d24 <memset>

//	while( USBH_PRT_Soft_Reset(phost, buff, 1) != USBH_OK);
//	HAL_UART_Transmit(&huart2, (uint8_t *)buff,(uint16_t)strlen(buff) ,( uint32_t)1000);
//	memset(buff,0,150);

	return USBH_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	37a0      	adds	r7, #160	; 0xa0
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200000c0 	.word	0x200000c0

080062cc <USBH_PRT_Process>:


static USBH_StatusTypeDef USBH_PRT_Process(USBH_HandleTypeDef *phost){
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	f5ad 5d1d 	sub.w	sp, sp, #10048	; 0x2740
 80062d2:	b08f      	sub	sp, #60	; 0x3c
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062da:	3b2c      	subs	r3, #44	; 0x2c
 80062dc:	6018      	str	r0, [r3, #0]

	 uint16_t XferSize=0;
 80062de:	2300      	movs	r3, #0
 80062e0:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80062e4:	f102 0222 	add.w	r2, r2, #34	; 0x22
 80062e8:	8013      	strh	r3, [r2, #0]
	 uint8_t temp[64],pktcnt;
	 uint8_t buff[SIZE_BUFF];

	 USBH_StatusTypeDef status = USBH_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80062f0:	f102 0221 	add.w	r2, r2, #33	; 0x21
 80062f4:	7013      	strb	r3, [r2, #0]
	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 80062f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062fa:	3b2c      	subs	r3, #44	; 0x2c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006308:	f102 021c 	add.w	r2, r2, #28
 800630c:	6013      	str	r3, [r2, #0]

	 memset(temp,0,64);
 800630e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8006312:	f103 031c 	add.w	r3, r3, #28
 8006316:	2240      	movs	r2, #64	; 0x40
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fd02 	bl	8006d24 <memset>

	 PRT_Handle->poll = 100;
 8006320:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006324:	f103 031c 	add.w	r3, r3, #28
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2264      	movs	r2, #100	; 0x64
 800632c:	729a      	strb	r2, [r3, #10]

	 switch(PRT_Handle->state){
 800632e:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006332:	f103 031c 	add.w	r3, r3, #28
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b03      	cmp	r3, #3
 800633c:	f200 8173 	bhi.w	8006626 <USBH_PRT_Process+0x35a>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <USBH_PRT_Process+0x7c>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006359 	.word	0x08006359
 800634c:	08006369 	.word	0x08006369
 8006350:	080063e3 	.word	0x080063e3
 8006354:	08006599 	.word	0x08006599

	case PRT_INIT:
		PRT_Handle->state = PRT_SYNC;
 8006358:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800635c:	f103 031c 	add.w	r3, r3, #28
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2201      	movs	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
					break;
 8006366:	e161      	b.n	800662c <USBH_PRT_Process+0x360>

	 case PRT_SYNC:
	      /* Sync with start of Even Frame */

		 if (phost->Timer & 1U)
 8006368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800636c:	3b2c      	subs	r3, #44	; 0x2c
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <USBH_PRT_Process+0xbe>
	      {
	        PRT_Handle->state = PRT_GET_DATA;
 800637c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006380:	f103 031c 	add.w	r3, r3, #28
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2202      	movs	r2, #2
 8006388:	701a      	strb	r2, [r3, #0]
	      }

		 memset(buff,0,SIZE_BUFF);
 800638a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800638e:	3b24      	subs	r3, #36	; 0x24
 8006390:	f242 7210 	movw	r2, #10000	; 0x2710
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fcc4 	bl	8006d24 <memset>

		HAL_UART_Receive(&huart2, buff, SIZE_BUFF,1000);
 800639c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80063a0:	3924      	subs	r1, #36	; 0x24
 80063a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80063aa:	48a4      	ldr	r0, [pc, #656]	; (800663c <USBH_PRT_Process+0x370>)
 80063ac:	f7fd f87d 	bl	80034aa <HAL_UART_Receive>

			 if((strlen(buff) < 10) )
 80063b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063b4:	3b24      	subs	r3, #36	; 0x24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7f9 ff06 	bl	80001c8 <strlen>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b09      	cmp	r3, #9
 80063c0:	d807      	bhi.n	80063d2 <USBH_PRT_Process+0x106>
				 PRT_Handle->state = PRT_SYNC;
 80063c2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80063c6:	f103 031c 	add.w	r3, r3, #28
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
			 else
				 PRT_Handle->state = PRT_GET_DATA;

	      break;
 80063d0:	e12c      	b.n	800662c <USBH_PRT_Process+0x360>
				 PRT_Handle->state = PRT_GET_DATA;
 80063d2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80063d6:	f103 031c 	add.w	r3, r3, #28
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2202      	movs	r2, #2
 80063de:	701a      	strb	r2, [r3, #0]
	      break;
 80063e0:	e124      	b.n	800662c <USBH_PRT_Process+0x360>

	 case PRT_GET_DATA:
		 pktcnt=0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80063e8:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80063ec:	7013      	strb	r3, [r2, #0]
		 XferSize = strlen(buff)+1;
 80063ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063f2:	3b24      	subs	r3, #36	; 0x24
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7f9 fee7 	bl	80001c8 <strlen>
 80063fa:	4603      	mov	r3, r0
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006404:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8006408:	8013      	strh	r3, [r2, #0]
		 // Number of packets are important because the max packet size is decided and can not send more than that.
		 // Here in this case is 64 bytes. It is already decided by device/configuration structures.
	for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 800640a:	2300      	movs	r3, #0
 800640c:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 8006410:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e08d      	b.n	8006534 <USBH_PRT_Process+0x268>
	{
		 for(int j=0; j < PRT_Handle->length; j++)
 8006418:	2300      	movs	r3, #0
 800641a:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800641e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e025      	b.n	8006472 <USBH_PRT_Process+0x1a6>
		 {
				 temp[j] = buff[i+j];
 8006426:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800642a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006434:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	441a      	add	r2, r3
 800643c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006440:	3b24      	subs	r3, #36	; 0x24
 8006442:	5c99      	ldrb	r1, [r3, r2]
 8006444:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8006448:	f102 021c 	add.w	r2, r2, #28
 800644c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006450:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4413      	add	r3, r2
 8006458:	460a      	mov	r2, r1
 800645a:	701a      	strb	r2, [r3, #0]
		 for(int j=0; j < PRT_Handle->length; j++)
 800645c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006460:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800646c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006476:	f103 031c 	add.w	r3, r3, #28
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	891b      	ldrh	r3, [r3, #8]
 800647e:	461a      	mov	r2, r3
 8006480:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006484:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4293      	cmp	r3, r2
 800648c:	dbcb      	blt.n	8006426 <USBH_PRT_Process+0x15a>
		 }//for(j)

		 PRT_Handle->buff = temp;
 800648e:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006492:	f103 031c 	add.w	r3, r3, #28
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800649c:	f102 021c 	add.w	r2, r2, #28
 80064a0:	615a      	str	r2, [r3, #20]
		 status = USBH_BulkSendData(phost, PRT_Handle->buff, (uint16_t)PRT_Handle->length, PRT_Handle->OutPipe, 0);
 80064a2:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064a6:	f103 031c 	add.w	r3, r3, #28
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6959      	ldr	r1, [r3, #20]
 80064ae:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064b2:	f103 031c 	add.w	r3, r3, #28
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	891a      	ldrh	r2, [r3, #8]
 80064ba:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064be:	f103 031c 	add.w	r3, r3, #28
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	78db      	ldrb	r3, [r3, #3]
 80064c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80064ca:	382c      	subs	r0, #44	; 0x2c
 80064cc:	2400      	movs	r4, #0
 80064ce:	9400      	str	r4, [sp, #0]
 80064d0:	6800      	ldr	r0, [r0, #0]
 80064d2:	f7ff fcc2 	bl	8005e5a <USBH_BulkSendData>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80064dc:	f102 0221 	add.w	r2, r2, #33	; 0x21
 80064e0:	7013      	strb	r3, [r2, #0]
		 memset(temp,0,64);
 80064e2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80064e6:	f103 031c 	add.w	r3, r3, #28
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fc18 	bl	8006d24 <memset>
		 USBH_Delay(10);
 80064f4:	200a      	movs	r0, #10
 80064f6:	f000 fba4 	bl	8006c42 <USBH_Delay>
		 pktcnt++;
 80064fa:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80064fe:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800650a:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 800650e:	7013      	strb	r3, [r2, #0]
	for(int i=0; (pktcnt <= (XferSize/PRT_Handle->length)); i += PRT_Handle->length)
 8006510:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006514:	f103 031c 	add.w	r3, r3, #28
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	891b      	ldrh	r3, [r3, #8]
 800651c:	461a      	mov	r2, r3
 800651e:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006522:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4413      	add	r3, r2
 800652a:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 800652e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006538:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b29a      	uxth	r2, r3
 8006540:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006544:	f103 031c 	add.w	r3, r3, #28
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	891b      	ldrh	r3, [r3, #8]
 800654c:	f507 511d 	add.w	r1, r7, #10048	; 0x2740
 8006550:	f101 0122 	add.w	r1, r1, #34	; 0x22
 8006554:	8809      	ldrh	r1, [r1, #0]
 8006556:	fbb1 f3f3 	udiv	r3, r1, r3
 800655a:	b29b      	uxth	r3, r3
 800655c:	429a      	cmp	r2, r3
 800655e:	f67f af5b 	bls.w	8006418 <USBH_PRT_Process+0x14c>

	}

	 PRT_Handle->state = PRT_POLL;
 8006562:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006566:	f103 031c 	add.w	r3, r3, #28
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2203      	movs	r2, #3
 800656e:	701a      	strb	r2, [r3, #0]
	 PRT_Handle->timer = phost->Timer;
 8006570:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006574:	3b2c      	subs	r3, #44	; 0x2c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800657c:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006580:	f103 031c 	add.w	r3, r3, #28
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
	 PRT_Handle->DataReady = 0U;
 8006588:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800658c:	f103 031c 	add.w	r3, r3, #28
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	741a      	strb	r2, [r3, #16]
	 break;
 8006596:	e049      	b.n	800662c <USBH_PRT_Process+0x360>

	 case PRT_POLL:

		 if(USBH_LL_GetURBState(phost, PRT_Handle->OutPipe) == USBH_URB_DONE){
 8006598:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 800659c:	f103 031c 	add.w	r3, r3, #28
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	78da      	ldrb	r2, [r3, #3]
 80065a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065a8:	3b2c      	subs	r3, #44	; 0x2c
 80065aa:	4611      	mov	r1, r2
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f000 faf7 	bl	8006ba0 <USBH_LL_GetURBState>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d138      	bne.n	800662a <USBH_PRT_Process+0x35e>

			 status = USBH_LL_GetURBState(phost, PRT_Handle->OutPipe);
 80065b8:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065bc:	f103 031c 	add.w	r3, r3, #28
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	78da      	ldrb	r2, [r3, #3]
 80065c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065c8:	3b2c      	subs	r3, #44	; 0x2c
 80065ca:	4611      	mov	r1, r2
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f000 fae7 	bl	8006ba0 <USBH_LL_GetURBState>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80065d8:	f102 0221 	add.w	r2, r2, #33	; 0x21
 80065dc:	7013      	strb	r3, [r2, #0]
			 XferSize = USBH_LL_GetLastXferSize(phost, PRT_Handle->OutPipe);
 80065de:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 80065e2:	f103 031c 	add.w	r3, r3, #28
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	78da      	ldrb	r2, [r3, #3]
 80065ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065ee:	3b2c      	subs	r3, #44	; 0x2c
 80065f0:	4611      	mov	r1, r2
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	f000 fa42 	bl	8006a7c <USBH_LL_GetLastXferSize>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f507 521d 	add.w	r2, r7, #10048	; 0x2740
 80065fe:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8006602:	8013      	strh	r3, [r2, #0]
			 PRT_Handle->state = PRT_INIT;
 8006604:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006608:	f103 031c 	add.w	r3, r3, #28
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
			 USBH_Delay( PRT_Handle->poll);
 8006612:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8006616:	f103 031c 	add.w	r3, r3, #28
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	7a9b      	ldrb	r3, [r3, #10]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fb0f 	bl	8006c42 <USBH_Delay>
		 }

		 break;
 8006624:	e001      	b.n	800662a <USBH_PRT_Process+0x35e>

	 default:
		break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <USBH_PRT_Process+0x360>
		 break;
 800662a:	bf00      	nop

	}



	return USBH_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	f507 571d 	add.w	r7, r7, #10048	; 0x2740
 8006634:	3734      	adds	r7, #52	; 0x34
 8006636:	46bd      	mov	sp, r7
 8006638:	bd90      	pop	{r4, r7, pc}
 800663a:	bf00      	nop
 800663c:	200000c0 	.word	0x200000c0

08006640 <USBH_PRT_SOFProcess>:
static USBH_StatusTypeDef USBH_PRT_SOFProcess(USBH_HandleTypeDef *phost){
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

	 PRT_HandleTypeDef *PRT_Handle = (PRT_HandleTypeDef *) phost->pActiveClass->pData;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	60fb      	str	r3, [r7, #12]

	  if (PRT_Handle->state == PRT_POLL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d10c      	bne.n	8006674 <USBH_PRT_SOFProcess+0x34>
	  {
	    if ((phost->Timer - PRT_Handle->timer) >= PRT_Handle->poll)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	7a92      	ldrb	r2, [r2, #10]
 800666a:	4293      	cmp	r3, r2
 800666c:	d302      	bcc.n	8006674 <USBH_PRT_SOFProcess+0x34>
	    {
	      PRT_Handle->state = PRT_INIT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
	    }
	  }



	return USBH_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USBH_PRT_Get_Device_Id>:



static USBH_StatusTypeDef USBH_PRT_Get_Device_Id(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	4613      	mov	r3, r2
 800668e:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	22a1      	movs	r2, #161	; 0xa1
 8006694:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_DEVICE_ID;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff f9c2 	bl	8005a3e <USBH_CtlReq>
 80066ba:	4603      	mov	r3, r0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBH_PRT_Get_Port_Status>:


static USBH_StatusTypeDef USBH_PRT_Get_Port_Status(USBH_HandleTypeDef *phost, uint8_t *Buff, uint16_t Devlen){
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]

		phost->Control.setup.b.bmRequestType = 0xA1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22a1      	movs	r2, #161	; 0xa1
 80066d6:	741a      	strb	r2, [r3, #16]
		phost->Control.setup.b.bRequest = GET_PORT_STATUS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	745a      	strb	r2, [r3, #17]
		phost->Control.setup.b.wValue.w = 0x0000;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	825a      	strh	r2, [r3, #18]
		phost->Control.setup.b.wIndex.w = 0x0000;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	829a      	strh	r2, [r3, #20]
		phost->Control.setup.b.wLength.w = Devlen;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	88fa      	ldrh	r2, [r7, #6]
 80066ee:	82da      	strh	r2, [r3, #22]

		return USBH_CtlReq(phost, Buff, Devlen);
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff f9a1 	bl	8005a3e <USBH_CtlReq>
 80066fc:	4603      	mov	r3, r0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800670c:	2201      	movs	r2, #1
 800670e:	490e      	ldr	r1, [pc, #56]	; (8006748 <MX_USB_HOST_Init+0x40>)
 8006710:	480e      	ldr	r0, [pc, #56]	; (800674c <MX_USB_HOST_Init+0x44>)
 8006712:	f7fe f95f 	bl	80049d4 <USBH_Init>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800671c:	f7f9 ffac 	bl	8000678 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_PRT_CLASS) != USBH_OK)
 8006720:	490b      	ldr	r1, [pc, #44]	; (8006750 <MX_USB_HOST_Init+0x48>)
 8006722:	480a      	ldr	r0, [pc, #40]	; (800674c <MX_USB_HOST_Init+0x44>)
 8006724:	f7fe f9e4 	bl	8004af0 <USBH_RegisterClass>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800672e:	f7f9 ffa3 	bl	8000678 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006732:	4806      	ldr	r0, [pc, #24]	; (800674c <MX_USB_HOST_Init+0x44>)
 8006734:	f7fe fa4c 	bl	8004bd0 <USBH_Start>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800673e:	f7f9 ff9b 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006742:	bf00      	nop
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08006769 	.word	0x08006769
 800674c:	20000128 	.word	0x20000128
 8006750:	2000000c 	.word	0x2000000c

08006754 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006758:	4802      	ldr	r0, [pc, #8]	; (8006764 <MX_USB_HOST_Process+0x10>)
 800675a:	f7fe fa49 	bl	8004bf0 <USBH_Process>
}
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000128 	.word	0x20000128

08006768 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	3b01      	subs	r3, #1
 8006778:	2b04      	cmp	r3, #4
 800677a:	d819      	bhi.n	80067b0 <USBH_UserProcess+0x48>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <USBH_UserProcess+0x1c>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067b1 	.word	0x080067b1
 8006788:	080067a1 	.word	0x080067a1
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067a9 	.word	0x080067a9
 8006794:	08006799 	.word	0x08006799
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <USBH_UserProcess+0x58>)
 800679a:	2203      	movs	r2, #3
 800679c:	701a      	strb	r2, [r3, #0]
  break;
 800679e:	e008      	b.n	80067b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <USBH_UserProcess+0x58>)
 80067a2:	2202      	movs	r2, #2
 80067a4:	701a      	strb	r2, [r3, #0]
  break;
 80067a6:	e004      	b.n	80067b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <USBH_UserProcess+0x58>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
  break;
 80067ae:	e000      	b.n	80067b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80067b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	200000b0 	.word	0x200000b0

080067c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	609a      	str	r2, [r3, #8]
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067e4:	d13a      	bne.n	800685c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6313      	str	r3, [r2, #48]	; 0x30
 80067f6:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006802:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006808:	2302      	movs	r3, #2
 800680a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680c:	2300      	movs	r3, #0
 800680e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006810:	2303      	movs	r3, #3
 8006812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006814:	230a      	movs	r3, #10
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4619      	mov	r1, r3
 800681e:	4812      	ldr	r0, [pc, #72]	; (8006868 <HAL_HCD_MspInit+0xa4>)
 8006820:	f7fa f9f0 	bl	8000c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 800682a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682e:	6353      	str	r3, [r2, #52]	; 0x34
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 800683a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683e:	6453      	str	r3, [r2, #68]	; 0x44
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <HAL_HCD_MspInit+0xa0>)
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800684c:	2200      	movs	r2, #0
 800684e:	2100      	movs	r1, #0
 8006850:	2043      	movs	r0, #67	; 0x43
 8006852:	f7fa f9a0 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006856:	2043      	movs	r0, #67	; 0x43
 8006858:	f7fa f9b9 	bl	8000bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800685c:	bf00      	nop
 800685e:	3728      	adds	r7, #40	; 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40023800 	.word	0x40023800
 8006868:	40020000 	.word	0x40020000

0800686c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fd8b 	bl	8005396 <USBH_LL_IncTimer>
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fdc3 	bl	8005422 <USBH_LL_Connect>
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fdcc 	bl	8005450 <USBH_LL_Disconnect>
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
 80068cc:	4613      	mov	r3, r2
 80068ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe fd7d 	bl	80053ea <USBH_LL_PortEnabled>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fd7d 	bl	8005406 <USBH_LL_PortDisabled>
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006922:	2b01      	cmp	r3, #1
 8006924:	d12a      	bne.n	800697c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <USBH_LL_Init+0x74>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <USBH_LL_Init+0x74>)
 8006932:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <USBH_LL_Init+0x74>)
 8006938:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800693c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <USBH_LL_Init+0x74>)
 8006940:	2208      	movs	r2, #8
 8006942:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <USBH_LL_Init+0x74>)
 8006946:	2201      	movs	r2, #1
 8006948:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <USBH_LL_Init+0x74>)
 800694c:	2200      	movs	r2, #0
 800694e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <USBH_LL_Init+0x74>)
 8006952:	2202      	movs	r2, #2
 8006954:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <USBH_LL_Init+0x74>)
 8006958:	2201      	movs	r2, #1
 800695a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800695c:	480a      	ldr	r0, [pc, #40]	; (8006988 <USBH_LL_Init+0x74>)
 800695e:	f7fa faed 	bl	8000f3c <HAL_HCD_Init>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006968:	f7f9 fe86 	bl	8000678 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800696c:	4806      	ldr	r0, [pc, #24]	; (8006988 <USBH_LL_Init+0x74>)
 800696e:	f7fa fec9 	bl	8001704 <HAL_HCD_GetCurrentFrame>
 8006972:	4603      	mov	r3, r0
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe fcfe 	bl	8005378 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000500 	.word	0x20000500

0800698c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fa fe38 	bl	8001618 <HAL_HCD_Start>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f952 	bl	8006c58 <USBH_Get_USB_Status>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fa fe40 	bl	800165e <HAL_HCD_Stop>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f937 	bl	8006c58 <USBH_Get_USB_Status>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fa fe88 	bl	8001720 <HAL_HCD_GetCurrentSpeed>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d00c      	beq.n	8006a30 <USBH_LL_GetSpeed+0x38>
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d80d      	bhi.n	8006a36 <USBH_LL_GetSpeed+0x3e>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <USBH_LL_GetSpeed+0x2c>
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d003      	beq.n	8006a2a <USBH_LL_GetSpeed+0x32>
 8006a22:	e008      	b.n	8006a36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006a24:	2300      	movs	r3, #0
 8006a26:	73fb      	strb	r3, [r7, #15]
    break;
 8006a28:	e008      	b.n	8006a3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a2e:	e005      	b.n	8006a3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006a30:	2302      	movs	r3, #2
 8006a32:	73fb      	strb	r3, [r7, #15]
    break;
 8006a34:	e002      	b.n	8006a3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3a:	bf00      	nop
  }
  return  speed;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fa fe1b 	bl	8001698 <HAL_HCD_ResetPort>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f8f5 	bl	8006c58 <USBH_Get_USB_Status>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fa fe22 	bl	80016dc <HAL_HCD_HC_GetXferCount>
 8006a98:	4603      	mov	r3, r0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b089      	sub	sp, #36	; 0x24
 8006aa6:	af04      	add	r7, sp, #16
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	70fb      	strb	r3, [r7, #3]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70bb      	strb	r3, [r7, #2]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006aca:	787c      	ldrb	r4, [r7, #1]
 8006acc:	78ba      	ldrb	r2, [r7, #2]
 8006ace:	78f9      	ldrb	r1, [r7, #3]
 8006ad0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ad2:	9302      	str	r3, [sp, #8]
 8006ad4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	4623      	mov	r3, r4
 8006ae2:	f7fa fa8d 	bl	8001000 <HAL_HCD_HC_Init>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f8b3 	bl	8006c58 <USBH_Get_USB_Status>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd90      	pop	{r4, r7, pc}

08006b00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fa fafd 	bl	800111e <HAL_HCD_HC_Halt>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 f894 	bl	8006c58 <USBH_Get_USB_Status>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b3e:	b590      	push	{r4, r7, lr}
 8006b40:	b089      	sub	sp, #36	; 0x24
 8006b42:	af04      	add	r7, sp, #16
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	70fb      	strb	r3, [r7, #3]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70bb      	strb	r3, [r7, #2]
 8006b54:	4613      	mov	r3, r2
 8006b56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b66:	787c      	ldrb	r4, [r7, #1]
 8006b68:	78ba      	ldrb	r2, [r7, #2]
 8006b6a:	78f9      	ldrb	r1, [r7, #3]
 8006b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4623      	mov	r3, r4
 8006b82:	f7fa faef 	bl	8001164 <HAL_HCD_HC_SubmitRequest>
 8006b86:	4603      	mov	r3, r0
 8006b88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f863 	bl	8006c58 <USBH_Get_USB_Status>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd90      	pop	{r4, r7, pc}

08006ba0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fa fd7c 	bl	80016b4 <HAL_HCD_HC_GetURBState>
 8006bbc:	4603      	mov	r3, r0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8006bd2:	20c8      	movs	r0, #200	; 0xc8
 8006bd4:	f7f9 fee0 	bl	8000998 <HAL_Delay>
  return USBH_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bf8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	212c      	movs	r1, #44	; 0x2c
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	333b      	adds	r3, #59	; 0x3b
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	212c      	movs	r1, #44	; 0x2c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	3354      	adds	r3, #84	; 0x54
 8006c1c:	78ba      	ldrb	r2, [r7, #2]
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e008      	b.n	8006c34 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	212c      	movs	r1, #44	; 0x2c
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3355      	adds	r3, #85	; 0x55
 8006c30:	78ba      	ldrb	r2, [r7, #2]
 8006c32:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7f9 fea4 	bl	8000998 <HAL_Delay>
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d817      	bhi.n	8006c9c <USBH_Get_USB_Status+0x44>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <USBH_Get_USB_Status+0x1c>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c8b 	.word	0x08006c8b
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006c97 	.word	0x08006c97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
    break;
 8006c88:	e00b      	b.n	8006ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c8e:	e008      	b.n	8006ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
    break;
 8006c94:	e005      	b.n	8006ca2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006c96:	2302      	movs	r3, #2
 8006c98:	73fb      	strb	r3, [r7, #15]
    break;
 8006c9a:	e002      	b.n	8006ca2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca0:	bf00      	nop
  }
  return usb_status;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	2000002c 	.word	0x2000002c

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 f8f8 	bl	8006ec4 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08006f2c 	.word	0x08006f2c
 8006cf8:	08006f2c 	.word	0x08006f2c
 8006cfc:	08006f2c 	.word	0x08006f2c
 8006d00:	08006f30 	.word	0x08006f30

08006d04 <malloc>:
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <malloc+0xc>)
 8006d06:	4601      	mov	r1, r0
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	f000 b863 	b.w	8006dd4 <_malloc_r>
 8006d0e:	bf00      	nop
 8006d10:	2000002c 	.word	0x2000002c

08006d14 <free>:
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <free+0xc>)
 8006d16:	4601      	mov	r1, r0
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	f000 b80b 	b.w	8006d34 <_free_r>
 8006d1e:	bf00      	nop
 8006d20:	2000002c 	.word	0x2000002c

08006d24 <memset>:
 8006d24:	4402      	add	r2, r0
 8006d26:	4603      	mov	r3, r0
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d100      	bne.n	8006d2e <memset+0xa>
 8006d2c:	4770      	bx	lr
 8006d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d32:	e7f9      	b.n	8006d28 <memset+0x4>

08006d34 <_free_r>:
 8006d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d048      	beq.n	8006dcc <_free_r+0x98>
 8006d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3e:	9001      	str	r0, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f1a1 0404 	sub.w	r4, r1, #4
 8006d46:	bfb8      	it	lt
 8006d48:	18e4      	addlt	r4, r4, r3
 8006d4a:	f000 f8ad 	bl	8006ea8 <__malloc_lock>
 8006d4e:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <_free_r+0x9c>)
 8006d50:	9801      	ldr	r0, [sp, #4]
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	4615      	mov	r5, r2
 8006d56:	b933      	cbnz	r3, 8006d66 <_free_r+0x32>
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	6014      	str	r4, [r2, #0]
 8006d5c:	b003      	add	sp, #12
 8006d5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d62:	f000 b8a7 	b.w	8006eb4 <__malloc_unlock>
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	d90b      	bls.n	8006d82 <_free_r+0x4e>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	1862      	adds	r2, r4, r1
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	bf04      	itt	eq
 8006d72:	681a      	ldreq	r2, [r3, #0]
 8006d74:	685b      	ldreq	r3, [r3, #4]
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	bf04      	itt	eq
 8006d7a:	1852      	addeq	r2, r2, r1
 8006d7c:	6022      	streq	r2, [r4, #0]
 8006d7e:	602c      	str	r4, [r5, #0]
 8006d80:	e7ec      	b.n	8006d5c <_free_r+0x28>
 8006d82:	461a      	mov	r2, r3
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b10b      	cbz	r3, 8006d8c <_free_r+0x58>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d9fa      	bls.n	8006d82 <_free_r+0x4e>
 8006d8c:	6811      	ldr	r1, [r2, #0]
 8006d8e:	1855      	adds	r5, r2, r1
 8006d90:	42a5      	cmp	r5, r4
 8006d92:	d10b      	bne.n	8006dac <_free_r+0x78>
 8006d94:	6824      	ldr	r4, [r4, #0]
 8006d96:	4421      	add	r1, r4
 8006d98:	1854      	adds	r4, r2, r1
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	d1dd      	bne.n	8006d5c <_free_r+0x28>
 8006da0:	681c      	ldr	r4, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	6053      	str	r3, [r2, #4]
 8006da6:	4421      	add	r1, r4
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	e7d7      	b.n	8006d5c <_free_r+0x28>
 8006dac:	d902      	bls.n	8006db4 <_free_r+0x80>
 8006dae:	230c      	movs	r3, #12
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	e7d3      	b.n	8006d5c <_free_r+0x28>
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	1961      	adds	r1, r4, r5
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf04      	itt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	6063      	str	r3, [r4, #4]
 8006dc2:	bf04      	itt	eq
 8006dc4:	1949      	addeq	r1, r1, r5
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	6054      	str	r4, [r2, #4]
 8006dca:	e7c7      	b.n	8006d5c <_free_r+0x28>
 8006dcc:	b003      	add	sp, #12
 8006dce:	bd30      	pop	{r4, r5, pc}
 8006dd0:	200000b4 	.word	0x200000b4

08006dd4 <_malloc_r>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	1ccd      	adds	r5, r1, #3
 8006dd8:	f025 0503 	bic.w	r5, r5, #3
 8006ddc:	3508      	adds	r5, #8
 8006dde:	2d0c      	cmp	r5, #12
 8006de0:	bf38      	it	cc
 8006de2:	250c      	movcc	r5, #12
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	4606      	mov	r6, r0
 8006de8:	db01      	blt.n	8006dee <_malloc_r+0x1a>
 8006dea:	42a9      	cmp	r1, r5
 8006dec:	d903      	bls.n	8006df6 <_malloc_r+0x22>
 8006dee:	230c      	movs	r3, #12
 8006df0:	6033      	str	r3, [r6, #0]
 8006df2:	2000      	movs	r0, #0
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df6:	f000 f857 	bl	8006ea8 <__malloc_lock>
 8006dfa:	4921      	ldr	r1, [pc, #132]	; (8006e80 <_malloc_r+0xac>)
 8006dfc:	680a      	ldr	r2, [r1, #0]
 8006dfe:	4614      	mov	r4, r2
 8006e00:	b99c      	cbnz	r4, 8006e2a <_malloc_r+0x56>
 8006e02:	4f20      	ldr	r7, [pc, #128]	; (8006e84 <_malloc_r+0xb0>)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	b923      	cbnz	r3, 8006e12 <_malloc_r+0x3e>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f83c 	bl	8006e88 <_sbrk_r>
 8006e10:	6038      	str	r0, [r7, #0]
 8006e12:	4629      	mov	r1, r5
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 f837 	bl	8006e88 <_sbrk_r>
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	d123      	bne.n	8006e66 <_malloc_r+0x92>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	6033      	str	r3, [r6, #0]
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f846 	bl	8006eb4 <__malloc_unlock>
 8006e28:	e7e3      	b.n	8006df2 <_malloc_r+0x1e>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	1b5b      	subs	r3, r3, r5
 8006e2e:	d417      	bmi.n	8006e60 <_malloc_r+0x8c>
 8006e30:	2b0b      	cmp	r3, #11
 8006e32:	d903      	bls.n	8006e3c <_malloc_r+0x68>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	441c      	add	r4, r3
 8006e38:	6025      	str	r5, [r4, #0]
 8006e3a:	e004      	b.n	8006e46 <_malloc_r+0x72>
 8006e3c:	6863      	ldr	r3, [r4, #4]
 8006e3e:	42a2      	cmp	r2, r4
 8006e40:	bf0c      	ite	eq
 8006e42:	600b      	streq	r3, [r1, #0]
 8006e44:	6053      	strne	r3, [r2, #4]
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f834 	bl	8006eb4 <__malloc_unlock>
 8006e4c:	f104 000b 	add.w	r0, r4, #11
 8006e50:	1d23      	adds	r3, r4, #4
 8006e52:	f020 0007 	bic.w	r0, r0, #7
 8006e56:	1ac2      	subs	r2, r0, r3
 8006e58:	d0cc      	beq.n	8006df4 <_malloc_r+0x20>
 8006e5a:	1a1b      	subs	r3, r3, r0
 8006e5c:	50a3      	str	r3, [r4, r2]
 8006e5e:	e7c9      	b.n	8006df4 <_malloc_r+0x20>
 8006e60:	4622      	mov	r2, r4
 8006e62:	6864      	ldr	r4, [r4, #4]
 8006e64:	e7cc      	b.n	8006e00 <_malloc_r+0x2c>
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d0e3      	beq.n	8006e38 <_malloc_r+0x64>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 f808 	bl	8006e88 <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1dd      	bne.n	8006e38 <_malloc_r+0x64>
 8006e7c:	e7cf      	b.n	8006e1e <_malloc_r+0x4a>
 8006e7e:	bf00      	nop
 8006e80:	200000b4 	.word	0x200000b4
 8006e84:	200000b8 	.word	0x200000b8

08006e88 <_sbrk_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_sbrk_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7f9 fc9c 	bl	80007d0 <_sbrk>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_sbrk_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_sbrk_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	20000804 	.word	0x20000804

08006ea8 <__malloc_lock>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	; (8006eb0 <__malloc_lock+0x8>)
 8006eaa:	f000 b809 	b.w	8006ec0 <__retarget_lock_acquire_recursive>
 8006eae:	bf00      	nop
 8006eb0:	2000080c 	.word	0x2000080c

08006eb4 <__malloc_unlock>:
 8006eb4:	4801      	ldr	r0, [pc, #4]	; (8006ebc <__malloc_unlock+0x8>)
 8006eb6:	f000 b804 	b.w	8006ec2 <__retarget_lock_release_recursive>
 8006eba:	bf00      	nop
 8006ebc:	2000080c 	.word	0x2000080c

08006ec0 <__retarget_lock_acquire_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <__retarget_lock_release_recursive>:
 8006ec2:	4770      	bx	lr

08006ec4 <_init>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr

08006ed0 <_fini>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr
